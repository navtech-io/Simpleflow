//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Navtech\Opensource\Simpleflow\src\Simpleflow\Parser\Grammar\SimpleflowParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Simpleflow.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
internal partial class SimpleflowParser : SimpleflowParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		MultiLineComment=1, SingleLineComment=2, OpenBracket=3, CloseBracket=4, 
		OpenParen=5, CloseParen=6, OpenBrace=7, TemplateCloseBrace=8, CloseBrace=9, 
		Colon=10, Comma=11, Dot=12, Assign=13, PlusOp=14, MinusOp=15, TimesOp=16, 
		DivOp=17, ModuloOp=18, GreaterThan=19, GreaterThanEqual=20, LessThan=21, 
		LessThanEqual=22, Equal=23, NotEqual=24, Let=25, Set=26, Partial=27, Rule=28, 
		When=29, Then=30, End=31, Exit=32, Message=33, Error=34, Output=35, Semicolon=36, 
		And=37, Or=38, Not=39, True=40, False=41, Number=42, String=43, None=44, 
		Identifier=45, IgnoreIdentifier=46, Indexer=47, FunctionName=48, BackTick=49, 
		WhiteSpaces=50, LineTerminator=51, TemplateStringStartExpression=52, TemplateStringAtom=53;
	public const int
		RULE_program = 0, RULE_letStmt = 1, RULE_ruleStmt = 2, RULE_generalStatement = 3, 
		RULE_endRuleStmt = 4, RULE_setStmt = 5, RULE_messageStmt = 6, RULE_errorStmt = 7, 
		RULE_outputStmt = 8, RULE_functionStmt = 9, RULE_exitStmt = 10, RULE_expression = 11, 
		RULE_simpleLiteral = 12, RULE_templateStringLiteral = 13, RULE_templateStringAtom = 14, 
		RULE_function = 15, RULE_functionArguments = 16, RULE_functionArgument = 17, 
		RULE_objectIdentifier = 18, RULE_identifierIndex = 19, RULE_index = 20, 
		RULE_stringLiteral = 21, RULE_numberLiteral = 22, RULE_boolLeteral = 23, 
		RULE_noneLiteral = 24, RULE_arrayLiteral = 25, RULE_jsonObjLiteral = 26, 
		RULE_pair = 27, RULE_eos = 28;
	public static readonly string[] ruleNames = {
		"program", "letStmt", "ruleStmt", "generalStatement", "endRuleStmt", "setStmt", 
		"messageStmt", "errorStmt", "outputStmt", "functionStmt", "exitStmt", 
		"expression", "simpleLiteral", "templateStringLiteral", "templateStringAtom", 
		"function", "functionArguments", "functionArgument", "objectIdentifier", 
		"identifierIndex", "index", "stringLiteral", "numberLiteral", "boolLeteral", 
		"noneLiteral", "arrayLiteral", "jsonObjLiteral", "pair", "eos"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'['", "']'", "'('", "')'", null, null, "'}'", "':'", 
		"','", "'.'", "'='", "'+'", "'-'", "'*'", "'/'", "'%'", "'>'", "'>='", 
		"'<'", "'<='", "'=='", "'!='", "'let'", "'set'", "'partial'", "'rule'", 
		"'when'", "'then'", "'end'", "'exit'", "'message'", "'error'", "'output'", 
		"';'", "'and'", "'or'", "'not'", "'true'", "'false'", null, null, "'none'", 
		null, "'_'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MultiLineComment", "SingleLineComment", "OpenBracket", "CloseBracket", 
		"OpenParen", "CloseParen", "OpenBrace", "TemplateCloseBrace", "CloseBrace", 
		"Colon", "Comma", "Dot", "Assign", "PlusOp", "MinusOp", "TimesOp", "DivOp", 
		"ModuloOp", "GreaterThan", "GreaterThanEqual", "LessThan", "LessThanEqual", 
		"Equal", "NotEqual", "Let", "Set", "Partial", "Rule", "When", "Then", 
		"End", "Exit", "Message", "Error", "Output", "Semicolon", "And", "Or", 
		"Not", "True", "False", "Number", "String", "None", "Identifier", "IgnoreIdentifier", 
		"Indexer", "FunctionName", "BackTick", "WhiteSpaces", "LineTerminator", 
		"TemplateStringStartExpression", "TemplateStringAtom"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SimpleflowParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SimpleflowParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SimpleflowParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SimpleflowParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	internal partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SimpleflowParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LetStmtContext[] letStmt() {
			return GetRuleContexts<LetStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetStmtContext letStmt(int i) {
			return GetRuleContext<LetStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleStmtContext[] ruleStmt() {
			return GetRuleContexts<RuleStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleStmtContext ruleStmt(int i) {
			return GetRuleContext<RuleStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralStatementContext[] generalStatement() {
			return GetRuleContexts<GeneralStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralStatementContext generalStatement(int i) {
			return GetRuleContext<GeneralStatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Let) {
				{
				{
				State = 58;
				letStmt();
				}
				}
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Set) | (1L << Partial) | (1L << Rule) | (1L << Exit) | (1L << Message) | (1L << Error) | (1L << Output) | (1L << FunctionName))) != 0)) {
				{
				State = 66;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Rule:
					{
					State = 64;
					ruleStmt();
					}
					break;
				case Set:
				case Partial:
				case Exit:
				case Message:
				case Error:
				case Output:
				case FunctionName:
					{
					State = 65;
					generalStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 71;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class LetStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Let() { return GetToken(SimpleflowParser.Let, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(SimpleflowParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(SimpleflowParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(SimpleflowParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IgnoreIdentifier() { return GetToken(SimpleflowParser.IgnoreIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(SimpleflowParser.Comma, 0); }
		public LetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterLetStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitLetStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetStmtContext letStmt() {
		LetStmtContext _localctx = new LetStmtContext(Context, State);
		EnterRule(_localctx, 2, RULE_letStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			Match(Let);
			State = 74;
			_la = TokenStream.LA(1);
			if ( !(_la==Identifier || _la==IgnoreIdentifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 75;
				Match(Comma);
				State = 76;
				Match(Identifier);
				}
			}

			State = 79;
			Match(Assign);
			State = 80;
			expression(0);
			State = 81;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class RuleStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rule() { return GetToken(SimpleflowParser.Rule, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode When() { return GetToken(SimpleflowParser.When, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Then() { return GetToken(SimpleflowParser.Then, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralStatementContext[] generalStatement() {
			return GetRuleContexts<GeneralStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralStatementContext generalStatement(int i) {
			return GetRuleContext<GeneralStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndRuleStmtContext endRuleStmt() {
			return GetRuleContext<EndRuleStmtContext>(0);
		}
		public RuleStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterRuleStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitRuleStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleStmtContext ruleStmt() {
		RuleStmtContext _localctx = new RuleStmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_ruleStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			Match(Rule);
			State = 84;
			Match(When);
			State = 85;
			expression(0);
			State = 86;
			Match(Then);
			State = 87;
			eos();
			State = 89;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 88;
					generalStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 91;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==End) {
				{
				State = 93;
				endRuleStmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class GeneralStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessageStmtContext messageStmt() {
			return GetRuleContext<MessageStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorStmtContext errorStmt() {
			return GetRuleContext<ErrorStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputStmtContext outputStmt() {
			return GetRuleContext<OutputStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetStmtContext setStmt() {
			return GetRuleContext<SetStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionStmtContext functionStmt() {
			return GetRuleContext<FunctionStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExitStmtContext exitStmt() {
			return GetRuleContext<ExitStmtContext>(0);
		}
		public GeneralStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generalStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterGeneralStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitGeneralStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneralStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneralStatementContext generalStatement() {
		GeneralStatementContext _localctx = new GeneralStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_generalStatement);
		try {
			State = 102;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Message:
				EnterOuterAlt(_localctx, 1);
				{
				State = 96;
				messageStmt();
				}
				break;
			case Error:
				EnterOuterAlt(_localctx, 2);
				{
				State = 97;
				errorStmt();
				}
				break;
			case Output:
				EnterOuterAlt(_localctx, 3);
				{
				State = 98;
				outputStmt();
				}
				break;
			case Set:
			case Partial:
				EnterOuterAlt(_localctx, 4);
				{
				State = 99;
				setStmt();
				}
				break;
			case FunctionName:
				EnterOuterAlt(_localctx, 5);
				{
				State = 100;
				functionStmt();
				}
				break;
			case Exit:
				EnterOuterAlt(_localctx, 6);
				{
				State = 101;
				exitStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class EndRuleStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(SimpleflowParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rule() { return GetToken(SimpleflowParser.Rule, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public EndRuleStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endRuleStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterEndRuleStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitEndRuleStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndRuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndRuleStmtContext endRuleStmt() {
		EndRuleStmtContext _localctx = new EndRuleStmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_endRuleStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(End);
			State = 105;
			Match(Rule);
			State = 106;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class SetStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Set() { return GetToken(SimpleflowParser.Set, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(SimpleflowParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(SimpleflowParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(SimpleflowParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IgnoreIdentifier() { return GetToken(SimpleflowParser.IgnoreIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Partial() { return GetToken(SimpleflowParser.Partial, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(SimpleflowParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		public SetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterSetStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitSetStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStmtContext setStmt() {
		SetStmtContext _localctx = new SetStmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_setStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Partial) {
				{
				State = 108;
				Match(Partial);
				}
			}

			State = 111;
			Match(Set);
			State = 117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				{
				State = 112;
				Match(Identifier);
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpenBracket) {
					{
					State = 113;
					index();
					}
				}

				}
				break;
			case IgnoreIdentifier:
				{
				State = 116;
				Match(IgnoreIdentifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 119;
				Match(Comma);
				State = 120;
				Match(Identifier);
				}
			}

			State = 123;
			Match(Assign);
			State = 124;
			expression(0);
			State = 125;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class MessageStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Message() { return GetToken(SimpleflowParser.Message, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public MessageStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterMessageStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitMessageStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageStmtContext messageStmt() {
		MessageStmtContext _localctx = new MessageStmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_messageStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			Match(Message);
			State = 128;
			expression(0);
			State = 129;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ErrorStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Error() { return GetToken(SimpleflowParser.Error, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterErrorStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitErrorStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStmtContext errorStmt() {
		ErrorStmtContext _localctx = new ErrorStmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_errorStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			Match(Error);
			State = 132;
			expression(0);
			State = 133;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class OutputStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Output() { return GetToken(SimpleflowParser.Output, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectIdentifierContext objectIdentifier() {
			return GetRuleContext<ObjectIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public OutputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterOutputStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitOutputStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputStmtContext outputStmt() {
		OutputStmtContext _localctx = new OutputStmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_outputStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(Output);
			State = 136;
			objectIdentifier();
			State = 137;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class FunctionStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public FunctionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterFunctionStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitFunctionStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStmtContext functionStmt() {
		FunctionStmtContext _localctx = new FunctionStmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_functionStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			function();
			State = 140;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ExitStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exit() { return GetToken(SimpleflowParser.Exit, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ExitStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterExitStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitExitStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStmtContext exitStmt() {
		ExitStmtContext _localctx = new ExitStmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_exitStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(Exit);
			State = 143;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	internal partial class ParenthesizedExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(SimpleflowParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(SimpleflowParser.CloseParen, 0); }
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class AdditiveExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusOp() { return GetToken(SimpleflowParser.PlusOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusOp() { return GetToken(SimpleflowParser.MinusOp, 0); }
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class RelationalExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThan() { return GetToken(SimpleflowParser.GreaterThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(SimpleflowParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanEqual() { return GetToken(SimpleflowParser.GreaterThanEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanEqual() { return GetToken(SimpleflowParser.LessThanEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(SimpleflowParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual() { return GetToken(SimpleflowParser.NotEqual, 0); }
		public RelationalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class LogicalExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(SimpleflowParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(SimpleflowParser.Or, 0); }
		public LogicalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterLogicalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitLogicalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class ObjectIdentiferExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectIdentifierContext objectIdentifier() {
			return GetRuleContext<ObjectIdentifierContext>(0);
		}
		public ObjectIdentiferExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterObjectIdentiferExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitObjectIdentiferExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectIdentiferExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class FunctionExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public FunctionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterFunctionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitFunctionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class ArrayLiteralExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public ArrayLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterArrayLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitArrayLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class SimpleLiteralExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleLiteralContext simpleLiteral() {
			return GetRuleContext<SimpleLiteralContext>(0);
		}
		public SimpleLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterSimpleLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitSimpleLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class NotExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(SimpleflowParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class JsonObjLiteralExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public JsonObjLiteralContext jsonObjLiteral() {
			return GetRuleContext<JsonObjLiteralContext>(0);
		}
		public JsonObjLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterJsonObjLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitJsonObjLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonObjLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	internal partial class MultiplicativeExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TimesOp() { return GetToken(SimpleflowParser.TimesOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivOp() { return GetToken(SimpleflowParser.DivOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModuloOp() { return GetToken(SimpleflowParser.ModuloOp, 0); }
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Not:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 146;
				Match(Not);
				State = 147;
				expression(7);
				}
				break;
			case Identifier:
				{
				_localctx = new ObjectIdentiferExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 148;
				objectIdentifier();
				}
				break;
			case True:
			case False:
			case Number:
			case String:
			case None:
			case BackTick:
				{
				_localctx = new SimpleLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 149;
				simpleLiteral();
				}
				break;
			case OpenBracket:
				{
				_localctx = new ArrayLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 150;
				arrayLiteral();
				}
				break;
			case OpenBrace:
				{
				_localctx = new JsonObjLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 151;
				jsonObjLiteral();
				}
				break;
			case FunctionName:
				{
				_localctx = new FunctionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 152;
				function();
				}
				break;
			case OpenParen:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 153;
				Match(OpenParen);
				State = 154;
				expression(0);
				State = 155;
				Match(CloseParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 173;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 171;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 159;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 160;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TimesOp) | (1L << DivOp) | (1L << ModuloOp))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 161;
						expression(12);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 162;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 163;
						_la = TokenStream.LA(1);
						if ( !(_la==PlusOp || _la==MinusOp) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 164;
						expression(11);
						}
						break;
					case 3:
						{
						_localctx = new RelationalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 165;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 166;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GreaterThan) | (1L << GreaterThanEqual) | (1L << LessThan) | (1L << LessThanEqual) | (1L << Equal) | (1L << NotEqual))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 167;
						expression(10);
						}
						break;
					case 4:
						{
						_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 168;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 169;
						_la = TokenStream.LA(1);
						if ( !(_la==And || _la==Or) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 170;
						expression(9);
						}
						break;
					}
					} 
				}
				State = 175;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	internal partial class SimpleLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NoneLiteralContext noneLiteral() {
			return GetRuleContext<NoneLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolLeteralContext boolLeteral() {
			return GetRuleContext<BoolLeteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringLiteralContext templateStringLiteral() {
			return GetRuleContext<TemplateStringLiteralContext>(0);
		}
		public SimpleLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterSimpleLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitSimpleLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleLiteralContext simpleLiteral() {
		SimpleLiteralContext _localctx = new SimpleLiteralContext(Context, State);
		EnterRule(_localctx, 24, RULE_simpleLiteral);
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case None:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176;
				noneLiteral();
				}
				break;
			case True:
			case False:
				EnterOuterAlt(_localctx, 2);
				{
				State = 177;
				boolLeteral();
				}
				break;
			case Number:
				EnterOuterAlt(_localctx, 3);
				{
				State = 178;
				numberLiteral();
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 4);
				{
				State = 179;
				stringLiteral();
				}
				break;
			case BackTick:
				EnterOuterAlt(_localctx, 5);
				{
				State = 180;
				templateStringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class TemplateStringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BackTick() { return GetTokens(SimpleflowParser.BackTick); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BackTick(int i) {
			return GetToken(SimpleflowParser.BackTick, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringAtomContext[] templateStringAtom() {
			return GetRuleContexts<TemplateStringAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringAtomContext templateStringAtom(int i) {
			return GetRuleContext<TemplateStringAtomContext>(i);
		}
		public TemplateStringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterTemplateStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitTemplateStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStringLiteralContext templateStringLiteral() {
		TemplateStringLiteralContext _localctx = new TemplateStringLiteralContext(Context, State);
		EnterRule(_localctx, 26, RULE_templateStringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			Match(BackTick);
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TemplateStringStartExpression || _la==TemplateStringAtom) {
				{
				{
				State = 184;
				templateStringAtom();
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 190;
			Match(BackTick);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class TemplateStringAtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringAtom() { return GetToken(SimpleflowParser.TemplateStringAtom, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringStartExpression() { return GetToken(SimpleflowParser.TemplateStringStartExpression, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateCloseBrace() { return GetToken(SimpleflowParser.TemplateCloseBrace, 0); }
		public TemplateStringAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStringAtom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterTemplateStringAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitTemplateStringAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateStringAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStringAtomContext templateStringAtom() {
		TemplateStringAtomContext _localctx = new TemplateStringAtomContext(Context, State);
		EnterRule(_localctx, 28, RULE_templateStringAtom);
		try {
			State = 197;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TemplateStringAtom:
				EnterOuterAlt(_localctx, 1);
				{
				State = 192;
				Match(TemplateStringAtom);
				}
				break;
			case TemplateStringStartExpression:
				EnterOuterAlt(_localctx, 2);
				{
				State = 193;
				Match(TemplateStringStartExpression);
				State = 194;
				expression(0);
				State = 195;
				Match(TemplateCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FunctionName() { return GetToken(SimpleflowParser.FunctionName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgumentsContext functionArguments() {
			return GetRuleContext<FunctionArgumentsContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 30, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			Match(FunctionName);
			State = 200;
			functionArguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class FunctionArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(SimpleflowParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(SimpleflowParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgumentContext[] functionArgument() {
			return GetRuleContexts<FunctionArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgumentContext functionArgument(int i) {
			return GetRuleContext<FunctionArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SimpleflowParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SimpleflowParser.Comma, i);
		}
		public FunctionArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterFunctionArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitFunctionArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgumentsContext functionArguments() {
		FunctionArgumentsContext _localctx = new FunctionArgumentsContext(Context, State);
		EnterRule(_localctx, 32, RULE_functionArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			Match(OpenParen);
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 203;
				functionArgument();
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 204;
					Match(Comma);
					State = 205;
					functionArgument();
					}
					}
					State = 210;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 213;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class FunctionArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SimpleflowParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(SimpleflowParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterFunctionArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitFunctionArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgumentContext functionArgument() {
		FunctionArgumentContext _localctx = new FunctionArgumentContext(Context, State);
		EnterRule(_localctx, 34, RULE_functionArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			Match(Identifier);
			State = 216;
			Match(Colon);
			State = 217;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ObjectIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierIndexContext[] identifierIndex() {
			return GetRuleContexts<IdentifierIndexContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierIndexContext identifierIndex(int i) {
			return GetRuleContext<IdentifierIndexContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(SimpleflowParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(SimpleflowParser.Dot, i);
		}
		public ObjectIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterObjectIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitObjectIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectIdentifierContext objectIdentifier() {
		ObjectIdentifierContext _localctx = new ObjectIdentifierContext(Context, State);
		EnterRule(_localctx, 36, RULE_objectIdentifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			identifierIndex();
			State = 224;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 220;
					Match(Dot);
					State = 221;
					identifierIndex();
					}
					} 
				}
				State = 226;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class IdentifierIndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SimpleflowParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		public IdentifierIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierIndex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterIdentifierIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitIdentifierIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierIndexContext identifierIndex() {
		IdentifierIndexContext _localctx = new IdentifierIndexContext(Context, State);
		EnterRule(_localctx, 38, RULE_identifierIndex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			Match(Identifier);
			State = 229;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 228;
				index();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class IndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(SimpleflowParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(SimpleflowParser.CloseBracket, 0); }
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 40, RULE_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			Match(OpenBracket);
			State = 232;
			expression(0);
			State = 233;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(SimpleflowParser.String, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 42, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			Match(String);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class NumberLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(SimpleflowParser.Number, 0); }
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(Context, State);
		EnterRule(_localctx, 44, RULE_numberLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(Number);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class BoolLeteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(SimpleflowParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(SimpleflowParser.False, 0); }
		public BoolLeteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolLeteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterBoolLeteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitBoolLeteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLeteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolLeteralContext boolLeteral() {
		BoolLeteralContext _localctx = new BoolLeteralContext(Context, State);
		EnterRule(_localctx, 46, RULE_boolLeteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			_la = TokenStream.LA(1);
			if ( !(_la==True || _la==False) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class NoneLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode None() { return GetToken(SimpleflowParser.None, 0); }
		public NoneLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noneLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterNoneLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitNoneLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoneLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoneLiteralContext noneLiteral() {
		NoneLiteralContext _localctx = new NoneLiteralContext(Context, State);
		EnterRule(_localctx, 48, RULE_noneLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			Match(None);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(SimpleflowParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(SimpleflowParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SimpleflowParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SimpleflowParser.Comma, i);
		}
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterArrayLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitArrayLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 50, RULE_arrayLiteral);
		int _la;
		try {
			State = 256;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243;
				Match(OpenBracket);
				State = 244;
				expression(0);
				State = 249;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 245;
					Match(Comma);
					State = 246;
					expression(0);
					}
					}
					State = 251;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 252;
				Match(CloseBracket);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 254;
				Match(OpenBracket);
				State = 255;
				Match(CloseBracket);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class JsonObjLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(SimpleflowParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(SimpleflowParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SimpleflowParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SimpleflowParser.Comma, i);
		}
		public JsonObjLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonObjLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterJsonObjLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitJsonObjLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonObjLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonObjLiteralContext jsonObjLiteral() {
		JsonObjLiteralContext _localctx = new JsonObjLiteralContext(Context, State);
		EnterRule(_localctx, 52, RULE_jsonObjLiteral);
		int _la;
		try {
			State = 271;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 258;
				Match(OpenBrace);
				State = 259;
				pair();
				State = 264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 260;
					Match(Comma);
					State = 261;
					pair();
					}
					}
					State = 266;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 267;
				Match(CloseBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 269;
				Match(OpenBrace);
				State = 270;
				Match(CloseBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class PairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SimpleflowParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(SimpleflowParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 54, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			Match(Identifier);
			State = 274;
			Match(Colon);
			State = 275;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class EosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SimpleflowParser.Eof, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterEos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitEos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 56, RULE_eos);
		try {
			State = 279;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 277;
				Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 278;
				if (!(this.LineTerminatorAhead())) throw new FailedPredicateException(this, "this.LineTerminatorAhead()");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 28: return eos_sempred((EosContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		}
		return true;
	}
	private bool eos_sempred(EosContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return this.LineTerminatorAhead();
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,53,282,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		1,0,5,0,60,8,0,10,0,12,0,63,9,0,1,0,1,0,5,0,67,8,0,10,0,12,0,70,9,0,1,
		0,1,0,1,1,1,1,1,1,1,1,3,1,78,8,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,
		2,4,2,90,8,2,11,2,12,2,91,1,2,3,2,95,8,2,1,3,1,3,1,3,1,3,1,3,1,3,3,3,103,
		8,3,1,4,1,4,1,4,1,4,1,5,3,5,110,8,5,1,5,1,5,1,5,3,5,115,8,5,1,5,3,5,118,
		8,5,1,5,1,5,3,5,122,8,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,
		7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,158,8,11,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,5,11,172,8,11,10,11,12,11,175,9,
		11,1,12,1,12,1,12,1,12,1,12,3,12,182,8,12,1,13,1,13,5,13,186,8,13,10,13,
		12,13,189,9,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,3,14,198,8,14,1,15,1,
		15,1,15,1,16,1,16,1,16,1,16,5,16,207,8,16,10,16,12,16,210,9,16,3,16,212,
		8,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,5,18,223,8,18,10,18,
		12,18,226,9,18,1,19,1,19,3,19,230,8,19,1,20,1,20,1,20,1,20,1,21,1,21,1,
		22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,25,5,25,248,8,25,10,25,12,
		25,251,9,25,1,25,1,25,1,25,1,25,3,25,257,8,25,1,26,1,26,1,26,1,26,5,26,
		263,8,26,10,26,12,26,266,9,26,1,26,1,26,1,26,1,26,3,26,272,8,26,1,27,1,
		27,1,27,1,27,1,28,1,28,3,28,280,8,28,1,28,0,1,22,29,0,2,4,6,8,10,12,14,
		16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,0,6,1,0,
		45,46,1,0,16,18,1,0,14,15,1,0,19,24,1,0,37,38,1,0,40,41,292,0,61,1,0,0,
		0,2,73,1,0,0,0,4,83,1,0,0,0,6,102,1,0,0,0,8,104,1,0,0,0,10,109,1,0,0,0,
		12,127,1,0,0,0,14,131,1,0,0,0,16,135,1,0,0,0,18,139,1,0,0,0,20,142,1,0,
		0,0,22,157,1,0,0,0,24,181,1,0,0,0,26,183,1,0,0,0,28,197,1,0,0,0,30,199,
		1,0,0,0,32,202,1,0,0,0,34,215,1,0,0,0,36,219,1,0,0,0,38,227,1,0,0,0,40,
		231,1,0,0,0,42,235,1,0,0,0,44,237,1,0,0,0,46,239,1,0,0,0,48,241,1,0,0,
		0,50,256,1,0,0,0,52,271,1,0,0,0,54,273,1,0,0,0,56,279,1,0,0,0,58,60,3,
		2,1,0,59,58,1,0,0,0,60,63,1,0,0,0,61,59,1,0,0,0,61,62,1,0,0,0,62,68,1,
		0,0,0,63,61,1,0,0,0,64,67,3,4,2,0,65,67,3,6,3,0,66,64,1,0,0,0,66,65,1,
		0,0,0,67,70,1,0,0,0,68,66,1,0,0,0,68,69,1,0,0,0,69,71,1,0,0,0,70,68,1,
		0,0,0,71,72,5,0,0,1,72,1,1,0,0,0,73,74,5,25,0,0,74,77,7,0,0,0,75,76,5,
		11,0,0,76,78,5,45,0,0,77,75,1,0,0,0,77,78,1,0,0,0,78,79,1,0,0,0,79,80,
		5,13,0,0,80,81,3,22,11,0,81,82,3,56,28,0,82,3,1,0,0,0,83,84,5,28,0,0,84,
		85,5,29,0,0,85,86,3,22,11,0,86,87,5,30,0,0,87,89,3,56,28,0,88,90,3,6,3,
		0,89,88,1,0,0,0,90,91,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,92,94,1,0,0,
		0,93,95,3,8,4,0,94,93,1,0,0,0,94,95,1,0,0,0,95,5,1,0,0,0,96,103,3,12,6,
		0,97,103,3,14,7,0,98,103,3,16,8,0,99,103,3,10,5,0,100,103,3,18,9,0,101,
		103,3,20,10,0,102,96,1,0,0,0,102,97,1,0,0,0,102,98,1,0,0,0,102,99,1,0,
		0,0,102,100,1,0,0,0,102,101,1,0,0,0,103,7,1,0,0,0,104,105,5,31,0,0,105,
		106,5,28,0,0,106,107,3,56,28,0,107,9,1,0,0,0,108,110,5,27,0,0,109,108,
		1,0,0,0,109,110,1,0,0,0,110,111,1,0,0,0,111,117,5,26,0,0,112,114,5,45,
		0,0,113,115,3,40,20,0,114,113,1,0,0,0,114,115,1,0,0,0,115,118,1,0,0,0,
		116,118,5,46,0,0,117,112,1,0,0,0,117,116,1,0,0,0,118,121,1,0,0,0,119,120,
		5,11,0,0,120,122,5,45,0,0,121,119,1,0,0,0,121,122,1,0,0,0,122,123,1,0,
		0,0,123,124,5,13,0,0,124,125,3,22,11,0,125,126,3,56,28,0,126,11,1,0,0,
		0,127,128,5,33,0,0,128,129,3,22,11,0,129,130,3,56,28,0,130,13,1,0,0,0,
		131,132,5,34,0,0,132,133,3,22,11,0,133,134,3,56,28,0,134,15,1,0,0,0,135,
		136,5,35,0,0,136,137,3,36,18,0,137,138,3,56,28,0,138,17,1,0,0,0,139,140,
		3,30,15,0,140,141,3,56,28,0,141,19,1,0,0,0,142,143,5,32,0,0,143,144,3,
		56,28,0,144,21,1,0,0,0,145,146,6,11,-1,0,146,147,5,39,0,0,147,158,3,22,
		11,7,148,158,3,36,18,0,149,158,3,24,12,0,150,158,3,50,25,0,151,158,3,52,
		26,0,152,158,3,30,15,0,153,154,5,5,0,0,154,155,3,22,11,0,155,156,5,6,0,
		0,156,158,1,0,0,0,157,145,1,0,0,0,157,148,1,0,0,0,157,149,1,0,0,0,157,
		150,1,0,0,0,157,151,1,0,0,0,157,152,1,0,0,0,157,153,1,0,0,0,158,173,1,
		0,0,0,159,160,10,11,0,0,160,161,7,1,0,0,161,172,3,22,11,12,162,163,10,
		10,0,0,163,164,7,2,0,0,164,172,3,22,11,11,165,166,10,9,0,0,166,167,7,3,
		0,0,167,172,3,22,11,10,168,169,10,8,0,0,169,170,7,4,0,0,170,172,3,22,11,
		9,171,159,1,0,0,0,171,162,1,0,0,0,171,165,1,0,0,0,171,168,1,0,0,0,172,
		175,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,23,1,0,0,0,175,173,1,0,
		0,0,176,182,3,48,24,0,177,182,3,46,23,0,178,182,3,44,22,0,179,182,3,42,
		21,0,180,182,3,26,13,0,181,176,1,0,0,0,181,177,1,0,0,0,181,178,1,0,0,0,
		181,179,1,0,0,0,181,180,1,0,0,0,182,25,1,0,0,0,183,187,5,49,0,0,184,186,
		3,28,14,0,185,184,1,0,0,0,186,189,1,0,0,0,187,185,1,0,0,0,187,188,1,0,
		0,0,188,190,1,0,0,0,189,187,1,0,0,0,190,191,5,49,0,0,191,27,1,0,0,0,192,
		198,5,53,0,0,193,194,5,52,0,0,194,195,3,22,11,0,195,196,5,8,0,0,196,198,
		1,0,0,0,197,192,1,0,0,0,197,193,1,0,0,0,198,29,1,0,0,0,199,200,5,48,0,
		0,200,201,3,32,16,0,201,31,1,0,0,0,202,211,5,5,0,0,203,208,3,34,17,0,204,
		205,5,11,0,0,205,207,3,34,17,0,206,204,1,0,0,0,207,210,1,0,0,0,208,206,
		1,0,0,0,208,209,1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,211,203,1,0,0,
		0,211,212,1,0,0,0,212,213,1,0,0,0,213,214,5,6,0,0,214,33,1,0,0,0,215,216,
		5,45,0,0,216,217,5,10,0,0,217,218,3,22,11,0,218,35,1,0,0,0,219,224,3,38,
		19,0,220,221,5,12,0,0,221,223,3,38,19,0,222,220,1,0,0,0,223,226,1,0,0,
		0,224,222,1,0,0,0,224,225,1,0,0,0,225,37,1,0,0,0,226,224,1,0,0,0,227,229,
		5,45,0,0,228,230,3,40,20,0,229,228,1,0,0,0,229,230,1,0,0,0,230,39,1,0,
		0,0,231,232,5,3,0,0,232,233,3,22,11,0,233,234,5,4,0,0,234,41,1,0,0,0,235,
		236,5,43,0,0,236,43,1,0,0,0,237,238,5,42,0,0,238,45,1,0,0,0,239,240,7,
		5,0,0,240,47,1,0,0,0,241,242,5,44,0,0,242,49,1,0,0,0,243,244,5,3,0,0,244,
		249,3,22,11,0,245,246,5,11,0,0,246,248,3,22,11,0,247,245,1,0,0,0,248,251,
		1,0,0,0,249,247,1,0,0,0,249,250,1,0,0,0,250,252,1,0,0,0,251,249,1,0,0,
		0,252,253,5,4,0,0,253,257,1,0,0,0,254,255,5,3,0,0,255,257,5,4,0,0,256,
		243,1,0,0,0,256,254,1,0,0,0,257,51,1,0,0,0,258,259,5,7,0,0,259,264,3,54,
		27,0,260,261,5,11,0,0,261,263,3,54,27,0,262,260,1,0,0,0,263,266,1,0,0,
		0,264,262,1,0,0,0,264,265,1,0,0,0,265,267,1,0,0,0,266,264,1,0,0,0,267,
		268,5,9,0,0,268,272,1,0,0,0,269,270,5,7,0,0,270,272,5,9,0,0,271,258,1,
		0,0,0,271,269,1,0,0,0,272,53,1,0,0,0,273,274,5,45,0,0,274,275,5,10,0,0,
		275,276,3,22,11,0,276,55,1,0,0,0,277,280,5,0,0,1,278,280,4,28,4,0,279,
		277,1,0,0,0,279,278,1,0,0,0,280,57,1,0,0,0,26,61,66,68,77,91,94,102,109,
		114,117,121,157,171,173,181,187,197,208,211,224,229,249,256,264,271,279
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Simpleflow.Parser
