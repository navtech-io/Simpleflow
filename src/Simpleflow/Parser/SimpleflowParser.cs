//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Navtech\Opensource\Simpleflow\src\Simpleflow\Parser\Grammar\SimpleflowParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Simpleflow.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
internal partial class SimpleflowParser : SimpleflowParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		End=1, Exit=2, Colon=3, Comma=4, True=5, False=6, Dot=7, OpenBrace=8, 
		CloseBrace=9, Rule=10, When=11, Then=12, Message=13, Error=14, Output=15, 
		Let=16, Set=17, Partial=18, Assign=19, WhiteSpaces=20, LineTerminator=21, 
		MultiLineComment=22, SingleLineComment=23, And=24, Or=25, Not=26, GreaterThan=27, 
		GreaterThanEqual=28, LessThan=29, LessThanEqual=30, Equal=31, NotEqual=32, 
		Contains=33, OpenParen=34, CloseParen=35, Number=36, String=37, None=38, 
		Identifier=39, PlusOp=40, MinusOp=41, TimesOp=42, DivOp=43, ModuloOp=44, 
		FunctionName=45;
	public const int
		RULE_program = 0, RULE_ruleStmt = 1, RULE_endRuleStmt = 2, RULE_exitStmt = 3, 
		RULE_generalStatement = 4, RULE_letStmt = 5, RULE_setStmt = 6, RULE_messageStmt = 7, 
		RULE_errorStmt = 8, RULE_messageText = 9, RULE_outputStmt = 10, RULE_functionStmt = 11, 
		RULE_eos = 12, RULE_expression = 13, RULE_arithmeticExpression = 14, RULE_atom = 15, 
		RULE_function = 16, RULE_functionParameter = 17, RULE_functionParameterValue = 18, 
		RULE_objectIdentifier = 19, RULE_stringLiteral = 20, RULE_numberLiteral = 21, 
		RULE_boolLeteral = 22, RULE_noneLiteral = 23, RULE_jsonObj = 24, RULE_pair = 25, 
		RULE_predicate = 26, RULE_testExpression = 27, RULE_logicalOperator = 28, 
		RULE_relationalOperator = 29, RULE_operand = 30, RULE_unaryOperand = 31;
	public static readonly string[] ruleNames = {
		"program", "ruleStmt", "endRuleStmt", "exitStmt", "generalStatement", 
		"letStmt", "setStmt", "messageStmt", "errorStmt", "messageText", "outputStmt", 
		"functionStmt", "eos", "expression", "arithmeticExpression", "atom", "function", 
		"functionParameter", "functionParameterValue", "objectIdentifier", "stringLiteral", 
		"numberLiteral", "boolLeteral", "noneLiteral", "jsonObj", "pair", "predicate", 
		"testExpression", "logicalOperator", "relationalOperator", "operand", 
		"unaryOperand"
	};

	private static readonly string[] _LiteralNames = {
		null, "'end'", "'exit'", "':'", "','", "'true'", "'false'", "'.'", "'{'", 
		"'}'", "'rule'", "'when'", "'then'", "'message'", "'error'", "'output'", 
		"'let'", "'set'", "'partial'", "'='", null, null, null, null, "'and'", 
		"'or'", "'not'", "'>'", "'>='", "'<'", "'<='", "'=='", "'!='", "'contains'", 
		"'('", "')'", null, null, "'none'", null, "'+'", "'-'", "'*'", "'/'", 
		"'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "End", "Exit", "Colon", "Comma", "True", "False", "Dot", "OpenBrace", 
		"CloseBrace", "Rule", "When", "Then", "Message", "Error", "Output", "Let", 
		"Set", "Partial", "Assign", "WhiteSpaces", "LineTerminator", "MultiLineComment", 
		"SingleLineComment", "And", "Or", "Not", "GreaterThan", "GreaterThanEqual", 
		"LessThan", "LessThanEqual", "Equal", "NotEqual", "Contains", "OpenParen", 
		"CloseParen", "Number", "String", "None", "Identifier", "PlusOp", "MinusOp", 
		"TimesOp", "DivOp", "ModuloOp", "FunctionName"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SimpleflowParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SimpleflowParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SimpleflowParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SimpleflowParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	internal partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SimpleflowParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LetStmtContext[] letStmt() {
			return GetRuleContexts<LetStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetStmtContext letStmt(int i) {
			return GetRuleContext<LetStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleStmtContext[] ruleStmt() {
			return GetRuleContexts<RuleStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleStmtContext ruleStmt(int i) {
			return GetRuleContext<RuleStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralStatementContext[] generalStatement() {
			return GetRuleContexts<GeneralStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralStatementContext generalStatement(int i) {
			return GetRuleContext<GeneralStatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Let) {
				{
				{
				State = 64;
				letStmt();
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Exit) | (1L << Rule) | (1L << Message) | (1L << Error) | (1L << Output) | (1L << Set) | (1L << Partial) | (1L << FunctionName))) != 0)) {
				{
				State = 72;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Rule:
					{
					State = 70;
					ruleStmt();
					}
					break;
				case Exit:
				case Message:
				case Error:
				case Output:
				case Set:
				case Partial:
				case FunctionName:
					{
					State = 71;
					generalStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 77;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class RuleStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rule() { return GetToken(SimpleflowParser.Rule, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode When() { return GetToken(SimpleflowParser.When, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Then() { return GetToken(SimpleflowParser.Then, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageStmtContext[] messageStmt() {
			return GetRuleContexts<MessageStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageStmtContext messageStmt(int i) {
			return GetRuleContext<MessageStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorStmtContext[] errorStmt() {
			return GetRuleContexts<ErrorStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorStmtContext errorStmt(int i) {
			return GetRuleContext<ErrorStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputStmtContext[] outputStmt() {
			return GetRuleContexts<OutputStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputStmtContext outputStmt(int i) {
			return GetRuleContext<OutputStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetStmtContext[] setStmt() {
			return GetRuleContexts<SetStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetStmtContext setStmt(int i) {
			return GetRuleContext<SetStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionStmtContext[] functionStmt() {
			return GetRuleContexts<FunctionStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionStmtContext functionStmt(int i) {
			return GetRuleContext<FunctionStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExitStmtContext[] exitStmt() {
			return GetRuleContexts<ExitStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExitStmtContext exitStmt(int i) {
			return GetRuleContext<ExitStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndRuleStmtContext endRuleStmt() {
			return GetRuleContext<EndRuleStmtContext>(0);
		}
		public RuleStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterRuleStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitRuleStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleStmtContext ruleStmt() {
		RuleStmtContext _localctx = new RuleStmtContext(Context, State);
		EnterRule(_localctx, 2, RULE_ruleStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(Rule);
			State = 80;
			Match(When);
			State = 81;
			predicate(0);
			State = 82;
			Match(Then);
			State = 83;
			eos();
			State = 92;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 90;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Message:
						{
						State = 84;
						messageStmt();
						}
						break;
					case Error:
						{
						State = 85;
						errorStmt();
						}
						break;
					case Output:
						{
						State = 86;
						outputStmt();
						}
						break;
					case Set:
					case Partial:
						{
						State = 87;
						setStmt();
						}
						break;
					case FunctionName:
						{
						State = 88;
						functionStmt();
						}
						break;
					case Exit:
						{
						State = 89;
						exitStmt();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 94;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==End) {
				{
				State = 95;
				endRuleStmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class EndRuleStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(SimpleflowParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rule() { return GetToken(SimpleflowParser.Rule, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public EndRuleStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endRuleStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterEndRuleStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitEndRuleStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndRuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndRuleStmtContext endRuleStmt() {
		EndRuleStmtContext _localctx = new EndRuleStmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_endRuleStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(End);
			State = 99;
			Match(Rule);
			State = 100;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ExitStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exit() { return GetToken(SimpleflowParser.Exit, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ExitStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterExitStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitExitStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStmtContext exitStmt() {
		ExitStmtContext _localctx = new ExitStmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_exitStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			Match(Exit);
			State = 103;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class GeneralStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessageStmtContext messageStmt() {
			return GetRuleContext<MessageStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorStmtContext errorStmt() {
			return GetRuleContext<ErrorStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputStmtContext outputStmt() {
			return GetRuleContext<OutputStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetStmtContext setStmt() {
			return GetRuleContext<SetStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionStmtContext functionStmt() {
			return GetRuleContext<FunctionStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExitStmtContext exitStmt() {
			return GetRuleContext<ExitStmtContext>(0);
		}
		public GeneralStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generalStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterGeneralStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitGeneralStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneralStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneralStatementContext generalStatement() {
		GeneralStatementContext _localctx = new GeneralStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_generalStatement);
		try {
			State = 111;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Message:
				EnterOuterAlt(_localctx, 1);
				{
				State = 105;
				messageStmt();
				}
				break;
			case Error:
				EnterOuterAlt(_localctx, 2);
				{
				State = 106;
				errorStmt();
				}
				break;
			case Output:
				EnterOuterAlt(_localctx, 3);
				{
				State = 107;
				outputStmt();
				}
				break;
			case Set:
			case Partial:
				EnterOuterAlt(_localctx, 4);
				{
				State = 108;
				setStmt();
				}
				break;
			case FunctionName:
				EnterOuterAlt(_localctx, 5);
				{
				State = 109;
				functionStmt();
				}
				break;
			case Exit:
				EnterOuterAlt(_localctx, 6);
				{
				State = 110;
				exitStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class LetStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Let() { return GetToken(SimpleflowParser.Let, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SimpleflowParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(SimpleflowParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public LetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterLetStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitLetStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetStmtContext letStmt() {
		LetStmtContext _localctx = new LetStmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_letStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(Let);
			State = 114;
			Match(Identifier);
			State = 115;
			Match(Assign);
			State = 116;
			expression();
			State = 117;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class SetStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Set() { return GetToken(SimpleflowParser.Set, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SimpleflowParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(SimpleflowParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Partial() { return GetToken(SimpleflowParser.Partial, 0); }
		public SetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterSetStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitSetStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStmtContext setStmt() {
		SetStmtContext _localctx = new SetStmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_setStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Partial) {
				{
				State = 119;
				Match(Partial);
				}
			}

			State = 122;
			Match(Set);
			State = 123;
			Match(Identifier);
			State = 124;
			Match(Assign);
			State = 125;
			expression();
			State = 126;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class MessageStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Message() { return GetToken(SimpleflowParser.Message, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessageTextContext messageText() {
			return GetRuleContext<MessageTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public MessageStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterMessageStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitMessageStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageStmtContext messageStmt() {
		MessageStmtContext _localctx = new MessageStmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_messageStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(Message);
			State = 129;
			messageText();
			State = 130;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ErrorStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Error() { return GetToken(SimpleflowParser.Error, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessageTextContext messageText() {
			return GetRuleContext<MessageTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterErrorStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitErrorStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStmtContext errorStmt() {
		ErrorStmtContext _localctx = new ErrorStmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_errorStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			Match(Error);
			State = 133;
			messageText();
			State = 134;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class MessageTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(SimpleflowParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectIdentifierContext objectIdentifier() {
			return GetRuleContext<ObjectIdentifierContext>(0);
		}
		public MessageTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterMessageText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitMessageText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageTextContext messageText() {
		MessageTextContext _localctx = new MessageTextContext(Context, State);
		EnterRule(_localctx, 18, RULE_messageText);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case String:
				{
				State = 136;
				Match(String);
				}
				break;
			case Identifier:
				{
				State = 137;
				objectIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class OutputStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Output() { return GetToken(SimpleflowParser.Output, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectIdentifierContext objectIdentifier() {
			return GetRuleContext<ObjectIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public OutputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterOutputStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitOutputStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputStmtContext outputStmt() {
		OutputStmtContext _localctx = new OutputStmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_outputStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			Match(Output);
			State = 141;
			objectIdentifier();
			State = 142;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class FunctionStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public FunctionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterFunctionStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitFunctionStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStmtContext functionStmt() {
		FunctionStmtContext _localctx = new FunctionStmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_functionStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			function();
			State = 145;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class EosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SimpleflowParser.Eof, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterEos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitEos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 24, RULE_eos);
		try {
			State = 149;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 147;
				Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 148;
				if (!(this.lineTerminatorAhead())) throw new FailedPredicateException(this, "this.lineTerminatorAhead()");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolLeteralContext boolLeteral() {
			return GetRuleContext<BoolLeteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoneLiteralContext noneLiteral() {
			return GetRuleContext<NoneLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonObjContext jsonObj() {
			return GetRuleContext<JsonObjContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectIdentifierContext objectIdentifier() {
			return GetRuleContext<ObjectIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext arithmeticExpression() {
			return GetRuleContext<ArithmeticExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_expression);
		try {
			State = 158;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 151;
				boolLeteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 152;
				noneLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 153;
				function();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 154;
				jsonObj();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 155;
				objectIdentifier();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 156;
				arithmeticExpression(0);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 157;
				stringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ArithmeticExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(SimpleflowParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext[] arithmeticExpression() {
			return GetRuleContexts<ArithmeticExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext arithmeticExpression(int i) {
			return GetRuleContext<ArithmeticExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(SimpleflowParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TimesOp() { return GetToken(SimpleflowParser.TimesOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivOp() { return GetToken(SimpleflowParser.DivOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModuloOp() { return GetToken(SimpleflowParser.ModuloOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusOp() { return GetToken(SimpleflowParser.PlusOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusOp() { return GetToken(SimpleflowParser.MinusOp, 0); }
		public ArithmeticExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterArithmeticExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitArithmeticExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticExpressionContext arithmeticExpression() {
		return arithmeticExpression(0);
	}

	private ArithmeticExpressionContext arithmeticExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArithmeticExpressionContext _localctx = new ArithmeticExpressionContext(Context, _parentState);
		ArithmeticExpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_arithmeticExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 161;
				Match(OpenParen);
				State = 162;
				arithmeticExpression(0);
				State = 163;
				Match(CloseParen);
				}
				break;
			case 2:
				{
				State = 165;
				atom();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 176;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 174;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
					case 1:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 168;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 169;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TimesOp) | (1L << DivOp) | (1L << ModuloOp))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 170;
						arithmeticExpression(5);
						}
						break;
					case 2:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 171;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 172;
						_la = TokenStream.LA(1);
						if ( !(_la==PlusOp || _la==MinusOp) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 173;
						arithmeticExpression(4);
						}
						break;
					}
					} 
				}
				State = 178;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	internal partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(SimpleflowParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectIdentifierContext objectIdentifier() {
			return GetRuleContext<ObjectIdentifierContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 30, RULE_atom);
		try {
			State = 182;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 180;
				Match(Number);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 181;
				objectIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FunctionName() { return GetToken(SimpleflowParser.FunctionName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(SimpleflowParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(SimpleflowParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SimpleflowParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SimpleflowParser.Comma, i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 32, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			Match(FunctionName);
			State = 185;
			Match(OpenParen);
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 186;
				functionParameter();
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 187;
					Match(Comma);
					State = 188;
					functionParameter();
					}
					}
					State = 193;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 196;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class FunctionParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SimpleflowParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(SimpleflowParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterValueContext functionParameterValue() {
			return GetRuleContext<FunctionParameterValueContext>(0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterFunctionParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitFunctionParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 34, RULE_functionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			Match(Identifier);
			State = 199;
			Match(Colon);
			State = 200;
			functionParameterValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class FunctionParameterValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolLeteralContext boolLeteral() {
			return GetRuleContext<BoolLeteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoneLiteralContext noneLiteral() {
			return GetRuleContext<NoneLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectIdentifierContext objectIdentifier() {
			return GetRuleContext<ObjectIdentifierContext>(0);
		}
		public FunctionParameterValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameterValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterFunctionParameterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitFunctionParameterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameterValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterValueContext functionParameterValue() {
		FunctionParameterValueContext _localctx = new FunctionParameterValueContext(Context, State);
		EnterRule(_localctx, 36, RULE_functionParameterValue);
		try {
			State = 207;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Number:
				EnterOuterAlt(_localctx, 1);
				{
				State = 202;
				numberLiteral();
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 203;
				stringLiteral();
				}
				break;
			case True:
			case False:
				EnterOuterAlt(_localctx, 3);
				{
				State = 204;
				boolLeteral();
				}
				break;
			case None:
				EnterOuterAlt(_localctx, 4);
				{
				State = 205;
				noneLiteral();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 5);
				{
				State = 206;
				objectIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ObjectIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(SimpleflowParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(SimpleflowParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(SimpleflowParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(SimpleflowParser.Dot, i);
		}
		public ObjectIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterObjectIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitObjectIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectIdentifierContext objectIdentifier() {
		ObjectIdentifierContext _localctx = new ObjectIdentifierContext(Context, State);
		EnterRule(_localctx, 38, RULE_objectIdentifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(Identifier);
			State = 214;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 210;
					Match(Dot);
					State = 211;
					Match(Identifier);
					}
					} 
				}
				State = 216;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(SimpleflowParser.String, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 40, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			Match(String);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class NumberLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(SimpleflowParser.Number, 0); }
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(Context, State);
		EnterRule(_localctx, 42, RULE_numberLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			Match(Number);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class BoolLeteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(SimpleflowParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(SimpleflowParser.False, 0); }
		public BoolLeteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolLeteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterBoolLeteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitBoolLeteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLeteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolLeteralContext boolLeteral() {
		BoolLeteralContext _localctx = new BoolLeteralContext(Context, State);
		EnterRule(_localctx, 44, RULE_boolLeteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			_la = TokenStream.LA(1);
			if ( !(_la==True || _la==False) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class NoneLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode None() { return GetToken(SimpleflowParser.None, 0); }
		public NoneLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noneLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterNoneLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitNoneLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoneLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoneLiteralContext noneLiteral() {
		NoneLiteralContext _localctx = new NoneLiteralContext(Context, State);
		EnterRule(_localctx, 46, RULE_noneLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			Match(None);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class JsonObjContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(SimpleflowParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(SimpleflowParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SimpleflowParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SimpleflowParser.Comma, i);
		}
		public JsonObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonObj; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterJsonObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitJsonObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonObj(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonObjContext jsonObj() {
		JsonObjContext _localctx = new JsonObjContext(Context, State);
		EnterRule(_localctx, 48, RULE_jsonObj);
		int _la;
		try {
			State = 238;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 225;
				Match(OpenBrace);
				State = 226;
				pair();
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 227;
					Match(Comma);
					State = 228;
					pair();
					}
					}
					State = 233;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 234;
				Match(CloseBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 236;
				Match(OpenBrace);
				State = 237;
				Match(CloseBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class PairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SimpleflowParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(SimpleflowParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 50, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			Match(Identifier);
			State = 241;
			Match(Colon);
			State = 242;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class PredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TestExpressionContext testExpression() {
			return GetRuleContext<TestExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperandContext unaryOperand() {
			return GetRuleContext<UnaryOperandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(SimpleflowParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(SimpleflowParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(SimpleflowParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOperatorContext logicalOperator() {
			return GetRuleContext<LogicalOperatorContext>(0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PredicateContext _localctx = new PredicateContext(Context, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_predicate, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 245;
				testExpression();
				}
				break;
			case 2:
				{
				State = 246;
				unaryOperand();
				}
				break;
			case 3:
				{
				State = 247;
				Match(OpenParen);
				State = 248;
				predicate(0);
				State = 249;
				Match(CloseParen);
				}
				break;
			case 4:
				{
				State = 251;
				Match(Not);
				State = 252;
				predicate(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 261;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PredicateContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_predicate);
					State = 255;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 256;
					logicalOperator();
					State = 257;
					predicate(4);
					}
					} 
				}
				State = 263;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	internal partial class TestExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext[] operand() {
			return GetRuleContexts<OperandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext operand(int i) {
			return GetRuleContext<OperandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalOperatorContext relationalOperator() {
			return GetRuleContext<RelationalOperatorContext>(0);
		}
		public TestExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterTestExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitTestExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestExpressionContext testExpression() {
		TestExpressionContext _localctx = new TestExpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_testExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			operand();
			State = 265;
			relationalOperator();
			State = 266;
			operand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class LogicalOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(SimpleflowParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(SimpleflowParser.Or, 0); }
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterLogicalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitLogicalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOperatorContext logicalOperator() {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(Context, State);
		EnterRule(_localctx, 56, RULE_logicalOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			_la = TokenStream.LA(1);
			if ( !(_la==And || _la==Or) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class RelationalOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThan() { return GetToken(SimpleflowParser.GreaterThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(SimpleflowParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanEqual() { return GetToken(SimpleflowParser.GreaterThanEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanEqual() { return GetToken(SimpleflowParser.LessThanEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(SimpleflowParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual() { return GetToken(SimpleflowParser.NotEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Contains() { return GetToken(SimpleflowParser.Contains, 0); }
		public RelationalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterRelationalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitRelationalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalOperatorContext relationalOperator() {
		RelationalOperatorContext _localctx = new RelationalOperatorContext(Context, State);
		EnterRule(_localctx, 58, RULE_relationalOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GreaterThan) | (1L << GreaterThanEqual) | (1L << LessThan) | (1L << LessThanEqual) | (1L << Equal) | (1L << NotEqual) | (1L << Contains))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class OperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectIdentifierContext objectIdentifier() {
			return GetRuleContext<ObjectIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolLeteralContext boolLeteral() {
			return GetRuleContext<BoolLeteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoneLiteralContext noneLiteral() {
			return GetRuleContext<NoneLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(Context, State);
		EnterRule(_localctx, 60, RULE_operand);
		try {
			State = 278;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 272;
				objectIdentifier();
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 273;
				stringLiteral();
				}
				break;
			case Number:
				EnterOuterAlt(_localctx, 3);
				{
				State = 274;
				numberLiteral();
				}
				break;
			case True:
			case False:
				EnterOuterAlt(_localctx, 4);
				{
				State = 275;
				boolLeteral();
				}
				break;
			case None:
				EnterOuterAlt(_localctx, 5);
				{
				State = 276;
				noneLiteral();
				}
				break;
			case FunctionName:
				EnterOuterAlt(_localctx, 6);
				{
				State = 277;
				function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class UnaryOperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolLeteralContext boolLeteral() {
			return GetRuleContext<BoolLeteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectIdentifierContext objectIdentifier() {
			return GetRuleContext<ObjectIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public UnaryOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterUnaryOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitUnaryOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperandContext unaryOperand() {
		UnaryOperandContext _localctx = new UnaryOperandContext(Context, State);
		EnterRule(_localctx, 62, RULE_unaryOperand);
		try {
			State = 283;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case True:
			case False:
				EnterOuterAlt(_localctx, 1);
				{
				State = 280;
				boolLeteral();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 281;
				objectIdentifier();
				}
				break;
			case FunctionName:
				EnterOuterAlt(_localctx, 3);
				{
				State = 282;
				function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return eos_sempred((EosContext)_localctx, predIndex);
		case 14: return arithmeticExpression_sempred((ArithmeticExpressionContext)_localctx, predIndex);
		case 26: return predicate_sempred((PredicateContext)_localctx, predIndex);
		}
		return true;
	}
	private bool eos_sempred(EosContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return this.lineTerminatorAhead();
		}
		return true;
	}
	private bool arithmeticExpression_sempred(ArithmeticExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		}
		return true;
	}
	private bool predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,45,286,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,1,0,5,0,66,8,0,10,0,12,0,69,9,0,1,0,1,0,
		5,0,73,8,0,10,0,12,0,76,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,5,1,91,8,1,10,1,12,1,94,9,1,1,1,3,1,97,8,1,1,2,1,2,1,2,1,2,1,
		3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,3,4,112,8,4,1,5,1,5,1,5,1,5,1,5,1,5,
		1,6,3,6,121,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,
		8,1,9,1,9,3,9,139,8,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,3,12,
		150,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,159,8,13,1,14,1,14,1,
		14,1,14,1,14,1,14,3,14,167,8,14,1,14,1,14,1,14,1,14,1,14,1,14,5,14,175,
		8,14,10,14,12,14,178,9,14,1,15,1,15,1,15,3,15,183,8,15,1,16,1,16,1,16,
		1,16,1,16,5,16,190,8,16,10,16,12,16,193,9,16,3,16,195,8,16,1,16,1,16,1,
		17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,3,18,208,8,18,1,19,1,19,1,19,
		5,19,213,8,19,10,19,12,19,216,9,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,
		1,23,1,24,1,24,1,24,1,24,5,24,230,8,24,10,24,12,24,233,9,24,1,24,1,24,
		1,24,1,24,3,24,239,8,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,
		26,1,26,1,26,1,26,3,26,254,8,26,1,26,1,26,1,26,1,26,5,26,260,8,26,10,26,
		12,26,263,9,26,1,27,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,30,
		1,30,1,30,1,30,3,30,279,8,30,1,31,1,31,1,31,3,31,284,8,31,1,31,0,2,28,
		52,32,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
		46,48,50,52,54,56,58,60,62,0,5,1,0,42,44,1,0,40,41,1,0,5,6,1,0,24,25,1,
		0,27,33,302,0,67,1,0,0,0,2,79,1,0,0,0,4,98,1,0,0,0,6,102,1,0,0,0,8,111,
		1,0,0,0,10,113,1,0,0,0,12,120,1,0,0,0,14,128,1,0,0,0,16,132,1,0,0,0,18,
		138,1,0,0,0,20,140,1,0,0,0,22,144,1,0,0,0,24,149,1,0,0,0,26,158,1,0,0,
		0,28,166,1,0,0,0,30,182,1,0,0,0,32,184,1,0,0,0,34,198,1,0,0,0,36,207,1,
		0,0,0,38,209,1,0,0,0,40,217,1,0,0,0,42,219,1,0,0,0,44,221,1,0,0,0,46,223,
		1,0,0,0,48,238,1,0,0,0,50,240,1,0,0,0,52,253,1,0,0,0,54,264,1,0,0,0,56,
		268,1,0,0,0,58,270,1,0,0,0,60,278,1,0,0,0,62,283,1,0,0,0,64,66,3,10,5,
		0,65,64,1,0,0,0,66,69,1,0,0,0,67,65,1,0,0,0,67,68,1,0,0,0,68,74,1,0,0,
		0,69,67,1,0,0,0,70,73,3,2,1,0,71,73,3,8,4,0,72,70,1,0,0,0,72,71,1,0,0,
		0,73,76,1,0,0,0,74,72,1,0,0,0,74,75,1,0,0,0,75,77,1,0,0,0,76,74,1,0,0,
		0,77,78,5,0,0,1,78,1,1,0,0,0,79,80,5,10,0,0,80,81,5,11,0,0,81,82,3,52,
		26,0,82,83,5,12,0,0,83,92,3,24,12,0,84,91,3,14,7,0,85,91,3,16,8,0,86,91,
		3,20,10,0,87,91,3,12,6,0,88,91,3,22,11,0,89,91,3,6,3,0,90,84,1,0,0,0,90,
		85,1,0,0,0,90,86,1,0,0,0,90,87,1,0,0,0,90,88,1,0,0,0,90,89,1,0,0,0,91,
		94,1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,96,1,0,0,0,94,92,1,0,0,0,95,
		97,3,4,2,0,96,95,1,0,0,0,96,97,1,0,0,0,97,3,1,0,0,0,98,99,5,1,0,0,99,100,
		5,10,0,0,100,101,3,24,12,0,101,5,1,0,0,0,102,103,5,2,0,0,103,104,3,24,
		12,0,104,7,1,0,0,0,105,112,3,14,7,0,106,112,3,16,8,0,107,112,3,20,10,0,
		108,112,3,12,6,0,109,112,3,22,11,0,110,112,3,6,3,0,111,105,1,0,0,0,111,
		106,1,0,0,0,111,107,1,0,0,0,111,108,1,0,0,0,111,109,1,0,0,0,111,110,1,
		0,0,0,112,9,1,0,0,0,113,114,5,16,0,0,114,115,5,39,0,0,115,116,5,19,0,0,
		116,117,3,26,13,0,117,118,3,24,12,0,118,11,1,0,0,0,119,121,5,18,0,0,120,
		119,1,0,0,0,120,121,1,0,0,0,121,122,1,0,0,0,122,123,5,17,0,0,123,124,5,
		39,0,0,124,125,5,19,0,0,125,126,3,26,13,0,126,127,3,24,12,0,127,13,1,0,
		0,0,128,129,5,13,0,0,129,130,3,18,9,0,130,131,3,24,12,0,131,15,1,0,0,0,
		132,133,5,14,0,0,133,134,3,18,9,0,134,135,3,24,12,0,135,17,1,0,0,0,136,
		139,5,37,0,0,137,139,3,38,19,0,138,136,1,0,0,0,138,137,1,0,0,0,139,19,
		1,0,0,0,140,141,5,15,0,0,141,142,3,38,19,0,142,143,3,24,12,0,143,21,1,
		0,0,0,144,145,3,32,16,0,145,146,3,24,12,0,146,23,1,0,0,0,147,150,5,0,0,
		1,148,150,4,12,0,0,149,147,1,0,0,0,149,148,1,0,0,0,150,25,1,0,0,0,151,
		159,3,44,22,0,152,159,3,46,23,0,153,159,3,32,16,0,154,159,3,48,24,0,155,
		159,3,38,19,0,156,159,3,28,14,0,157,159,3,40,20,0,158,151,1,0,0,0,158,
		152,1,0,0,0,158,153,1,0,0,0,158,154,1,0,0,0,158,155,1,0,0,0,158,156,1,
		0,0,0,158,157,1,0,0,0,159,27,1,0,0,0,160,161,6,14,-1,0,161,162,5,34,0,
		0,162,163,3,28,14,0,163,164,5,35,0,0,164,167,1,0,0,0,165,167,3,30,15,0,
		166,160,1,0,0,0,166,165,1,0,0,0,167,176,1,0,0,0,168,169,10,4,0,0,169,170,
		7,0,0,0,170,175,3,28,14,5,171,172,10,3,0,0,172,173,7,1,0,0,173,175,3,28,
		14,4,174,168,1,0,0,0,174,171,1,0,0,0,175,178,1,0,0,0,176,174,1,0,0,0,176,
		177,1,0,0,0,177,29,1,0,0,0,178,176,1,0,0,0,179,183,1,0,0,0,180,183,5,36,
		0,0,181,183,3,38,19,0,182,179,1,0,0,0,182,180,1,0,0,0,182,181,1,0,0,0,
		183,31,1,0,0,0,184,185,5,45,0,0,185,194,5,34,0,0,186,191,3,34,17,0,187,
		188,5,4,0,0,188,190,3,34,17,0,189,187,1,0,0,0,190,193,1,0,0,0,191,189,
		1,0,0,0,191,192,1,0,0,0,192,195,1,0,0,0,193,191,1,0,0,0,194,186,1,0,0,
		0,194,195,1,0,0,0,195,196,1,0,0,0,196,197,5,35,0,0,197,33,1,0,0,0,198,
		199,5,39,0,0,199,200,5,3,0,0,200,201,3,36,18,0,201,35,1,0,0,0,202,208,
		3,42,21,0,203,208,3,40,20,0,204,208,3,44,22,0,205,208,3,46,23,0,206,208,
		3,38,19,0,207,202,1,0,0,0,207,203,1,0,0,0,207,204,1,0,0,0,207,205,1,0,
		0,0,207,206,1,0,0,0,208,37,1,0,0,0,209,214,5,39,0,0,210,211,5,7,0,0,211,
		213,5,39,0,0,212,210,1,0,0,0,213,216,1,0,0,0,214,212,1,0,0,0,214,215,1,
		0,0,0,215,39,1,0,0,0,216,214,1,0,0,0,217,218,5,37,0,0,218,41,1,0,0,0,219,
		220,5,36,0,0,220,43,1,0,0,0,221,222,7,2,0,0,222,45,1,0,0,0,223,224,5,38,
		0,0,224,47,1,0,0,0,225,226,5,8,0,0,226,231,3,50,25,0,227,228,5,4,0,0,228,
		230,3,50,25,0,229,227,1,0,0,0,230,233,1,0,0,0,231,229,1,0,0,0,231,232,
		1,0,0,0,232,234,1,0,0,0,233,231,1,0,0,0,234,235,5,9,0,0,235,239,1,0,0,
		0,236,237,5,8,0,0,237,239,5,9,0,0,238,225,1,0,0,0,238,236,1,0,0,0,239,
		49,1,0,0,0,240,241,5,39,0,0,241,242,5,3,0,0,242,243,3,26,13,0,243,51,1,
		0,0,0,244,245,6,26,-1,0,245,254,3,54,27,0,246,254,3,62,31,0,247,248,5,
		34,0,0,248,249,3,52,26,0,249,250,5,35,0,0,250,254,1,0,0,0,251,252,5,26,
		0,0,252,254,3,52,26,1,253,244,1,0,0,0,253,246,1,0,0,0,253,247,1,0,0,0,
		253,251,1,0,0,0,254,261,1,0,0,0,255,256,10,3,0,0,256,257,3,56,28,0,257,
		258,3,52,26,4,258,260,1,0,0,0,259,255,1,0,0,0,260,263,1,0,0,0,261,259,
		1,0,0,0,261,262,1,0,0,0,262,53,1,0,0,0,263,261,1,0,0,0,264,265,3,60,30,
		0,265,266,3,58,29,0,266,267,3,60,30,0,267,55,1,0,0,0,268,269,7,3,0,0,269,
		57,1,0,0,0,270,271,7,4,0,0,271,59,1,0,0,0,272,279,3,38,19,0,273,279,3,
		40,20,0,274,279,3,42,21,0,275,279,3,44,22,0,276,279,3,46,23,0,277,279,
		3,32,16,0,278,272,1,0,0,0,278,273,1,0,0,0,278,274,1,0,0,0,278,275,1,0,
		0,0,278,276,1,0,0,0,278,277,1,0,0,0,279,61,1,0,0,0,280,284,3,44,22,0,281,
		284,3,38,19,0,282,284,3,32,16,0,283,280,1,0,0,0,283,281,1,0,0,0,283,282,
		1,0,0,0,284,63,1,0,0,0,25,67,72,74,90,92,96,111,120,138,149,158,166,174,
		176,182,191,194,207,214,231,238,253,261,278,283
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Simpleflow.Parser
