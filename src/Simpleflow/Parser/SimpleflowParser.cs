//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Navtech\Opensource\Simpleflow\src\Simpleflow\Parser\Grammar\Simpleflow.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Simpleflow.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
internal partial class SimpleflowParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		Rule=10, When=11, Then=12, Message=13, Error=14, Output=15, Let=16, Set=17, 
		Assign=18, LineBreak=19, Skip_=20, And=21, Or=22, Not=23, GreaterThan=24, 
		GreaterThanEqual=25, LessThan=26, LessThanEqual=27, Equal=28, NotEqual=29, 
		Contains=30, OpenParen=31, CloseParen=32, Number=33, String=34, None=35, 
		Identifier=36, PlusOp=37, MinusOp=38, TimesOp=39, DivOp=40, FunctionName=41;
	public const int
		RULE_program = 0, RULE_ruleStmt = 1, RULE_endRuleStmt = 2, RULE_exitStmt = 3, 
		RULE_generalStatement = 4, RULE_letStmt = 5, RULE_setStmt = 6, RULE_messageStmt = 7, 
		RULE_errorStmt = 8, RULE_messageText = 9, RULE_outputStmt = 10, RULE_functionStmt = 11, 
		RULE_expression = 12, RULE_predicate = 13, RULE_testExpression = 14, RULE_logicalOperator = 15, 
		RULE_relationalOperator = 16, RULE_operand = 17, RULE_unaryOperand = 18, 
		RULE_objectIdentifier = 19, RULE_stringLiteral = 20, RULE_numberLiteral = 21, 
		RULE_boolLeteral = 22, RULE_noneLiteral = 23, RULE_arithmeticExpression = 24, 
		RULE_atom = 25, RULE_function = 26, RULE_functionParameter = 27, RULE_functionParameterValue = 28, 
		RULE_jsonObj = 29, RULE_pair = 30, RULE_value = 31;
	public static readonly string[] ruleNames = {
		"program", "ruleStmt", "endRuleStmt", "exitStmt", "generalStatement", 
		"letStmt", "setStmt", "messageStmt", "errorStmt", "messageText", "outputStmt", 
		"functionStmt", "expression", "predicate", "testExpression", "logicalOperator", 
		"relationalOperator", "operand", "unaryOperand", "objectIdentifier", "stringLiteral", 
		"numberLiteral", "boolLeteral", "noneLiteral", "arithmeticExpression", 
		"atom", "function", "functionParameter", "functionParameterValue", "jsonObj", 
		"pair", "value"
	};

	private static readonly string[] _LiteralNames = {
		null, "'end'", "'exit'", "'.'", "'true'", "'false'", "','", "':'", "'{'", 
		"'}'", "'rule'", "'when'", "'then'", "'message'", "'error'", "'output'", 
		"'let'", "'set'", "'='", null, null, "'and'", "'or'", "'not'", "'>'", 
		"'>='", "'<'", "'<='", "'=='", "'!='", "'contains'", "'('", "')'", null, 
		null, "'none'", null, "'+'", "'-'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "Rule", "When", 
		"Then", "Message", "Error", "Output", "Let", "Set", "Assign", "LineBreak", 
		"Skip_", "And", "Or", "Not", "GreaterThan", "GreaterThanEqual", "LessThan", 
		"LessThanEqual", "Equal", "NotEqual", "Contains", "OpenParen", "CloseParen", 
		"Number", "String", "None", "Identifier", "PlusOp", "MinusOp", "TimesOp", 
		"DivOp", "FunctionName"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Simpleflow.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SimpleflowParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SimpleflowParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SimpleflowParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	internal partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SimpleflowParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LineBreak() { return GetTokens(SimpleflowParser.LineBreak); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineBreak(int i) {
			return GetToken(SimpleflowParser.LineBreak, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetStmtContext[] letStmt() {
			return GetRuleContexts<LetStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetStmtContext letStmt(int i) {
			return GetRuleContext<LetStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleStmtContext[] ruleStmt() {
			return GetRuleContexts<RuleStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleStmtContext ruleStmt(int i) {
			return GetRuleContext<RuleStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralStatementContext[] generalStatement() {
			return GetRuleContexts<GeneralStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralStatementContext generalStatement(int i) {
			return GetRuleContext<GeneralStatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LineBreak) {
				{
				{
				State = 64;
				Match(LineBreak);
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Let) {
				{
				{
				State = 70;
				letStmt();
				}
				}
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << Rule) | (1L << Message) | (1L << Error) | (1L << Output) | (1L << Set) | (1L << FunctionName))) != 0)) {
				{
				State = 78;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Rule:
					{
					State = 76;
					ruleStmt();
					}
					break;
				case T__1:
				case Message:
				case Error:
				case Output:
				case Set:
				case FunctionName:
					{
					State = 77;
					generalStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 83;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class RuleStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rule() { return GetToken(SimpleflowParser.Rule, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode When() { return GetToken(SimpleflowParser.When, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Then() { return GetToken(SimpleflowParser.Then, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineBreak() { return GetToken(SimpleflowParser.LineBreak, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessageStmtContext[] messageStmt() {
			return GetRuleContexts<MessageStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageStmtContext messageStmt(int i) {
			return GetRuleContext<MessageStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorStmtContext[] errorStmt() {
			return GetRuleContexts<ErrorStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorStmtContext errorStmt(int i) {
			return GetRuleContext<ErrorStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputStmtContext[] outputStmt() {
			return GetRuleContexts<OutputStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputStmtContext outputStmt(int i) {
			return GetRuleContext<OutputStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetStmtContext[] setStmt() {
			return GetRuleContexts<SetStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetStmtContext setStmt(int i) {
			return GetRuleContext<SetStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionStmtContext[] functionStmt() {
			return GetRuleContexts<FunctionStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionStmtContext functionStmt(int i) {
			return GetRuleContext<FunctionStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExitStmtContext[] exitStmt() {
			return GetRuleContexts<ExitStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExitStmtContext exitStmt(int i) {
			return GetRuleContext<ExitStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndRuleStmtContext endRuleStmt() {
			return GetRuleContext<EndRuleStmtContext>(0);
		}
		public RuleStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterRuleStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitRuleStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleStmtContext ruleStmt() {
		RuleStmtContext _localctx = new RuleStmtContext(Context, State);
		EnterRule(_localctx, 2, RULE_ruleStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			Match(Rule);
			State = 86;
			Match(When);
			State = 87;
			predicate(0);
			State = 88;
			Match(Then);
			State = 89;
			Match(LineBreak);
			State = 98;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 96;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Message:
						{
						State = 90;
						messageStmt();
						}
						break;
					case Error:
						{
						State = 91;
						errorStmt();
						}
						break;
					case Output:
						{
						State = 92;
						outputStmt();
						}
						break;
					case Set:
						{
						State = 93;
						setStmt();
						}
						break;
					case FunctionName:
						{
						State = 94;
						functionStmt();
						}
						break;
					case T__1:
						{
						State = 95;
						exitStmt();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 100;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 101;
				endRuleStmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class EndRuleStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rule() { return GetToken(SimpleflowParser.Rule, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineBreak() { return GetToken(SimpleflowParser.LineBreak, 0); }
		public EndRuleStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endRuleStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterEndRuleStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitEndRuleStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndRuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndRuleStmtContext endRuleStmt() {
		EndRuleStmtContext _localctx = new EndRuleStmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_endRuleStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(T__0);
			State = 105;
			Match(Rule);
			State = 106;
			Match(LineBreak);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ExitStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineBreak() { return GetToken(SimpleflowParser.LineBreak, 0); }
		public ExitStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterExitStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitExitStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStmtContext exitStmt() {
		ExitStmtContext _localctx = new ExitStmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_exitStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			Match(T__1);
			State = 109;
			Match(LineBreak);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class GeneralStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessageStmtContext messageStmt() {
			return GetRuleContext<MessageStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorStmtContext errorStmt() {
			return GetRuleContext<ErrorStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputStmtContext outputStmt() {
			return GetRuleContext<OutputStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetStmtContext setStmt() {
			return GetRuleContext<SetStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionStmtContext functionStmt() {
			return GetRuleContext<FunctionStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExitStmtContext exitStmt() {
			return GetRuleContext<ExitStmtContext>(0);
		}
		public GeneralStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generalStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterGeneralStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitGeneralStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneralStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneralStatementContext generalStatement() {
		GeneralStatementContext _localctx = new GeneralStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_generalStatement);
		try {
			State = 117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Message:
				EnterOuterAlt(_localctx, 1);
				{
				State = 111;
				messageStmt();
				}
				break;
			case Error:
				EnterOuterAlt(_localctx, 2);
				{
				State = 112;
				errorStmt();
				}
				break;
			case Output:
				EnterOuterAlt(_localctx, 3);
				{
				State = 113;
				outputStmt();
				}
				break;
			case Set:
				EnterOuterAlt(_localctx, 4);
				{
				State = 114;
				setStmt();
				}
				break;
			case FunctionName:
				EnterOuterAlt(_localctx, 5);
				{
				State = 115;
				functionStmt();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 6);
				{
				State = 116;
				exitStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class LetStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Let() { return GetToken(SimpleflowParser.Let, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SimpleflowParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(SimpleflowParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineBreak() { return GetToken(SimpleflowParser.LineBreak, 0); }
		public LetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterLetStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitLetStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetStmtContext letStmt() {
		LetStmtContext _localctx = new LetStmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_letStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(Let);
			State = 120;
			Match(Identifier);
			State = 121;
			Match(Assign);
			State = 122;
			expression();
			State = 123;
			Match(LineBreak);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class SetStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Set() { return GetToken(SimpleflowParser.Set, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SimpleflowParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(SimpleflowParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineBreak() { return GetToken(SimpleflowParser.LineBreak, 0); }
		public SetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterSetStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitSetStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStmtContext setStmt() {
		SetStmtContext _localctx = new SetStmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_setStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			Match(Set);
			State = 126;
			Match(Identifier);
			State = 127;
			Match(Assign);
			State = 128;
			expression();
			State = 129;
			Match(LineBreak);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class MessageStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Message() { return GetToken(SimpleflowParser.Message, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessageTextContext messageText() {
			return GetRuleContext<MessageTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineBreak() { return GetToken(SimpleflowParser.LineBreak, 0); }
		public MessageStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterMessageStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitMessageStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageStmtContext messageStmt() {
		MessageStmtContext _localctx = new MessageStmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_messageStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			Match(Message);
			State = 132;
			messageText();
			State = 133;
			Match(LineBreak);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ErrorStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Error() { return GetToken(SimpleflowParser.Error, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessageTextContext messageText() {
			return GetRuleContext<MessageTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineBreak() { return GetToken(SimpleflowParser.LineBreak, 0); }
		public ErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterErrorStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitErrorStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStmtContext errorStmt() {
		ErrorStmtContext _localctx = new ErrorStmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_errorStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(Error);
			State = 136;
			messageText();
			State = 137;
			Match(LineBreak);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class MessageTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(SimpleflowParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectIdentifierContext objectIdentifier() {
			return GetRuleContext<ObjectIdentifierContext>(0);
		}
		public MessageTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterMessageText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitMessageText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageTextContext messageText() {
		MessageTextContext _localctx = new MessageTextContext(Context, State);
		EnterRule(_localctx, 18, RULE_messageText);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case String:
				{
				State = 139;
				Match(String);
				}
				break;
			case Identifier:
				{
				State = 140;
				objectIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class OutputStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Output() { return GetToken(SimpleflowParser.Output, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectIdentifierContext objectIdentifier() {
			return GetRuleContext<ObjectIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineBreak() { return GetToken(SimpleflowParser.LineBreak, 0); }
		public OutputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterOutputStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitOutputStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputStmtContext outputStmt() {
		OutputStmtContext _localctx = new OutputStmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_outputStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			Match(Output);
			State = 144;
			objectIdentifier();
			State = 145;
			Match(LineBreak);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class FunctionStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineBreak() { return GetToken(SimpleflowParser.LineBreak, 0); }
		public FunctionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterFunctionStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitFunctionStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStmtContext functionStmt() {
		FunctionStmtContext _localctx = new FunctionStmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_functionStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			function();
			State = 148;
			Match(LineBreak);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolLeteralContext boolLeteral() {
			return GetRuleContext<BoolLeteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoneLiteralContext noneLiteral() {
			return GetRuleContext<NoneLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonObjContext jsonObj() {
			return GetRuleContext<JsonObjContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext arithmeticExpression() {
			return GetRuleContext<ArithmeticExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_expression);
		try {
			State = 156;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 150;
				boolLeteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 151;
				noneLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 152;
				function();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 153;
				jsonObj();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 154;
				arithmeticExpression(0);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 155;
				stringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class PredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TestExpressionContext testExpression() {
			return GetRuleContext<TestExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperandContext unaryOperand() {
			return GetRuleContext<UnaryOperandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(SimpleflowParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(SimpleflowParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(SimpleflowParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOperatorContext logicalOperator() {
			return GetRuleContext<LogicalOperatorContext>(0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PredicateContext _localctx = new PredicateContext(Context, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_predicate, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 159;
				testExpression();
				}
				break;
			case 2:
				{
				State = 160;
				unaryOperand();
				}
				break;
			case 3:
				{
				State = 161;
				Match(OpenParen);
				State = 162;
				predicate(0);
				State = 163;
				Match(CloseParen);
				}
				break;
			case 4:
				{
				State = 165;
				Match(Not);
				State = 166;
				predicate(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 175;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PredicateContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_predicate);
					State = 169;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 170;
					logicalOperator();
					State = 171;
					predicate(4);
					}
					} 
				}
				State = 177;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	internal partial class TestExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext[] operand() {
			return GetRuleContexts<OperandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext operand(int i) {
			return GetRuleContext<OperandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalOperatorContext relationalOperator() {
			return GetRuleContext<RelationalOperatorContext>(0);
		}
		public TestExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterTestExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitTestExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestExpressionContext testExpression() {
		TestExpressionContext _localctx = new TestExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_testExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			operand();
			State = 179;
			relationalOperator();
			State = 180;
			operand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class LogicalOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(SimpleflowParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(SimpleflowParser.Or, 0); }
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterLogicalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitLogicalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOperatorContext logicalOperator() {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(Context, State);
		EnterRule(_localctx, 30, RULE_logicalOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			_la = TokenStream.LA(1);
			if ( !(_la==And || _la==Or) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class RelationalOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThan() { return GetToken(SimpleflowParser.GreaterThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(SimpleflowParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanEqual() { return GetToken(SimpleflowParser.GreaterThanEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanEqual() { return GetToken(SimpleflowParser.LessThanEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(SimpleflowParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual() { return GetToken(SimpleflowParser.NotEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Contains() { return GetToken(SimpleflowParser.Contains, 0); }
		public RelationalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterRelationalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitRelationalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalOperatorContext relationalOperator() {
		RelationalOperatorContext _localctx = new RelationalOperatorContext(Context, State);
		EnterRule(_localctx, 32, RULE_relationalOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GreaterThan) | (1L << GreaterThanEqual) | (1L << LessThan) | (1L << LessThanEqual) | (1L << Equal) | (1L << NotEqual) | (1L << Contains))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class OperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectIdentifierContext objectIdentifier() {
			return GetRuleContext<ObjectIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolLeteralContext boolLeteral() {
			return GetRuleContext<BoolLeteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoneLiteralContext noneLiteral() {
			return GetRuleContext<NoneLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(Context, State);
		EnterRule(_localctx, 34, RULE_operand);
		try {
			State = 192;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 186;
				objectIdentifier();
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 187;
				stringLiteral();
				}
				break;
			case Number:
				EnterOuterAlt(_localctx, 3);
				{
				State = 188;
				numberLiteral();
				}
				break;
			case T__3:
			case T__4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 189;
				boolLeteral();
				}
				break;
			case None:
				EnterOuterAlt(_localctx, 5);
				{
				State = 190;
				noneLiteral();
				}
				break;
			case FunctionName:
				EnterOuterAlt(_localctx, 6);
				{
				State = 191;
				function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class UnaryOperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolLeteralContext boolLeteral() {
			return GetRuleContext<BoolLeteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectIdentifierContext objectIdentifier() {
			return GetRuleContext<ObjectIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public UnaryOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterUnaryOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitUnaryOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperandContext unaryOperand() {
		UnaryOperandContext _localctx = new UnaryOperandContext(Context, State);
		EnterRule(_localctx, 36, RULE_unaryOperand);
		try {
			State = 197;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 194;
				boolLeteral();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 195;
				objectIdentifier();
				}
				break;
			case FunctionName:
				EnterOuterAlt(_localctx, 3);
				{
				State = 196;
				function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ObjectIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(SimpleflowParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(SimpleflowParser.Identifier, i);
		}
		public ObjectIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterObjectIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitObjectIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectIdentifierContext objectIdentifier() {
		ObjectIdentifierContext _localctx = new ObjectIdentifierContext(Context, State);
		EnterRule(_localctx, 38, RULE_objectIdentifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			Match(Identifier);
			State = 204;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 200;
					Match(T__2);
					State = 201;
					Match(Identifier);
					}
					} 
				}
				State = 206;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(SimpleflowParser.String, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 40, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			Match(String);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class NumberLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(SimpleflowParser.Number, 0); }
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(Context, State);
		EnterRule(_localctx, 42, RULE_numberLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(Number);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class BoolLeteralContext : ParserRuleContext {
		public BoolLeteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolLeteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterBoolLeteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitBoolLeteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLeteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolLeteralContext boolLeteral() {
		BoolLeteralContext _localctx = new BoolLeteralContext(Context, State);
		EnterRule(_localctx, 44, RULE_boolLeteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			_la = TokenStream.LA(1);
			if ( !(_la==T__3 || _la==T__4) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class NoneLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode None() { return GetToken(SimpleflowParser.None, 0); }
		public NoneLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noneLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterNoneLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitNoneLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoneLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoneLiteralContext noneLiteral() {
		NoneLiteralContext _localctx = new NoneLiteralContext(Context, State);
		EnterRule(_localctx, 46, RULE_noneLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			Match(None);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ArithmeticExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(SimpleflowParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext[] arithmeticExpression() {
			return GetRuleContexts<ArithmeticExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext arithmeticExpression(int i) {
			return GetRuleContext<ArithmeticExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(SimpleflowParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TimesOp() { return GetToken(SimpleflowParser.TimesOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivOp() { return GetToken(SimpleflowParser.DivOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusOp() { return GetToken(SimpleflowParser.PlusOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusOp() { return GetToken(SimpleflowParser.MinusOp, 0); }
		public ArithmeticExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterArithmeticExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitArithmeticExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticExpressionContext arithmeticExpression() {
		return arithmeticExpression(0);
	}

	private ArithmeticExpressionContext arithmeticExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArithmeticExpressionContext _localctx = new ArithmeticExpressionContext(Context, _parentState);
		ArithmeticExpressionContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_arithmeticExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 216;
				Match(OpenParen);
				State = 217;
				arithmeticExpression(0);
				State = 218;
				Match(CloseParen);
				}
				break;
			case 2:
				{
				State = 220;
				atom();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 231;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 229;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
					case 1:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 223;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 224;
						_la = TokenStream.LA(1);
						if ( !(_la==TimesOp || _la==DivOp) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 225;
						arithmeticExpression(5);
						}
						break;
					case 2:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 226;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 227;
						_la = TokenStream.LA(1);
						if ( !(_la==PlusOp || _la==MinusOp) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 228;
						arithmeticExpression(4);
						}
						break;
					}
					} 
				}
				State = 233;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	internal partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(SimpleflowParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectIdentifierContext objectIdentifier() {
			return GetRuleContext<ObjectIdentifierContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 50, RULE_atom);
		try {
			State = 237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 235;
				Match(Number);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 236;
				objectIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FunctionName() { return GetToken(SimpleflowParser.FunctionName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(SimpleflowParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(SimpleflowParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 52, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			Match(FunctionName);
			State = 240;
			Match(OpenParen);
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 241;
				functionParameter();
				State = 246;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 242;
					Match(T__5);
					State = 243;
					functionParameter();
					}
					}
					State = 248;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 251;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class FunctionParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SimpleflowParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterValueContext functionParameterValue() {
			return GetRuleContext<FunctionParameterValueContext>(0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterFunctionParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitFunctionParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 54, RULE_functionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			Match(Identifier);
			State = 254;
			Match(T__6);
			State = 255;
			functionParameterValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class FunctionParameterValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolLeteralContext boolLeteral() {
			return GetRuleContext<BoolLeteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoneLiteralContext noneLiteral() {
			return GetRuleContext<NoneLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectIdentifierContext objectIdentifier() {
			return GetRuleContext<ObjectIdentifierContext>(0);
		}
		public FunctionParameterValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameterValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterFunctionParameterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitFunctionParameterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameterValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterValueContext functionParameterValue() {
		FunctionParameterValueContext _localctx = new FunctionParameterValueContext(Context, State);
		EnterRule(_localctx, 56, RULE_functionParameterValue);
		try {
			State = 262;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Number:
				EnterOuterAlt(_localctx, 1);
				{
				State = 257;
				numberLiteral();
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 258;
				stringLiteral();
				}
				break;
			case T__3:
			case T__4:
				EnterOuterAlt(_localctx, 3);
				{
				State = 259;
				boolLeteral();
				}
				break;
			case None:
				EnterOuterAlt(_localctx, 4);
				{
				State = 260;
				noneLiteral();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 5);
				{
				State = 261;
				objectIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class JsonObjContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public JsonObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonObj; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterJsonObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitJsonObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonObj(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonObjContext jsonObj() {
		JsonObjContext _localctx = new JsonObjContext(Context, State);
		EnterRule(_localctx, 58, RULE_jsonObj);
		int _la;
		try {
			State = 277;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 264;
				Match(T__7);
				State = 265;
				pair();
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 266;
					Match(T__5);
					State = 267;
					pair();
					}
					}
					State = 272;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 273;
				Match(T__8);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 275;
				Match(T__7);
				State = 276;
				Match(T__8);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class PairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SimpleflowParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 60, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			Match(Identifier);
			State = 280;
			Match(T__6);
			State = 281;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolLeteralContext boolLeteral() {
			return GetRuleContext<BoolLeteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoneLiteralContext noneLiteral() {
			return GetRuleContext<NoneLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectIdentifierContext objectIdentifier() {
			return GetRuleContext<ObjectIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowListener typedListener = listener as ISimpleflowListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowVisitor<TResult> typedVisitor = visitor as ISimpleflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 62, RULE_value);
		try {
			State = 288;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 283;
				boolLeteral();
				}
				break;
			case None:
				EnterOuterAlt(_localctx, 2);
				{
				State = 284;
				noneLiteral();
				}
				break;
			case Number:
				EnterOuterAlt(_localctx, 3);
				{
				State = 285;
				numberLiteral();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 4);
				{
				State = 286;
				objectIdentifier();
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 5);
				{
				State = 287;
				stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 24: return arithmeticExpression_sempred((ArithmeticExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}
	private bool arithmeticExpression_sempred(ArithmeticExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,41,291,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,1,0,5,0,66,8,0,10,0,12,0,69,9,0,1,0,5,0,
		72,8,0,10,0,12,0,75,9,0,1,0,1,0,5,0,79,8,0,10,0,12,0,82,9,0,1,0,1,0,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,97,8,1,10,1,12,1,100,9,1,
		1,1,3,1,103,8,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,3,
		4,118,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,
		1,7,1,8,1,8,1,8,1,8,1,9,1,9,3,9,142,8,9,1,10,1,10,1,10,1,10,1,11,1,11,
		1,11,1,12,1,12,1,12,1,12,1,12,1,12,3,12,157,8,12,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,3,13,168,8,13,1,13,1,13,1,13,1,13,5,13,174,8,13,
		10,13,12,13,177,9,13,1,14,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,
		1,17,1,17,1,17,1,17,3,17,193,8,17,1,18,1,18,1,18,3,18,198,8,18,1,19,1,
		19,1,19,5,19,203,8,19,10,19,12,19,206,9,19,1,20,1,20,1,21,1,21,1,22,1,
		22,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,3,24,222,8,24,1,24,1,24,1,24,
		1,24,1,24,1,24,5,24,230,8,24,10,24,12,24,233,9,24,1,25,1,25,1,25,3,25,
		238,8,25,1,26,1,26,1,26,1,26,1,26,5,26,245,8,26,10,26,12,26,248,9,26,3,
		26,250,8,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,3,28,
		263,8,28,1,29,1,29,1,29,1,29,5,29,269,8,29,10,29,12,29,272,9,29,1,29,1,
		29,1,29,1,29,3,29,278,8,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,
		3,31,289,8,31,1,31,0,2,26,48,32,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,0,5,1,0,21,22,1,0,24,
		30,1,0,4,5,1,0,39,40,1,0,37,38,309,0,67,1,0,0,0,2,85,1,0,0,0,4,104,1,0,
		0,0,6,108,1,0,0,0,8,117,1,0,0,0,10,119,1,0,0,0,12,125,1,0,0,0,14,131,1,
		0,0,0,16,135,1,0,0,0,18,141,1,0,0,0,20,143,1,0,0,0,22,147,1,0,0,0,24,156,
		1,0,0,0,26,167,1,0,0,0,28,178,1,0,0,0,30,182,1,0,0,0,32,184,1,0,0,0,34,
		192,1,0,0,0,36,197,1,0,0,0,38,199,1,0,0,0,40,207,1,0,0,0,42,209,1,0,0,
		0,44,211,1,0,0,0,46,213,1,0,0,0,48,221,1,0,0,0,50,237,1,0,0,0,52,239,1,
		0,0,0,54,253,1,0,0,0,56,262,1,0,0,0,58,277,1,0,0,0,60,279,1,0,0,0,62,288,
		1,0,0,0,64,66,5,19,0,0,65,64,1,0,0,0,66,69,1,0,0,0,67,65,1,0,0,0,67,68,
		1,0,0,0,68,73,1,0,0,0,69,67,1,0,0,0,70,72,3,10,5,0,71,70,1,0,0,0,72,75,
		1,0,0,0,73,71,1,0,0,0,73,74,1,0,0,0,74,80,1,0,0,0,75,73,1,0,0,0,76,79,
		3,2,1,0,77,79,3,8,4,0,78,76,1,0,0,0,78,77,1,0,0,0,79,82,1,0,0,0,80,78,
		1,0,0,0,80,81,1,0,0,0,81,83,1,0,0,0,82,80,1,0,0,0,83,84,5,0,0,1,84,1,1,
		0,0,0,85,86,5,10,0,0,86,87,5,11,0,0,87,88,3,26,13,0,88,89,5,12,0,0,89,
		98,5,19,0,0,90,97,3,14,7,0,91,97,3,16,8,0,92,97,3,20,10,0,93,97,3,12,6,
		0,94,97,3,22,11,0,95,97,3,6,3,0,96,90,1,0,0,0,96,91,1,0,0,0,96,92,1,0,
		0,0,96,93,1,0,0,0,96,94,1,0,0,0,96,95,1,0,0,0,97,100,1,0,0,0,98,96,1,0,
		0,0,98,99,1,0,0,0,99,102,1,0,0,0,100,98,1,0,0,0,101,103,3,4,2,0,102,101,
		1,0,0,0,102,103,1,0,0,0,103,3,1,0,0,0,104,105,5,1,0,0,105,106,5,10,0,0,
		106,107,5,19,0,0,107,5,1,0,0,0,108,109,5,2,0,0,109,110,5,19,0,0,110,7,
		1,0,0,0,111,118,3,14,7,0,112,118,3,16,8,0,113,118,3,20,10,0,114,118,3,
		12,6,0,115,118,3,22,11,0,116,118,3,6,3,0,117,111,1,0,0,0,117,112,1,0,0,
		0,117,113,1,0,0,0,117,114,1,0,0,0,117,115,1,0,0,0,117,116,1,0,0,0,118,
		9,1,0,0,0,119,120,5,16,0,0,120,121,5,36,0,0,121,122,5,18,0,0,122,123,3,
		24,12,0,123,124,5,19,0,0,124,11,1,0,0,0,125,126,5,17,0,0,126,127,5,36,
		0,0,127,128,5,18,0,0,128,129,3,24,12,0,129,130,5,19,0,0,130,13,1,0,0,0,
		131,132,5,13,0,0,132,133,3,18,9,0,133,134,5,19,0,0,134,15,1,0,0,0,135,
		136,5,14,0,0,136,137,3,18,9,0,137,138,5,19,0,0,138,17,1,0,0,0,139,142,
		5,34,0,0,140,142,3,38,19,0,141,139,1,0,0,0,141,140,1,0,0,0,142,19,1,0,
		0,0,143,144,5,15,0,0,144,145,3,38,19,0,145,146,5,19,0,0,146,21,1,0,0,0,
		147,148,3,52,26,0,148,149,5,19,0,0,149,23,1,0,0,0,150,157,3,44,22,0,151,
		157,3,46,23,0,152,157,3,52,26,0,153,157,3,58,29,0,154,157,3,48,24,0,155,
		157,3,40,20,0,156,150,1,0,0,0,156,151,1,0,0,0,156,152,1,0,0,0,156,153,
		1,0,0,0,156,154,1,0,0,0,156,155,1,0,0,0,157,25,1,0,0,0,158,159,6,13,-1,
		0,159,168,3,28,14,0,160,168,3,36,18,0,161,162,5,31,0,0,162,163,3,26,13,
		0,163,164,5,32,0,0,164,168,1,0,0,0,165,166,5,23,0,0,166,168,3,26,13,1,
		167,158,1,0,0,0,167,160,1,0,0,0,167,161,1,0,0,0,167,165,1,0,0,0,168,175,
		1,0,0,0,169,170,10,3,0,0,170,171,3,30,15,0,171,172,3,26,13,4,172,174,1,
		0,0,0,173,169,1,0,0,0,174,177,1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,0,
		176,27,1,0,0,0,177,175,1,0,0,0,178,179,3,34,17,0,179,180,3,32,16,0,180,
		181,3,34,17,0,181,29,1,0,0,0,182,183,7,0,0,0,183,31,1,0,0,0,184,185,7,
		1,0,0,185,33,1,0,0,0,186,193,3,38,19,0,187,193,3,40,20,0,188,193,3,42,
		21,0,189,193,3,44,22,0,190,193,3,46,23,0,191,193,3,52,26,0,192,186,1,0,
		0,0,192,187,1,0,0,0,192,188,1,0,0,0,192,189,1,0,0,0,192,190,1,0,0,0,192,
		191,1,0,0,0,193,35,1,0,0,0,194,198,3,44,22,0,195,198,3,38,19,0,196,198,
		3,52,26,0,197,194,1,0,0,0,197,195,1,0,0,0,197,196,1,0,0,0,198,37,1,0,0,
		0,199,204,5,36,0,0,200,201,5,3,0,0,201,203,5,36,0,0,202,200,1,0,0,0,203,
		206,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,0,205,39,1,0,0,0,206,204,1,0,
		0,0,207,208,5,34,0,0,208,41,1,0,0,0,209,210,5,33,0,0,210,43,1,0,0,0,211,
		212,7,2,0,0,212,45,1,0,0,0,213,214,5,35,0,0,214,47,1,0,0,0,215,216,6,24,
		-1,0,216,217,5,31,0,0,217,218,3,48,24,0,218,219,5,32,0,0,219,222,1,0,0,
		0,220,222,3,50,25,0,221,215,1,0,0,0,221,220,1,0,0,0,222,231,1,0,0,0,223,
		224,10,4,0,0,224,225,7,3,0,0,225,230,3,48,24,5,226,227,10,3,0,0,227,228,
		7,4,0,0,228,230,3,48,24,4,229,223,1,0,0,0,229,226,1,0,0,0,230,233,1,0,
		0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,49,1,0,0,0,233,231,1,0,0,0,234,
		238,1,0,0,0,235,238,5,33,0,0,236,238,3,38,19,0,237,234,1,0,0,0,237,235,
		1,0,0,0,237,236,1,0,0,0,238,51,1,0,0,0,239,240,5,41,0,0,240,249,5,31,0,
		0,241,246,3,54,27,0,242,243,5,6,0,0,243,245,3,54,27,0,244,242,1,0,0,0,
		245,248,1,0,0,0,246,244,1,0,0,0,246,247,1,0,0,0,247,250,1,0,0,0,248,246,
		1,0,0,0,249,241,1,0,0,0,249,250,1,0,0,0,250,251,1,0,0,0,251,252,5,32,0,
		0,252,53,1,0,0,0,253,254,5,36,0,0,254,255,5,7,0,0,255,256,3,56,28,0,256,
		55,1,0,0,0,257,263,3,42,21,0,258,263,3,40,20,0,259,263,3,44,22,0,260,263,
		3,46,23,0,261,263,3,38,19,0,262,257,1,0,0,0,262,258,1,0,0,0,262,259,1,
		0,0,0,262,260,1,0,0,0,262,261,1,0,0,0,263,57,1,0,0,0,264,265,5,8,0,0,265,
		270,3,60,30,0,266,267,5,6,0,0,267,269,3,60,30,0,268,266,1,0,0,0,269,272,
		1,0,0,0,270,268,1,0,0,0,270,271,1,0,0,0,271,273,1,0,0,0,272,270,1,0,0,
		0,273,274,5,9,0,0,274,278,1,0,0,0,275,276,5,8,0,0,276,278,5,9,0,0,277,
		264,1,0,0,0,277,275,1,0,0,0,278,59,1,0,0,0,279,280,5,36,0,0,280,281,5,
		7,0,0,281,282,3,62,31,0,282,61,1,0,0,0,283,289,3,44,22,0,284,289,3,46,
		23,0,285,289,3,42,21,0,286,289,3,38,19,0,287,289,3,40,20,0,288,283,1,0,
		0,0,288,284,1,0,0,0,288,285,1,0,0,0,288,286,1,0,0,0,288,287,1,0,0,0,289,
		63,1,0,0,0,25,67,73,78,80,96,98,102,117,141,156,167,175,192,197,204,221,
		229,231,237,246,249,262,270,277,288
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Simpleflow.Parser
