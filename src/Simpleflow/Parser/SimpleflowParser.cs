//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Navtech\Opensource\Simpleflow\src\Simpleflow\Parser\Grammar\SimpleflowParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Simpleflow.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
internal partial class SimpleflowParser : SimpleflowParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		MultiLineComment=1, SingleLineComment=2, OpenBracket=3, CloseBracket=4, 
		OpenParen=5, CloseParen=6, OpenBrace=7, TemplateCloseBrace=8, CloseBrace=9, 
		Colon=10, Comma=11, Dot=12, Assign=13, PlusOp=14, MinusOp=15, TimesOp=16, 
		DivOp=17, ModuloOp=18, GreaterThan=19, GreaterThanEqual=20, LessThan=21, 
		LessThanEqual=22, Equal=23, NotEqual=24, Let=25, Set=26, Partial=27, Rule=28, 
		When=29, Then=30, End=31, Exit=32, Message=33, Error=34, Output=35, Semicolon=36, 
		And=37, Or=38, Not=39, True=40, False=41, Number=42, String=43, None=44, 
		Identifier=45, IgnoreIdentifier=46, Indexer=47, FunctionName=48, BackTick=49, 
		WhiteSpaces=50, LineTerminator=51, TemplateStringStartExpression=52, TemplateStringAtom=53;
	public const int
		RULE_program = 0, RULE_letStmt = 1, RULE_ruleStmt = 2, RULE_generalStatement = 3, 
		RULE_endRuleStmt = 4, RULE_setStmt = 5, RULE_messageStmt = 6, RULE_errorStmt = 7, 
		RULE_outputStmt = 8, RULE_functionStmt = 9, RULE_exitStmt = 10, RULE_messageText = 11, 
		RULE_expression = 12, RULE_templateStringLiteral = 13, RULE_templateStringAtom = 14, 
		RULE_arithmeticExpression = 15, RULE_atom = 16, RULE_function = 17, RULE_functionParameter = 18, 
		RULE_functionParameterValue = 19, RULE_objectIdentifier = 20, RULE_identifierIndex = 21, 
		RULE_index = 22, RULE_indexNumber = 23, RULE_stringLiteral = 24, RULE_numberLiteral = 25, 
		RULE_boolLeteral = 26, RULE_noneLiteral = 27, RULE_arrayLiteral = 28, 
		RULE_arrayValue = 29, RULE_jsonObj = 30, RULE_pair = 31, RULE_predicate = 32, 
		RULE_testExpression = 33, RULE_logicalOperator = 34, RULE_relationalOperator = 35, 
		RULE_operand = 36, RULE_unaryOperand = 37, RULE_eos = 38;
	public static readonly string[] ruleNames = {
		"program", "letStmt", "ruleStmt", "generalStatement", "endRuleStmt", "setStmt", 
		"messageStmt", "errorStmt", "outputStmt", "functionStmt", "exitStmt", 
		"messageText", "expression", "templateStringLiteral", "templateStringAtom", 
		"arithmeticExpression", "atom", "function", "functionParameter", "functionParameterValue", 
		"objectIdentifier", "identifierIndex", "index", "indexNumber", "stringLiteral", 
		"numberLiteral", "boolLeteral", "noneLiteral", "arrayLiteral", "arrayValue", 
		"jsonObj", "pair", "predicate", "testExpression", "logicalOperator", "relationalOperator", 
		"operand", "unaryOperand", "eos"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'['", "']'", "'('", "')'", null, null, "'}'", "':'", 
		"','", "'.'", "'='", "'+'", "'-'", "'*'", "'/'", "'%'", "'>'", "'>='", 
		"'<'", "'<='", "'=='", "'!='", "'let'", "'set'", "'partial'", "'rule'", 
		"'when'", "'then'", "'end'", "'exit'", "'message'", "'error'", "'output'", 
		"';'", "'and'", "'or'", "'not'", "'true'", "'false'", null, null, "'none'", 
		null, "'_'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MultiLineComment", "SingleLineComment", "OpenBracket", "CloseBracket", 
		"OpenParen", "CloseParen", "OpenBrace", "TemplateCloseBrace", "CloseBrace", 
		"Colon", "Comma", "Dot", "Assign", "PlusOp", "MinusOp", "TimesOp", "DivOp", 
		"ModuloOp", "GreaterThan", "GreaterThanEqual", "LessThan", "LessThanEqual", 
		"Equal", "NotEqual", "Let", "Set", "Partial", "Rule", "When", "Then", 
		"End", "Exit", "Message", "Error", "Output", "Semicolon", "And", "Or", 
		"Not", "True", "False", "Number", "String", "None", "Identifier", "IgnoreIdentifier", 
		"Indexer", "FunctionName", "BackTick", "WhiteSpaces", "LineTerminator", 
		"TemplateStringStartExpression", "TemplateStringAtom"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SimpleflowParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SimpleflowParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SimpleflowParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SimpleflowParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	internal partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SimpleflowParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LetStmtContext[] letStmt() {
			return GetRuleContexts<LetStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetStmtContext letStmt(int i) {
			return GetRuleContext<LetStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleStmtContext[] ruleStmt() {
			return GetRuleContexts<RuleStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleStmtContext ruleStmt(int i) {
			return GetRuleContext<RuleStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralStatementContext[] generalStatement() {
			return GetRuleContexts<GeneralStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralStatementContext generalStatement(int i) {
			return GetRuleContext<GeneralStatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Let) {
				{
				{
				State = 78;
				letStmt();
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Set) | (1L << Partial) | (1L << Rule) | (1L << Exit) | (1L << Message) | (1L << Error) | (1L << Output) | (1L << FunctionName))) != 0)) {
				{
				State = 86;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Rule:
					{
					State = 84;
					ruleStmt();
					}
					break;
				case Set:
				case Partial:
				case Exit:
				case Message:
				case Error:
				case Output:
				case FunctionName:
					{
					State = 85;
					generalStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 91;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class LetStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Let() { return GetToken(SimpleflowParser.Let, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(SimpleflowParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(SimpleflowParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(SimpleflowParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IgnoreIdentifier() { return GetToken(SimpleflowParser.IgnoreIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(SimpleflowParser.Comma, 0); }
		public LetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterLetStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitLetStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetStmtContext letStmt() {
		LetStmtContext _localctx = new LetStmtContext(Context, State);
		EnterRule(_localctx, 2, RULE_letStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(Let);
			State = 94;
			_la = TokenStream.LA(1);
			if ( !(_la==Identifier || _la==IgnoreIdentifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 95;
				Match(Comma);
				State = 96;
				Match(Identifier);
				}
			}

			State = 99;
			Match(Assign);
			State = 100;
			expression();
			State = 101;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class RuleStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rule() { return GetToken(SimpleflowParser.Rule, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode When() { return GetToken(SimpleflowParser.When, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Then() { return GetToken(SimpleflowParser.Then, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralStatementContext[] generalStatement() {
			return GetRuleContexts<GeneralStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralStatementContext generalStatement(int i) {
			return GetRuleContext<GeneralStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndRuleStmtContext endRuleStmt() {
			return GetRuleContext<EndRuleStmtContext>(0);
		}
		public RuleStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterRuleStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitRuleStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleStmtContext ruleStmt() {
		RuleStmtContext _localctx = new RuleStmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_ruleStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(Rule);
			State = 104;
			Match(When);
			State = 105;
			predicate(0);
			State = 106;
			Match(Then);
			State = 107;
			eos();
			State = 109;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 108;
					generalStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 111;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==End) {
				{
				State = 113;
				endRuleStmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class GeneralStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessageStmtContext messageStmt() {
			return GetRuleContext<MessageStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorStmtContext errorStmt() {
			return GetRuleContext<ErrorStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputStmtContext outputStmt() {
			return GetRuleContext<OutputStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetStmtContext setStmt() {
			return GetRuleContext<SetStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionStmtContext functionStmt() {
			return GetRuleContext<FunctionStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExitStmtContext exitStmt() {
			return GetRuleContext<ExitStmtContext>(0);
		}
		public GeneralStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generalStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterGeneralStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitGeneralStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneralStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneralStatementContext generalStatement() {
		GeneralStatementContext _localctx = new GeneralStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_generalStatement);
		try {
			State = 122;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Message:
				EnterOuterAlt(_localctx, 1);
				{
				State = 116;
				messageStmt();
				}
				break;
			case Error:
				EnterOuterAlt(_localctx, 2);
				{
				State = 117;
				errorStmt();
				}
				break;
			case Output:
				EnterOuterAlt(_localctx, 3);
				{
				State = 118;
				outputStmt();
				}
				break;
			case Set:
			case Partial:
				EnterOuterAlt(_localctx, 4);
				{
				State = 119;
				setStmt();
				}
				break;
			case FunctionName:
				EnterOuterAlt(_localctx, 5);
				{
				State = 120;
				functionStmt();
				}
				break;
			case Exit:
				EnterOuterAlt(_localctx, 6);
				{
				State = 121;
				exitStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class EndRuleStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(SimpleflowParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rule() { return GetToken(SimpleflowParser.Rule, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public EndRuleStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endRuleStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterEndRuleStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitEndRuleStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndRuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndRuleStmtContext endRuleStmt() {
		EndRuleStmtContext _localctx = new EndRuleStmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_endRuleStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(End);
			State = 125;
			Match(Rule);
			State = 126;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class SetStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Set() { return GetToken(SimpleflowParser.Set, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(SimpleflowParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(SimpleflowParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(SimpleflowParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IgnoreIdentifier() { return GetToken(SimpleflowParser.IgnoreIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Partial() { return GetToken(SimpleflowParser.Partial, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(SimpleflowParser.Comma, 0); }
		public SetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterSetStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitSetStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStmtContext setStmt() {
		SetStmtContext _localctx = new SetStmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_setStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Partial) {
				{
				State = 128;
				Match(Partial);
				}
			}

			State = 131;
			Match(Set);
			State = 132;
			_la = TokenStream.LA(1);
			if ( !(_la==Identifier || _la==IgnoreIdentifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 133;
				Match(Comma);
				State = 134;
				Match(Identifier);
				}
			}

			State = 137;
			Match(Assign);
			State = 138;
			expression();
			State = 139;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class MessageStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Message() { return GetToken(SimpleflowParser.Message, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessageTextContext messageText() {
			return GetRuleContext<MessageTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public MessageStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterMessageStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitMessageStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageStmtContext messageStmt() {
		MessageStmtContext _localctx = new MessageStmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_messageStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			Match(Message);
			State = 142;
			messageText();
			State = 143;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ErrorStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Error() { return GetToken(SimpleflowParser.Error, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessageTextContext messageText() {
			return GetRuleContext<MessageTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterErrorStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitErrorStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStmtContext errorStmt() {
		ErrorStmtContext _localctx = new ErrorStmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_errorStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			Match(Error);
			State = 146;
			messageText();
			State = 147;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class OutputStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Output() { return GetToken(SimpleflowParser.Output, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectIdentifierContext objectIdentifier() {
			return GetRuleContext<ObjectIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public OutputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterOutputStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitOutputStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputStmtContext outputStmt() {
		OutputStmtContext _localctx = new OutputStmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_outputStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(Output);
			State = 150;
			objectIdentifier();
			State = 151;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class FunctionStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public FunctionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterFunctionStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitFunctionStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStmtContext functionStmt() {
		FunctionStmtContext _localctx = new FunctionStmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_functionStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			function();
			State = 154;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ExitStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exit() { return GetToken(SimpleflowParser.Exit, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ExitStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterExitStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitExitStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStmtContext exitStmt() {
		ExitStmtContext _localctx = new ExitStmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_exitStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(Exit);
			State = 157;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class MessageTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringLiteralContext templateStringLiteral() {
			return GetRuleContext<TemplateStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectIdentifierContext objectIdentifier() {
			return GetRuleContext<ObjectIdentifierContext>(0);
		}
		public MessageTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterMessageText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitMessageText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageTextContext messageText() {
		MessageTextContext _localctx = new MessageTextContext(Context, State);
		EnterRule(_localctx, 22, RULE_messageText);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case String:
				{
				State = 159;
				stringLiteral();
				}
				break;
			case BackTick:
				{
				State = 160;
				templateStringLiteral();
				}
				break;
			case Identifier:
				{
				State = 161;
				objectIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolLeteralContext boolLeteral() {
			return GetRuleContext<BoolLeteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoneLiteralContext noneLiteral() {
			return GetRuleContext<NoneLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonObjContext jsonObj() {
			return GetRuleContext<JsonObjContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectIdentifierContext objectIdentifier() {
			return GetRuleContext<ObjectIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext arithmeticExpression() {
			return GetRuleContext<ArithmeticExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringLiteralContext templateStringLiteral() {
			return GetRuleContext<TemplateStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_expression);
		try {
			State = 173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 164;
				boolLeteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 165;
				noneLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 166;
				function();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 167;
				jsonObj();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 168;
				objectIdentifier();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 169;
				arithmeticExpression(0);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 170;
				stringLiteral();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 171;
				templateStringLiteral();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 172;
				arrayLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class TemplateStringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BackTick() { return GetTokens(SimpleflowParser.BackTick); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BackTick(int i) {
			return GetToken(SimpleflowParser.BackTick, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringAtomContext[] templateStringAtom() {
			return GetRuleContexts<TemplateStringAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringAtomContext templateStringAtom(int i) {
			return GetRuleContext<TemplateStringAtomContext>(i);
		}
		public TemplateStringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterTemplateStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitTemplateStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStringLiteralContext templateStringLiteral() {
		TemplateStringLiteralContext _localctx = new TemplateStringLiteralContext(Context, State);
		EnterRule(_localctx, 26, RULE_templateStringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			Match(BackTick);
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TemplateStringStartExpression || _la==TemplateStringAtom) {
				{
				{
				State = 176;
				templateStringAtom();
				}
				}
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 182;
			Match(BackTick);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class TemplateStringAtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringAtom() { return GetToken(SimpleflowParser.TemplateStringAtom, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringStartExpression() { return GetToken(SimpleflowParser.TemplateStringStartExpression, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectIdentifierContext objectIdentifier() {
			return GetRuleContext<ObjectIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateCloseBrace() { return GetToken(SimpleflowParser.TemplateCloseBrace, 0); }
		public TemplateStringAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStringAtom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterTemplateStringAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitTemplateStringAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateStringAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStringAtomContext templateStringAtom() {
		TemplateStringAtomContext _localctx = new TemplateStringAtomContext(Context, State);
		EnterRule(_localctx, 28, RULE_templateStringAtom);
		try {
			State = 189;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TemplateStringAtom:
				EnterOuterAlt(_localctx, 1);
				{
				State = 184;
				Match(TemplateStringAtom);
				}
				break;
			case TemplateStringStartExpression:
				EnterOuterAlt(_localctx, 2);
				{
				State = 185;
				Match(TemplateStringStartExpression);
				State = 186;
				objectIdentifier();
				State = 187;
				Match(TemplateCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ArithmeticExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(SimpleflowParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext[] arithmeticExpression() {
			return GetRuleContexts<ArithmeticExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext arithmeticExpression(int i) {
			return GetRuleContext<ArithmeticExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(SimpleflowParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TimesOp() { return GetToken(SimpleflowParser.TimesOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivOp() { return GetToken(SimpleflowParser.DivOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModuloOp() { return GetToken(SimpleflowParser.ModuloOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusOp() { return GetToken(SimpleflowParser.PlusOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusOp() { return GetToken(SimpleflowParser.MinusOp, 0); }
		public ArithmeticExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterArithmeticExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitArithmeticExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticExpressionContext arithmeticExpression() {
		return arithmeticExpression(0);
	}

	private ArithmeticExpressionContext arithmeticExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArithmeticExpressionContext _localctx = new ArithmeticExpressionContext(Context, _parentState);
		ArithmeticExpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_arithmeticExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 192;
				Match(OpenParen);
				State = 193;
				arithmeticExpression(0);
				State = 194;
				Match(CloseParen);
				}
				break;
			case 2:
				{
				State = 196;
				atom();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 207;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 205;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 199;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 200;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TimesOp) | (1L << DivOp) | (1L << ModuloOp))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 201;
						arithmeticExpression(5);
						}
						break;
					case 2:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 202;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 203;
						_la = TokenStream.LA(1);
						if ( !(_la==PlusOp || _la==MinusOp) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 204;
						arithmeticExpression(4);
						}
						break;
					}
					} 
				}
				State = 209;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	internal partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(SimpleflowParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectIdentifierContext objectIdentifier() {
			return GetRuleContext<ObjectIdentifierContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 32, RULE_atom);
		try {
			State = 213;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 211;
				Match(Number);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 212;
				objectIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FunctionName() { return GetToken(SimpleflowParser.FunctionName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(SimpleflowParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(SimpleflowParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SimpleflowParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SimpleflowParser.Comma, i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 34, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			Match(FunctionName);
			State = 216;
			Match(OpenParen);
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 217;
				functionParameter();
				State = 222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 218;
					Match(Comma);
					State = 219;
					functionParameter();
					}
					}
					State = 224;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 227;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class FunctionParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SimpleflowParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(SimpleflowParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterValueContext functionParameterValue() {
			return GetRuleContext<FunctionParameterValueContext>(0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterFunctionParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitFunctionParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 36, RULE_functionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			Match(Identifier);
			State = 230;
			Match(Colon);
			State = 231;
			functionParameterValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class FunctionParameterValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolLeteralContext boolLeteral() {
			return GetRuleContext<BoolLeteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoneLiteralContext noneLiteral() {
			return GetRuleContext<NoneLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectIdentifierContext objectIdentifier() {
			return GetRuleContext<ObjectIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext arithmeticExpression() {
			return GetRuleContext<ArithmeticExpressionContext>(0);
		}
		public FunctionParameterValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameterValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterFunctionParameterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitFunctionParameterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameterValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterValueContext functionParameterValue() {
		FunctionParameterValueContext _localctx = new FunctionParameterValueContext(Context, State);
		EnterRule(_localctx, 38, RULE_functionParameterValue);
		try {
			State = 239;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 233;
				numberLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 234;
				stringLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 235;
				boolLeteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 236;
				noneLiteral();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 237;
				objectIdentifier();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 238;
				arithmeticExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ObjectIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierIndexContext[] identifierIndex() {
			return GetRuleContexts<IdentifierIndexContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierIndexContext identifierIndex(int i) {
			return GetRuleContext<IdentifierIndexContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(SimpleflowParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(SimpleflowParser.Dot, i);
		}
		public ObjectIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterObjectIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitObjectIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectIdentifierContext objectIdentifier() {
		ObjectIdentifierContext _localctx = new ObjectIdentifierContext(Context, State);
		EnterRule(_localctx, 40, RULE_objectIdentifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			identifierIndex();
			State = 242;
			if (!(this.NotLineTerminator())) throw new FailedPredicateException(this, "this.NotLineTerminator()");
			State = 248;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 243;
					Match(Dot);
					State = 244;
					if (!(this.NotLineTerminator())) throw new FailedPredicateException(this, "this.NotLineTerminator()");
					State = 245;
					identifierIndex();
					}
					} 
				}
				State = 250;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class IdentifierIndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SimpleflowParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		public IdentifierIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierIndex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterIdentifierIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitIdentifierIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierIndexContext identifierIndex() {
		IdentifierIndexContext _localctx = new IdentifierIndexContext(Context, State);
		EnterRule(_localctx, 42, RULE_identifierIndex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			Match(Identifier);
			State = 252;
			if (!(this.NotLineTerminator())) throw new FailedPredicateException(this, "this.NotLineTerminator()");
			State = 254;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 253;
				index();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class IndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(SimpleflowParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexNumberContext indexNumber() {
			return GetRuleContext<IndexNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(SimpleflowParser.CloseBracket, 0); }
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 44, RULE_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			Match(OpenBracket);
			State = 257;
			if (!(this.NotLineTerminator())) throw new FailedPredicateException(this, "this.NotLineTerminator()");
			State = 258;
			indexNumber();
			State = 259;
			if (!(this.NotLineTerminator())) throw new FailedPredicateException(this, "this.NotLineTerminator()");
			State = 260;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class IndexNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectIdentifierContext objectIdentifier() {
			return GetRuleContext<ObjectIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public IndexNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterIndexNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitIndexNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexNumberContext indexNumber() {
		IndexNumberContext _localctx = new IndexNumberContext(Context, State);
		EnterRule(_localctx, 46, RULE_indexNumber);
		try {
			State = 265;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Number:
				EnterOuterAlt(_localctx, 1);
				{
				State = 262;
				numberLiteral();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 263;
				objectIdentifier();
				}
				break;
			case FunctionName:
				EnterOuterAlt(_localctx, 3);
				{
				State = 264;
				function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(SimpleflowParser.String, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 48, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			Match(String);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class NumberLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(SimpleflowParser.Number, 0); }
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(Context, State);
		EnterRule(_localctx, 50, RULE_numberLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			Match(Number);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class BoolLeteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(SimpleflowParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(SimpleflowParser.False, 0); }
		public BoolLeteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolLeteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterBoolLeteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitBoolLeteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLeteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolLeteralContext boolLeteral() {
		BoolLeteralContext _localctx = new BoolLeteralContext(Context, State);
		EnterRule(_localctx, 52, RULE_boolLeteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			_la = TokenStream.LA(1);
			if ( !(_la==True || _la==False) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class NoneLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode None() { return GetToken(SimpleflowParser.None, 0); }
		public NoneLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noneLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterNoneLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitNoneLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoneLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoneLiteralContext noneLiteral() {
		NoneLiteralContext _localctx = new NoneLiteralContext(Context, State);
		EnterRule(_localctx, 54, RULE_noneLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			Match(None);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(SimpleflowParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayValueContext[] arrayValue() {
			return GetRuleContexts<ArrayValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayValueContext arrayValue(int i) {
			return GetRuleContext<ArrayValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(SimpleflowParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SimpleflowParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SimpleflowParser.Comma, i);
		}
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterArrayLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitArrayLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 56, RULE_arrayLiteral);
		int _la;
		try {
			State = 288;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 275;
				Match(OpenBracket);
				State = 276;
				arrayValue();
				State = 281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 277;
					Match(Comma);
					State = 278;
					arrayValue();
					}
					}
					State = 283;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 284;
				Match(CloseBracket);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 286;
				Match(OpenBracket);
				State = 287;
				Match(CloseBracket);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ArrayValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolLeteralContext boolLeteral() {
			return GetRuleContext<BoolLeteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoneLiteralContext noneLiteral() {
			return GetRuleContext<NoneLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectIdentifierContext objectIdentifier() {
			return GetRuleContext<ObjectIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext arithmeticExpression() {
			return GetRuleContext<ArithmeticExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringLiteralContext templateStringLiteral() {
			return GetRuleContext<TemplateStringLiteralContext>(0);
		}
		public ArrayValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterArrayValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitArrayValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayValueContext arrayValue() {
		ArrayValueContext _localctx = new ArrayValueContext(Context, State);
		EnterRule(_localctx, 58, RULE_arrayValue);
		try {
			State = 297;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 290;
				boolLeteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 291;
				noneLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 292;
				function();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 293;
				objectIdentifier();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 294;
				arithmeticExpression(0);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 295;
				stringLiteral();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 296;
				templateStringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class JsonObjContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(SimpleflowParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(SimpleflowParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SimpleflowParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SimpleflowParser.Comma, i);
		}
		public JsonObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonObj; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterJsonObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitJsonObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonObj(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonObjContext jsonObj() {
		JsonObjContext _localctx = new JsonObjContext(Context, State);
		EnterRule(_localctx, 60, RULE_jsonObj);
		int _la;
		try {
			State = 312;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 299;
				Match(OpenBrace);
				State = 300;
				pair();
				State = 305;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 301;
					Match(Comma);
					State = 302;
					pair();
					}
					}
					State = 307;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 308;
				Match(CloseBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 310;
				Match(OpenBrace);
				State = 311;
				Match(CloseBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class PairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SimpleflowParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(SimpleflowParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 62, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			Match(Identifier);
			State = 315;
			Match(Colon);
			State = 316;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class PredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TestExpressionContext testExpression() {
			return GetRuleContext<TestExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperandContext unaryOperand() {
			return GetRuleContext<UnaryOperandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(SimpleflowParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(SimpleflowParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(SimpleflowParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOperatorContext logicalOperator() {
			return GetRuleContext<LogicalOperatorContext>(0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PredicateContext _localctx = new PredicateContext(Context, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_predicate, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 319;
				testExpression();
				}
				break;
			case 2:
				{
				State = 320;
				unaryOperand();
				}
				break;
			case 3:
				{
				State = 321;
				Match(OpenParen);
				State = 322;
				predicate(0);
				State = 323;
				Match(CloseParen);
				}
				break;
			case 4:
				{
				State = 325;
				Match(Not);
				State = 326;
				predicate(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 335;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PredicateContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_predicate);
					State = 329;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 330;
					logicalOperator();
					State = 331;
					predicate(4);
					}
					} 
				}
				State = 337;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	internal partial class TestExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext[] operand() {
			return GetRuleContexts<OperandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext operand(int i) {
			return GetRuleContext<OperandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalOperatorContext relationalOperator() {
			return GetRuleContext<RelationalOperatorContext>(0);
		}
		public TestExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterTestExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitTestExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestExpressionContext testExpression() {
		TestExpressionContext _localctx = new TestExpressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_testExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			operand();
			State = 339;
			relationalOperator();
			State = 340;
			operand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class LogicalOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(SimpleflowParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(SimpleflowParser.Or, 0); }
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterLogicalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitLogicalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOperatorContext logicalOperator() {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(Context, State);
		EnterRule(_localctx, 68, RULE_logicalOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			_la = TokenStream.LA(1);
			if ( !(_la==And || _la==Or) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class RelationalOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThan() { return GetToken(SimpleflowParser.GreaterThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(SimpleflowParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanEqual() { return GetToken(SimpleflowParser.GreaterThanEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanEqual() { return GetToken(SimpleflowParser.LessThanEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(SimpleflowParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual() { return GetToken(SimpleflowParser.NotEqual, 0); }
		public RelationalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterRelationalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitRelationalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalOperatorContext relationalOperator() {
		RelationalOperatorContext _localctx = new RelationalOperatorContext(Context, State);
		EnterRule(_localctx, 70, RULE_relationalOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GreaterThan) | (1L << GreaterThanEqual) | (1L << LessThan) | (1L << LessThanEqual) | (1L << Equal) | (1L << NotEqual))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class OperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectIdentifierContext objectIdentifier() {
			return GetRuleContext<ObjectIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolLeteralContext boolLeteral() {
			return GetRuleContext<BoolLeteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoneLiteralContext noneLiteral() {
			return GetRuleContext<NoneLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext arithmeticExpression() {
			return GetRuleContext<ArithmeticExpressionContext>(0);
		}
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(Context, State);
		EnterRule(_localctx, 72, RULE_operand);
		try {
			State = 353;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 346;
				objectIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 347;
				stringLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 348;
				numberLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 349;
				boolLeteral();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 350;
				noneLiteral();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 351;
				function();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 352;
				arithmeticExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class UnaryOperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolLeteralContext boolLeteral() {
			return GetRuleContext<BoolLeteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectIdentifierContext objectIdentifier() {
			return GetRuleContext<ObjectIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public UnaryOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterUnaryOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitUnaryOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperandContext unaryOperand() {
		UnaryOperandContext _localctx = new UnaryOperandContext(Context, State);
		EnterRule(_localctx, 74, RULE_unaryOperand);
		try {
			State = 358;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case True:
			case False:
				EnterOuterAlt(_localctx, 1);
				{
				State = 355;
				boolLeteral();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 356;
				objectIdentifier();
				}
				break;
			case FunctionName:
				EnterOuterAlt(_localctx, 3);
				{
				State = 357;
				function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class EosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SimpleflowParser.Eof, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.EnterEos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleflowParserListener typedListener = listener as ISimpleflowParserListener;
			if (typedListener != null) typedListener.ExitEos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleflowParserVisitor<TResult> typedVisitor = visitor as ISimpleflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 76, RULE_eos);
		try {
			State = 362;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 360;
				Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 361;
				if (!(this.LineTerminatorAhead())) throw new FailedPredicateException(this, "this.LineTerminatorAhead()");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 15: return arithmeticExpression_sempred((ArithmeticExpressionContext)_localctx, predIndex);
		case 20: return objectIdentifier_sempred((ObjectIdentifierContext)_localctx, predIndex);
		case 21: return identifierIndex_sempred((IdentifierIndexContext)_localctx, predIndex);
		case 22: return index_sempred((IndexContext)_localctx, predIndex);
		case 32: return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 38: return eos_sempred((EosContext)_localctx, predIndex);
		}
		return true;
	}
	private bool arithmeticExpression_sempred(ArithmeticExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		}
		return true;
	}
	private bool objectIdentifier_sempred(ObjectIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return this.NotLineTerminator();
		case 3: return this.NotLineTerminator();
		}
		return true;
	}
	private bool identifierIndex_sempred(IdentifierIndexContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return this.NotLineTerminator();
		}
		return true;
	}
	private bool index_sempred(IndexContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return this.NotLineTerminator();
		case 6: return this.NotLineTerminator();
		}
		return true;
	}
	private bool predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 3);
		}
		return true;
	}
	private bool eos_sempred(EosContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return this.LineTerminatorAhead();
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,53,365,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,1,0,5,0,80,8,0,10,0,12,0,83,9,0,1,0,1,0,
		5,0,87,8,0,10,0,12,0,90,9,0,1,0,1,0,1,1,1,1,1,1,1,1,3,1,98,8,1,1,1,1,1,
		1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,4,2,110,8,2,11,2,12,2,111,1,2,3,2,115,
		8,2,1,3,1,3,1,3,1,3,1,3,1,3,3,3,123,8,3,1,4,1,4,1,4,1,4,1,5,3,5,130,8,
		5,1,5,1,5,1,5,1,5,3,5,136,8,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,
		1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,3,11,
		163,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,174,8,12,1,
		13,1,13,5,13,178,8,13,10,13,12,13,181,9,13,1,13,1,13,1,14,1,14,1,14,1,
		14,1,14,3,14,190,8,14,1,15,1,15,1,15,1,15,1,15,1,15,3,15,198,8,15,1,15,
		1,15,1,15,1,15,1,15,1,15,5,15,206,8,15,10,15,12,15,209,9,15,1,16,1,16,
		1,16,3,16,214,8,16,1,17,1,17,1,17,1,17,1,17,5,17,221,8,17,10,17,12,17,
		224,9,17,3,17,226,8,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,
		19,1,19,1,19,3,19,240,8,19,1,20,1,20,1,20,1,20,1,20,5,20,247,8,20,10,20,
		12,20,250,9,20,1,21,1,21,1,21,3,21,255,8,21,1,22,1,22,1,22,1,22,1,22,1,
		22,1,23,1,23,1,23,3,23,266,8,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,
		1,28,1,28,1,28,1,28,5,28,280,8,28,10,28,12,28,283,9,28,1,28,1,28,1,28,
		1,28,3,28,289,8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,298,8,29,1,
		30,1,30,1,30,1,30,5,30,304,8,30,10,30,12,30,307,9,30,1,30,1,30,1,30,1,
		30,3,30,313,8,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
		1,32,1,32,3,32,328,8,32,1,32,1,32,1,32,1,32,5,32,334,8,32,10,32,12,32,
		337,9,32,1,33,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,36,1,
		36,1,36,1,36,3,36,354,8,36,1,37,1,37,1,37,3,37,359,8,37,1,38,1,38,3,38,
		363,8,38,1,38,0,2,30,64,39,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
		32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,0,
		6,1,0,45,46,1,0,16,18,1,0,14,15,1,0,40,41,1,0,37,38,1,0,19,24,389,0,81,
		1,0,0,0,2,93,1,0,0,0,4,103,1,0,0,0,6,122,1,0,0,0,8,124,1,0,0,0,10,129,
		1,0,0,0,12,141,1,0,0,0,14,145,1,0,0,0,16,149,1,0,0,0,18,153,1,0,0,0,20,
		156,1,0,0,0,22,162,1,0,0,0,24,173,1,0,0,0,26,175,1,0,0,0,28,189,1,0,0,
		0,30,197,1,0,0,0,32,213,1,0,0,0,34,215,1,0,0,0,36,229,1,0,0,0,38,239,1,
		0,0,0,40,241,1,0,0,0,42,251,1,0,0,0,44,256,1,0,0,0,46,265,1,0,0,0,48,267,
		1,0,0,0,50,269,1,0,0,0,52,271,1,0,0,0,54,273,1,0,0,0,56,288,1,0,0,0,58,
		297,1,0,0,0,60,312,1,0,0,0,62,314,1,0,0,0,64,327,1,0,0,0,66,338,1,0,0,
		0,68,342,1,0,0,0,70,344,1,0,0,0,72,353,1,0,0,0,74,358,1,0,0,0,76,362,1,
		0,0,0,78,80,3,2,1,0,79,78,1,0,0,0,80,83,1,0,0,0,81,79,1,0,0,0,81,82,1,
		0,0,0,82,88,1,0,0,0,83,81,1,0,0,0,84,87,3,4,2,0,85,87,3,6,3,0,86,84,1,
		0,0,0,86,85,1,0,0,0,87,90,1,0,0,0,88,86,1,0,0,0,88,89,1,0,0,0,89,91,1,
		0,0,0,90,88,1,0,0,0,91,92,5,0,0,1,92,1,1,0,0,0,93,94,5,25,0,0,94,97,7,
		0,0,0,95,96,5,11,0,0,96,98,5,45,0,0,97,95,1,0,0,0,97,98,1,0,0,0,98,99,
		1,0,0,0,99,100,5,13,0,0,100,101,3,24,12,0,101,102,3,76,38,0,102,3,1,0,
		0,0,103,104,5,28,0,0,104,105,5,29,0,0,105,106,3,64,32,0,106,107,5,30,0,
		0,107,109,3,76,38,0,108,110,3,6,3,0,109,108,1,0,0,0,110,111,1,0,0,0,111,
		109,1,0,0,0,111,112,1,0,0,0,112,114,1,0,0,0,113,115,3,8,4,0,114,113,1,
		0,0,0,114,115,1,0,0,0,115,5,1,0,0,0,116,123,3,12,6,0,117,123,3,14,7,0,
		118,123,3,16,8,0,119,123,3,10,5,0,120,123,3,18,9,0,121,123,3,20,10,0,122,
		116,1,0,0,0,122,117,1,0,0,0,122,118,1,0,0,0,122,119,1,0,0,0,122,120,1,
		0,0,0,122,121,1,0,0,0,123,7,1,0,0,0,124,125,5,31,0,0,125,126,5,28,0,0,
		126,127,3,76,38,0,127,9,1,0,0,0,128,130,5,27,0,0,129,128,1,0,0,0,129,130,
		1,0,0,0,130,131,1,0,0,0,131,132,5,26,0,0,132,135,7,0,0,0,133,134,5,11,
		0,0,134,136,5,45,0,0,135,133,1,0,0,0,135,136,1,0,0,0,136,137,1,0,0,0,137,
		138,5,13,0,0,138,139,3,24,12,0,139,140,3,76,38,0,140,11,1,0,0,0,141,142,
		5,33,0,0,142,143,3,22,11,0,143,144,3,76,38,0,144,13,1,0,0,0,145,146,5,
		34,0,0,146,147,3,22,11,0,147,148,3,76,38,0,148,15,1,0,0,0,149,150,5,35,
		0,0,150,151,3,40,20,0,151,152,3,76,38,0,152,17,1,0,0,0,153,154,3,34,17,
		0,154,155,3,76,38,0,155,19,1,0,0,0,156,157,5,32,0,0,157,158,3,76,38,0,
		158,21,1,0,0,0,159,163,3,48,24,0,160,163,3,26,13,0,161,163,3,40,20,0,162,
		159,1,0,0,0,162,160,1,0,0,0,162,161,1,0,0,0,163,23,1,0,0,0,164,174,3,52,
		26,0,165,174,3,54,27,0,166,174,3,34,17,0,167,174,3,60,30,0,168,174,3,40,
		20,0,169,174,3,30,15,0,170,174,3,48,24,0,171,174,3,26,13,0,172,174,3,56,
		28,0,173,164,1,0,0,0,173,165,1,0,0,0,173,166,1,0,0,0,173,167,1,0,0,0,173,
		168,1,0,0,0,173,169,1,0,0,0,173,170,1,0,0,0,173,171,1,0,0,0,173,172,1,
		0,0,0,174,25,1,0,0,0,175,179,5,49,0,0,176,178,3,28,14,0,177,176,1,0,0,
		0,178,181,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,182,1,0,0,0,181,
		179,1,0,0,0,182,183,5,49,0,0,183,27,1,0,0,0,184,190,5,53,0,0,185,186,5,
		52,0,0,186,187,3,40,20,0,187,188,5,8,0,0,188,190,1,0,0,0,189,184,1,0,0,
		0,189,185,1,0,0,0,190,29,1,0,0,0,191,192,6,15,-1,0,192,193,5,5,0,0,193,
		194,3,30,15,0,194,195,5,6,0,0,195,198,1,0,0,0,196,198,3,32,16,0,197,191,
		1,0,0,0,197,196,1,0,0,0,198,207,1,0,0,0,199,200,10,4,0,0,200,201,7,1,0,
		0,201,206,3,30,15,5,202,203,10,3,0,0,203,204,7,2,0,0,204,206,3,30,15,4,
		205,199,1,0,0,0,205,202,1,0,0,0,206,209,1,0,0,0,207,205,1,0,0,0,207,208,
		1,0,0,0,208,31,1,0,0,0,209,207,1,0,0,0,210,214,1,0,0,0,211,214,5,42,0,
		0,212,214,3,40,20,0,213,210,1,0,0,0,213,211,1,0,0,0,213,212,1,0,0,0,214,
		33,1,0,0,0,215,216,5,48,0,0,216,225,5,5,0,0,217,222,3,36,18,0,218,219,
		5,11,0,0,219,221,3,36,18,0,220,218,1,0,0,0,221,224,1,0,0,0,222,220,1,0,
		0,0,222,223,1,0,0,0,223,226,1,0,0,0,224,222,1,0,0,0,225,217,1,0,0,0,225,
		226,1,0,0,0,226,227,1,0,0,0,227,228,5,6,0,0,228,35,1,0,0,0,229,230,5,45,
		0,0,230,231,5,10,0,0,231,232,3,38,19,0,232,37,1,0,0,0,233,240,3,50,25,
		0,234,240,3,48,24,0,235,240,3,52,26,0,236,240,3,54,27,0,237,240,3,40,20,
		0,238,240,3,30,15,0,239,233,1,0,0,0,239,234,1,0,0,0,239,235,1,0,0,0,239,
		236,1,0,0,0,239,237,1,0,0,0,239,238,1,0,0,0,240,39,1,0,0,0,241,242,3,42,
		21,0,242,248,4,20,2,0,243,244,5,12,0,0,244,245,4,20,3,0,245,247,3,42,21,
		0,246,243,1,0,0,0,247,250,1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,0,249,
		41,1,0,0,0,250,248,1,0,0,0,251,252,5,45,0,0,252,254,4,21,4,0,253,255,3,
		44,22,0,254,253,1,0,0,0,254,255,1,0,0,0,255,43,1,0,0,0,256,257,5,3,0,0,
		257,258,4,22,5,0,258,259,3,46,23,0,259,260,4,22,6,0,260,261,5,4,0,0,261,
		45,1,0,0,0,262,266,3,50,25,0,263,266,3,40,20,0,264,266,3,34,17,0,265,262,
		1,0,0,0,265,263,1,0,0,0,265,264,1,0,0,0,266,47,1,0,0,0,267,268,5,43,0,
		0,268,49,1,0,0,0,269,270,5,42,0,0,270,51,1,0,0,0,271,272,7,3,0,0,272,53,
		1,0,0,0,273,274,5,44,0,0,274,55,1,0,0,0,275,276,5,3,0,0,276,281,3,58,29,
		0,277,278,5,11,0,0,278,280,3,58,29,0,279,277,1,0,0,0,280,283,1,0,0,0,281,
		279,1,0,0,0,281,282,1,0,0,0,282,284,1,0,0,0,283,281,1,0,0,0,284,285,5,
		4,0,0,285,289,1,0,0,0,286,287,5,3,0,0,287,289,5,4,0,0,288,275,1,0,0,0,
		288,286,1,0,0,0,289,57,1,0,0,0,290,298,3,52,26,0,291,298,3,54,27,0,292,
		298,3,34,17,0,293,298,3,40,20,0,294,298,3,30,15,0,295,298,3,48,24,0,296,
		298,3,26,13,0,297,290,1,0,0,0,297,291,1,0,0,0,297,292,1,0,0,0,297,293,
		1,0,0,0,297,294,1,0,0,0,297,295,1,0,0,0,297,296,1,0,0,0,298,59,1,0,0,0,
		299,300,5,7,0,0,300,305,3,62,31,0,301,302,5,11,0,0,302,304,3,62,31,0,303,
		301,1,0,0,0,304,307,1,0,0,0,305,303,1,0,0,0,305,306,1,0,0,0,306,308,1,
		0,0,0,307,305,1,0,0,0,308,309,5,9,0,0,309,313,1,0,0,0,310,311,5,7,0,0,
		311,313,5,9,0,0,312,299,1,0,0,0,312,310,1,0,0,0,313,61,1,0,0,0,314,315,
		5,45,0,0,315,316,5,10,0,0,316,317,3,24,12,0,317,63,1,0,0,0,318,319,6,32,
		-1,0,319,328,3,66,33,0,320,328,3,74,37,0,321,322,5,5,0,0,322,323,3,64,
		32,0,323,324,5,6,0,0,324,328,1,0,0,0,325,326,5,39,0,0,326,328,3,64,32,
		1,327,318,1,0,0,0,327,320,1,0,0,0,327,321,1,0,0,0,327,325,1,0,0,0,328,
		335,1,0,0,0,329,330,10,3,0,0,330,331,3,68,34,0,331,332,3,64,32,4,332,334,
		1,0,0,0,333,329,1,0,0,0,334,337,1,0,0,0,335,333,1,0,0,0,335,336,1,0,0,
		0,336,65,1,0,0,0,337,335,1,0,0,0,338,339,3,72,36,0,339,340,3,70,35,0,340,
		341,3,72,36,0,341,67,1,0,0,0,342,343,7,4,0,0,343,69,1,0,0,0,344,345,7,
		5,0,0,345,71,1,0,0,0,346,354,3,40,20,0,347,354,3,48,24,0,348,354,3,50,
		25,0,349,354,3,52,26,0,350,354,3,54,27,0,351,354,3,34,17,0,352,354,3,30,
		15,0,353,346,1,0,0,0,353,347,1,0,0,0,353,348,1,0,0,0,353,349,1,0,0,0,353,
		350,1,0,0,0,353,351,1,0,0,0,353,352,1,0,0,0,354,73,1,0,0,0,355,359,3,52,
		26,0,356,359,3,40,20,0,357,359,3,34,17,0,358,355,1,0,0,0,358,356,1,0,0,
		0,358,357,1,0,0,0,359,75,1,0,0,0,360,363,5,0,0,1,361,363,4,38,8,0,362,
		360,1,0,0,0,362,361,1,0,0,0,363,77,1,0,0,0,33,81,86,88,97,111,114,122,
		129,135,162,173,179,189,197,205,207,213,222,225,239,248,254,265,281,288,
		297,305,312,327,335,353,358,362
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Simpleflow.Parser
