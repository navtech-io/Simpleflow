//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Navtech\Opensource\Simpleflow\src\Simpleflow\Parser\Grammar\SimpleflowLexer.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Simpleflow.Parser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
internal partial class SimpleflowLexer : SimpleflowLexerBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WhiteSpaces=1, LineTerminator=2, MultiLineComment=3, SingleLineComment=4, 
		OpenBrace=5, TemplateCloseBrace=6, CloseBrace=7, OpenParen=8, CloseParen=9, 
		Colon=10, Comma=11, Dot=12, Assign=13, PlusOp=14, MinusOp=15, TimesOp=16, 
		DivOp=17, ModuloOp=18, GreaterThan=19, GreaterThanEqual=20, LessThan=21, 
		LessThanEqual=22, Equal=23, NotEqual=24, Contains=25, Let=26, Set=27, 
		Partial=28, Rule=29, When=30, Then=31, End=32, Exit=33, Message=34, Error=35, 
		Output=36, And=37, Or=38, Not=39, True=40, False=41, Number=42, String=43, 
		None=44, Identifier=45, IgnoreIdentifier=46, FunctionName=47, BackTick=48, 
		TemplateStringStartExpression=49, TemplateStringAtom=50;
	public const int
		ERROR=2;
	public const int
		TEMPLATE=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "TEMPLATE"
	};

	public static readonly string[] ruleNames = {
		"WhiteSpaces", "LineTerminator", "MultiLineComment", "SingleLineComment", 
		"OpenBrace", "TemplateCloseBrace", "CloseBrace", "OpenParen", "CloseParen", 
		"Colon", "Comma", "Dot", "Assign", "PlusOp", "MinusOp", "TimesOp", "DivOp", 
		"ModuloOp", "GreaterThan", "GreaterThanEqual", "LessThan", "LessThanEqual", 
		"Equal", "NotEqual", "Contains", "Let", "Set", "Partial", "Rule", "When", 
		"Then", "End", "Exit", "Message", "Error", "Output", "And", "Or", "Not", 
		"True", "False", "Number", "String", "None", "Identifier", "IgnoreIdentifier", 
		"FunctionName", "BackTick", "BackTickInside", "TemplateStringStartExpression", 
		"TemplateStringAtom", "NAME", "PLUS_FRAGMENT", "MINUS_FRAGMENT"
	};


	public SimpleflowLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SimpleflowLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'}'", "'('", "')'", "':'", 
		"','", "'.'", "'='", "'+'", "'-'", "'*'", "'/'", "'%'", "'>'", "'>='", 
		"'<'", "'<='", "'=='", "'!='", "'contains'", "'let'", "'set'", "'partial'", 
		"'rule'", "'when'", "'then'", "'end'", "'exit'", "'message'", "'error'", 
		"'output'", "'and'", "'or'", "'not'", "'true'", "'false'", null, null, 
		"'none'", null, "'_'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WhiteSpaces", "LineTerminator", "MultiLineComment", "SingleLineComment", 
		"OpenBrace", "TemplateCloseBrace", "CloseBrace", "OpenParen", "CloseParen", 
		"Colon", "Comma", "Dot", "Assign", "PlusOp", "MinusOp", "TimesOp", "DivOp", 
		"ModuloOp", "GreaterThan", "GreaterThanEqual", "LessThan", "LessThanEqual", 
		"Equal", "NotEqual", "Contains", "Let", "Set", "Partial", "Rule", "When", 
		"Then", "End", "Exit", "Message", "Error", "Output", "And", "Or", "Not", 
		"True", "False", "Number", "String", "None", "Identifier", "IgnoreIdentifier", 
		"FunctionName", "BackTick", "TemplateStringStartExpression", "TemplateStringAtom"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SimpleflowLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SimpleflowLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 47 : BackTick_action(_localctx, actionIndex); break;
		case 48 : BackTickInside_action(_localctx, actionIndex); break;
		}
	}
	private void BackTick_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0: this.IncreaseTemplateDepth(); break;
		}
	}
	private void BackTickInside_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 1: this.DecreaseTemplateDepth(); break;
		}
	}
	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5 : return TemplateCloseBrace_sempred(_localctx, predIndex);
		}
		return true;
	}
	private bool TemplateCloseBrace_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return this.IsInTemplateString();
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,0,50,373,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
		6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
		2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,
		2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,
		2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,
		2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
		2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
		2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,1,0,4,0,112,8,0,11,0,
		12,0,113,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,5,2,126,8,2,10,2,12,2,
		129,9,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,5,3,138,8,3,10,3,12,3,141,9,3,1,3,
		1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,
		10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,
		17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,
		23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,
		25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
		28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,
		30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,
		33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,
		35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,
		39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,41,3,41,285,8,41,
		1,41,4,41,288,8,41,11,41,12,41,289,1,41,1,41,4,41,294,8,41,11,41,12,41,
		295,3,41,298,8,41,1,42,1,42,1,42,1,42,5,42,304,8,42,10,42,12,42,307,9,
		42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,44,5,44,317,8,44,10,44,12,44,320,
		9,44,1,44,1,44,5,44,324,8,44,10,44,12,44,327,9,44,1,45,1,45,1,46,1,46,
		1,46,1,46,5,46,335,8,46,10,46,12,46,338,9,46,1,47,1,47,1,47,1,47,1,47,
		1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,50,1,50,1,51,5,51,
		358,8,51,10,51,12,51,361,9,51,1,51,1,51,5,51,365,8,51,10,51,12,51,368,
		9,51,1,52,1,52,1,53,1,53,2,127,305,0,54,2,1,4,2,6,3,8,4,10,5,12,6,14,7,
		16,8,18,9,20,10,22,11,24,12,26,13,28,14,30,15,32,16,34,17,36,18,38,19,
		40,20,42,21,44,22,46,23,48,24,50,25,52,26,54,27,56,28,58,29,60,30,62,31,
		64,32,66,33,68,34,70,35,72,36,74,37,76,38,78,39,80,40,82,41,84,42,86,43,
		88,44,90,45,92,46,94,47,96,48,98,0,100,49,102,50,104,0,106,0,108,0,2,0,
		1,9,4,0,9,9,11,12,32,32,160,160,3,0,10,10,13,13,8232,8233,2,0,43,43,45,
		45,1,0,48,57,3,0,10,10,13,13,34,34,1,0,95,95,2,0,65,90,97,122,4,0,48,57,
		65,90,95,95,97,122,1,0,96,96,382,0,2,1,0,0,0,0,4,1,0,0,0,0,6,1,0,0,0,0,
		8,1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,0,16,1,0,0,0,0,18,1,0,
		0,0,0,20,1,0,0,0,0,22,1,0,0,0,0,24,1,0,0,0,0,26,1,0,0,0,0,28,1,0,0,0,0,
		30,1,0,0,0,0,32,1,0,0,0,0,34,1,0,0,0,0,36,1,0,0,0,0,38,1,0,0,0,0,40,1,
		0,0,0,0,42,1,0,0,0,0,44,1,0,0,0,0,46,1,0,0,0,0,48,1,0,0,0,0,50,1,0,0,0,
		0,52,1,0,0,0,0,54,1,0,0,0,0,56,1,0,0,0,0,58,1,0,0,0,0,60,1,0,0,0,0,62,
		1,0,0,0,0,64,1,0,0,0,0,66,1,0,0,0,0,68,1,0,0,0,0,70,1,0,0,0,0,72,1,0,0,
		0,0,74,1,0,0,0,0,76,1,0,0,0,0,78,1,0,0,0,0,80,1,0,0,0,0,82,1,0,0,0,0,84,
		1,0,0,0,0,86,1,0,0,0,0,88,1,0,0,0,0,90,1,0,0,0,0,92,1,0,0,0,0,94,1,0,0,
		0,0,96,1,0,0,0,1,98,1,0,0,0,1,100,1,0,0,0,1,102,1,0,0,0,2,111,1,0,0,0,
		4,117,1,0,0,0,6,121,1,0,0,0,8,135,1,0,0,0,10,144,1,0,0,0,12,146,1,0,0,
		0,14,151,1,0,0,0,16,153,1,0,0,0,18,155,1,0,0,0,20,157,1,0,0,0,22,159,1,
		0,0,0,24,161,1,0,0,0,26,163,1,0,0,0,28,165,1,0,0,0,30,167,1,0,0,0,32,169,
		1,0,0,0,34,171,1,0,0,0,36,173,1,0,0,0,38,175,1,0,0,0,40,177,1,0,0,0,42,
		180,1,0,0,0,44,182,1,0,0,0,46,185,1,0,0,0,48,188,1,0,0,0,50,191,1,0,0,
		0,52,200,1,0,0,0,54,204,1,0,0,0,56,208,1,0,0,0,58,216,1,0,0,0,60,221,1,
		0,0,0,62,226,1,0,0,0,64,231,1,0,0,0,66,235,1,0,0,0,68,240,1,0,0,0,70,248,
		1,0,0,0,72,254,1,0,0,0,74,261,1,0,0,0,76,265,1,0,0,0,78,268,1,0,0,0,80,
		272,1,0,0,0,82,277,1,0,0,0,84,284,1,0,0,0,86,299,1,0,0,0,88,310,1,0,0,
		0,90,318,1,0,0,0,92,328,1,0,0,0,94,330,1,0,0,0,96,339,1,0,0,0,98,344,1,
		0,0,0,100,350,1,0,0,0,102,354,1,0,0,0,104,359,1,0,0,0,106,369,1,0,0,0,
		108,371,1,0,0,0,110,112,7,0,0,0,111,110,1,0,0,0,112,113,1,0,0,0,113,111,
		1,0,0,0,113,114,1,0,0,0,114,115,1,0,0,0,115,116,6,0,0,0,116,3,1,0,0,0,
		117,118,7,1,0,0,118,119,1,0,0,0,119,120,6,1,0,0,120,5,1,0,0,0,121,122,
		5,47,0,0,122,123,5,42,0,0,123,127,1,0,0,0,124,126,9,0,0,0,125,124,1,0,
		0,0,126,129,1,0,0,0,127,128,1,0,0,0,127,125,1,0,0,0,128,130,1,0,0,0,129,
		127,1,0,0,0,130,131,5,42,0,0,131,132,5,47,0,0,132,133,1,0,0,0,133,134,
		6,2,0,0,134,7,1,0,0,0,135,139,5,35,0,0,136,138,8,1,0,0,137,136,1,0,0,0,
		138,141,1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,142,1,0,0,0,141,139,
		1,0,0,0,142,143,6,3,0,0,143,9,1,0,0,0,144,145,5,123,0,0,145,11,1,0,0,0,
		146,147,4,5,0,0,147,148,5,125,0,0,148,149,1,0,0,0,149,150,6,5,1,0,150,
		13,1,0,0,0,151,152,5,125,0,0,152,15,1,0,0,0,153,154,5,40,0,0,154,17,1,
		0,0,0,155,156,5,41,0,0,156,19,1,0,0,0,157,158,5,58,0,0,158,21,1,0,0,0,
		159,160,5,44,0,0,160,23,1,0,0,0,161,162,5,46,0,0,162,25,1,0,0,0,163,164,
		5,61,0,0,164,27,1,0,0,0,165,166,5,43,0,0,166,29,1,0,0,0,167,168,5,45,0,
		0,168,31,1,0,0,0,169,170,5,42,0,0,170,33,1,0,0,0,171,172,5,47,0,0,172,
		35,1,0,0,0,173,174,5,37,0,0,174,37,1,0,0,0,175,176,5,62,0,0,176,39,1,0,
		0,0,177,178,5,62,0,0,178,179,5,61,0,0,179,41,1,0,0,0,180,181,5,60,0,0,
		181,43,1,0,0,0,182,183,5,60,0,0,183,184,5,61,0,0,184,45,1,0,0,0,185,186,
		5,61,0,0,186,187,5,61,0,0,187,47,1,0,0,0,188,189,5,33,0,0,189,190,5,61,
		0,0,190,49,1,0,0,0,191,192,5,99,0,0,192,193,5,111,0,0,193,194,5,110,0,
		0,194,195,5,116,0,0,195,196,5,97,0,0,196,197,5,105,0,0,197,198,5,110,0,
		0,198,199,5,115,0,0,199,51,1,0,0,0,200,201,5,108,0,0,201,202,5,101,0,0,
		202,203,5,116,0,0,203,53,1,0,0,0,204,205,5,115,0,0,205,206,5,101,0,0,206,
		207,5,116,0,0,207,55,1,0,0,0,208,209,5,112,0,0,209,210,5,97,0,0,210,211,
		5,114,0,0,211,212,5,116,0,0,212,213,5,105,0,0,213,214,5,97,0,0,214,215,
		5,108,0,0,215,57,1,0,0,0,216,217,5,114,0,0,217,218,5,117,0,0,218,219,5,
		108,0,0,219,220,5,101,0,0,220,59,1,0,0,0,221,222,5,119,0,0,222,223,5,104,
		0,0,223,224,5,101,0,0,224,225,5,110,0,0,225,61,1,0,0,0,226,227,5,116,0,
		0,227,228,5,104,0,0,228,229,5,101,0,0,229,230,5,110,0,0,230,63,1,0,0,0,
		231,232,5,101,0,0,232,233,5,110,0,0,233,234,5,100,0,0,234,65,1,0,0,0,235,
		236,5,101,0,0,236,237,5,120,0,0,237,238,5,105,0,0,238,239,5,116,0,0,239,
		67,1,0,0,0,240,241,5,109,0,0,241,242,5,101,0,0,242,243,5,115,0,0,243,244,
		5,115,0,0,244,245,5,97,0,0,245,246,5,103,0,0,246,247,5,101,0,0,247,69,
		1,0,0,0,248,249,5,101,0,0,249,250,5,114,0,0,250,251,5,114,0,0,251,252,
		5,111,0,0,252,253,5,114,0,0,253,71,1,0,0,0,254,255,5,111,0,0,255,256,5,
		117,0,0,256,257,5,116,0,0,257,258,5,112,0,0,258,259,5,117,0,0,259,260,
		5,116,0,0,260,73,1,0,0,0,261,262,5,97,0,0,262,263,5,110,0,0,263,264,5,
		100,0,0,264,75,1,0,0,0,265,266,5,111,0,0,266,267,5,114,0,0,267,77,1,0,
		0,0,268,269,5,110,0,0,269,270,5,111,0,0,270,271,5,116,0,0,271,79,1,0,0,
		0,272,273,5,116,0,0,273,274,5,114,0,0,274,275,5,117,0,0,275,276,5,101,
		0,0,276,81,1,0,0,0,277,278,5,102,0,0,278,279,5,97,0,0,279,280,5,108,0,
		0,280,281,5,115,0,0,281,282,5,101,0,0,282,83,1,0,0,0,283,285,7,2,0,0,284,
		283,1,0,0,0,284,285,1,0,0,0,285,287,1,0,0,0,286,288,7,3,0,0,287,286,1,
		0,0,0,288,289,1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,0,290,297,1,0,0,0,
		291,293,5,46,0,0,292,294,7,3,0,0,293,292,1,0,0,0,294,295,1,0,0,0,295,293,
		1,0,0,0,295,296,1,0,0,0,296,298,1,0,0,0,297,291,1,0,0,0,297,298,1,0,0,
		0,298,85,1,0,0,0,299,305,5,34,0,0,300,301,5,92,0,0,301,304,5,34,0,0,302,
		304,8,4,0,0,303,300,1,0,0,0,303,302,1,0,0,0,304,307,1,0,0,0,305,306,1,
		0,0,0,305,303,1,0,0,0,306,308,1,0,0,0,307,305,1,0,0,0,308,309,5,34,0,0,
		309,87,1,0,0,0,310,311,5,110,0,0,311,312,5,111,0,0,312,313,5,110,0,0,313,
		314,5,101,0,0,314,89,1,0,0,0,315,317,7,5,0,0,316,315,1,0,0,0,317,320,1,
		0,0,0,318,316,1,0,0,0,318,319,1,0,0,0,319,321,1,0,0,0,320,318,1,0,0,0,
		321,325,7,6,0,0,322,324,7,7,0,0,323,322,1,0,0,0,324,327,1,0,0,0,325,323,
		1,0,0,0,325,326,1,0,0,0,326,91,1,0,0,0,327,325,1,0,0,0,328,329,5,95,0,
		0,329,93,1,0,0,0,330,331,5,36,0,0,331,336,3,104,51,0,332,333,5,46,0,0,
		333,335,3,104,51,0,334,332,1,0,0,0,335,338,1,0,0,0,336,334,1,0,0,0,336,
		337,1,0,0,0,337,95,1,0,0,0,338,336,1,0,0,0,339,340,5,96,0,0,340,341,6,
		47,2,0,341,342,1,0,0,0,342,343,6,47,3,0,343,97,1,0,0,0,344,345,5,96,0,
		0,345,346,6,48,4,0,346,347,1,0,0,0,347,348,6,48,5,0,348,349,6,48,1,0,349,
		99,1,0,0,0,350,351,5,123,0,0,351,352,1,0,0,0,352,353,6,49,6,0,353,101,
		1,0,0,0,354,355,8,8,0,0,355,103,1,0,0,0,356,358,7,5,0,0,357,356,1,0,0,
		0,358,361,1,0,0,0,359,357,1,0,0,0,359,360,1,0,0,0,360,362,1,0,0,0,361,
		359,1,0,0,0,362,366,7,6,0,0,363,365,7,7,0,0,364,363,1,0,0,0,365,368,1,
		0,0,0,366,364,1,0,0,0,366,367,1,0,0,0,367,105,1,0,0,0,368,366,1,0,0,0,
		369,370,5,43,0,0,370,107,1,0,0,0,371,372,5,45,0,0,372,109,1,0,0,0,16,0,
		1,113,127,139,284,289,295,297,303,305,318,325,336,359,366,7,0,1,0,4,0,
		0,1,47,0,5,1,0,1,48,1,7,48,0,5,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Simpleflow.Parser
