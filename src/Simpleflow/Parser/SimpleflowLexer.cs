//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Navtech\Opensource\Simpleflow\src\Simpleflow\Parser\Grammar\Simpleflow.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Simpleflow.Parser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
internal partial class SimpleflowLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		Rule=10, When=11, Then=12, Message=13, Error=14, Output=15, Let=16, Set=17, 
		Assign=18, LineBreak=19, Skip_=20, And=21, Or=22, Not=23, GreaterThan=24, 
		GreaterThanEqual=25, LessThan=26, LessThanEqual=27, Equal=28, NotEqual=29, 
		Contains=30, OpenParen=31, CloseParen=32, Number=33, String=34, None=35, 
		Identifier=36, PlusOp=37, MinusOp=38, TimesOp=39, DivOp=40, FunctionName=41;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"Rule", "When", "Then", "Message", "Error", "Output", "Let", "Set", "Assign", 
		"LineBreak", "Skip_", "SPACES", "COMMENT", "And", "Or", "Not", "GreaterThan", 
		"GreaterThanEqual", "LessThan", "LessThanEqual", "Equal", "NotEqual", 
		"Contains", "OpenParen", "CloseParen", "Number", "String", "None", "Identifier", 
		"PlusOp", "MinusOp", "TimesOp", "DivOp", "PLUS_FRAGMENT", "MINUS_FRAGMENT", 
		"FunctionName", "NAME"
	};


	public SimpleflowLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SimpleflowLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'end'", "'exit'", "'.'", "'true'", "'false'", "','", "':'", "'{'", 
		"'}'", "'rule'", "'when'", "'then'", "'message'", "'error'", "'output'", 
		"'let'", "'set'", "'='", null, null, "'and'", "'or'", "'not'", "'>'", 
		"'>='", "'<'", "'<='", "'=='", "'!='", "'contains'", "'('", "')'", null, 
		null, "'none'", null, "'+'", "'-'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "Rule", "When", 
		"Then", "Message", "Error", "Output", "Let", "Set", "Assign", "LineBreak", 
		"Skip_", "And", "Or", "Not", "GreaterThan", "GreaterThanEqual", "LessThan", 
		"LessThanEqual", "Equal", "NotEqual", "Contains", "OpenParen", "CloseParen", 
		"Number", "String", "None", "Identifier", "PlusOp", "MinusOp", "TimesOp", 
		"DivOp", "FunctionName"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Simpleflow.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SimpleflowLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,41,328,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,
		1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,
		7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,
		11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,
		13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,
		16,1,16,1,16,1,16,1,17,1,17,1,18,4,18,171,8,18,11,18,12,18,172,1,18,5,
		18,176,8,18,10,18,12,18,179,9,18,1,19,1,19,3,19,183,8,19,1,19,1,19,1,20,
		4,20,188,8,20,11,20,12,20,189,1,21,1,21,1,21,1,21,5,21,196,8,21,10,21,
		12,21,199,9,21,1,21,1,21,1,21,1,21,5,21,205,8,21,10,21,12,21,208,9,21,
		1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,26,
		1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,
		1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,34,3,34,
		251,8,34,1,34,4,34,254,8,34,11,34,12,34,255,1,34,1,34,4,34,260,8,34,11,
		34,12,34,261,3,34,264,8,34,1,35,1,35,1,35,1,35,5,35,270,8,35,10,35,12,
		35,273,9,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,37,5,37,283,8,37,10,37,
		12,37,286,9,37,1,37,1,37,5,37,290,8,37,10,37,12,37,293,9,37,1,38,1,38,
		1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,44,1,44,
		5,44,311,8,44,10,44,12,44,314,9,44,1,45,5,45,317,8,45,10,45,12,45,320,
		9,45,1,45,1,45,5,45,324,8,45,10,45,12,45,327,9,45,2,197,271,0,46,1,1,3,
		2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
		31,16,33,17,35,18,37,19,39,20,41,0,43,0,45,21,47,22,49,23,51,24,53,25,
		55,26,57,27,59,28,61,29,63,30,65,31,67,32,69,33,71,34,73,35,75,36,77,37,
		79,38,81,39,83,40,85,0,87,0,89,41,91,0,1,0,9,2,0,10,10,13,13,3,0,9,10,
		13,13,32,32,2,0,9,9,32,32,2,0,43,43,45,45,1,0,48,57,3,0,10,10,13,13,34,
		34,1,0,95,95,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,339,0,1,1,0,
		0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
		1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
		0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
		1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
		0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
		1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
		0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
		1,0,0,0,0,89,1,0,0,0,1,93,1,0,0,0,3,97,1,0,0,0,5,102,1,0,0,0,7,104,1,0,
		0,0,9,109,1,0,0,0,11,115,1,0,0,0,13,117,1,0,0,0,15,119,1,0,0,0,17,121,
		1,0,0,0,19,123,1,0,0,0,21,128,1,0,0,0,23,133,1,0,0,0,25,138,1,0,0,0,27,
		146,1,0,0,0,29,152,1,0,0,0,31,159,1,0,0,0,33,163,1,0,0,0,35,167,1,0,0,
		0,37,170,1,0,0,0,39,182,1,0,0,0,41,187,1,0,0,0,43,191,1,0,0,0,45,209,1,
		0,0,0,47,213,1,0,0,0,49,216,1,0,0,0,51,220,1,0,0,0,53,222,1,0,0,0,55,225,
		1,0,0,0,57,227,1,0,0,0,59,230,1,0,0,0,61,233,1,0,0,0,63,236,1,0,0,0,65,
		245,1,0,0,0,67,247,1,0,0,0,69,250,1,0,0,0,71,265,1,0,0,0,73,276,1,0,0,
		0,75,284,1,0,0,0,77,294,1,0,0,0,79,296,1,0,0,0,81,298,1,0,0,0,83,300,1,
		0,0,0,85,302,1,0,0,0,87,304,1,0,0,0,89,306,1,0,0,0,91,318,1,0,0,0,93,94,
		5,101,0,0,94,95,5,110,0,0,95,96,5,100,0,0,96,2,1,0,0,0,97,98,5,101,0,0,
		98,99,5,120,0,0,99,100,5,105,0,0,100,101,5,116,0,0,101,4,1,0,0,0,102,103,
		5,46,0,0,103,6,1,0,0,0,104,105,5,116,0,0,105,106,5,114,0,0,106,107,5,117,
		0,0,107,108,5,101,0,0,108,8,1,0,0,0,109,110,5,102,0,0,110,111,5,97,0,0,
		111,112,5,108,0,0,112,113,5,115,0,0,113,114,5,101,0,0,114,10,1,0,0,0,115,
		116,5,44,0,0,116,12,1,0,0,0,117,118,5,58,0,0,118,14,1,0,0,0,119,120,5,
		123,0,0,120,16,1,0,0,0,121,122,5,125,0,0,122,18,1,0,0,0,123,124,5,114,
		0,0,124,125,5,117,0,0,125,126,5,108,0,0,126,127,5,101,0,0,127,20,1,0,0,
		0,128,129,5,119,0,0,129,130,5,104,0,0,130,131,5,101,0,0,131,132,5,110,
		0,0,132,22,1,0,0,0,133,134,5,116,0,0,134,135,5,104,0,0,135,136,5,101,0,
		0,136,137,5,110,0,0,137,24,1,0,0,0,138,139,5,109,0,0,139,140,5,101,0,0,
		140,141,5,115,0,0,141,142,5,115,0,0,142,143,5,97,0,0,143,144,5,103,0,0,
		144,145,5,101,0,0,145,26,1,0,0,0,146,147,5,101,0,0,147,148,5,114,0,0,148,
		149,5,114,0,0,149,150,5,111,0,0,150,151,5,114,0,0,151,28,1,0,0,0,152,153,
		5,111,0,0,153,154,5,117,0,0,154,155,5,116,0,0,155,156,5,112,0,0,156,157,
		5,117,0,0,157,158,5,116,0,0,158,30,1,0,0,0,159,160,5,108,0,0,160,161,5,
		101,0,0,161,162,5,116,0,0,162,32,1,0,0,0,163,164,5,115,0,0,164,165,5,101,
		0,0,165,166,5,116,0,0,166,34,1,0,0,0,167,168,5,61,0,0,168,36,1,0,0,0,169,
		171,7,0,0,0,170,169,1,0,0,0,171,172,1,0,0,0,172,170,1,0,0,0,172,173,1,
		0,0,0,173,177,1,0,0,0,174,176,7,1,0,0,175,174,1,0,0,0,176,179,1,0,0,0,
		177,175,1,0,0,0,177,178,1,0,0,0,178,38,1,0,0,0,179,177,1,0,0,0,180,183,
		3,41,20,0,181,183,3,43,21,0,182,180,1,0,0,0,182,181,1,0,0,0,183,184,1,
		0,0,0,184,185,6,19,0,0,185,40,1,0,0,0,186,188,7,2,0,0,187,186,1,0,0,0,
		188,189,1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,190,42,1,0,0,0,191,192,
		5,47,0,0,192,193,5,42,0,0,193,197,1,0,0,0,194,196,9,0,0,0,195,194,1,0,
		0,0,196,199,1,0,0,0,197,198,1,0,0,0,197,195,1,0,0,0,198,200,1,0,0,0,199,
		197,1,0,0,0,200,201,5,42,0,0,201,202,5,47,0,0,202,206,1,0,0,0,203,205,
		7,0,0,0,204,203,1,0,0,0,205,208,1,0,0,0,206,204,1,0,0,0,206,207,1,0,0,
		0,207,44,1,0,0,0,208,206,1,0,0,0,209,210,5,97,0,0,210,211,5,110,0,0,211,
		212,5,100,0,0,212,46,1,0,0,0,213,214,5,111,0,0,214,215,5,114,0,0,215,48,
		1,0,0,0,216,217,5,110,0,0,217,218,5,111,0,0,218,219,5,116,0,0,219,50,1,
		0,0,0,220,221,5,62,0,0,221,52,1,0,0,0,222,223,5,62,0,0,223,224,5,61,0,
		0,224,54,1,0,0,0,225,226,5,60,0,0,226,56,1,0,0,0,227,228,5,60,0,0,228,
		229,5,61,0,0,229,58,1,0,0,0,230,231,5,61,0,0,231,232,5,61,0,0,232,60,1,
		0,0,0,233,234,5,33,0,0,234,235,5,61,0,0,235,62,1,0,0,0,236,237,5,99,0,
		0,237,238,5,111,0,0,238,239,5,110,0,0,239,240,5,116,0,0,240,241,5,97,0,
		0,241,242,5,105,0,0,242,243,5,110,0,0,243,244,5,115,0,0,244,64,1,0,0,0,
		245,246,5,40,0,0,246,66,1,0,0,0,247,248,5,41,0,0,248,68,1,0,0,0,249,251,
		7,3,0,0,250,249,1,0,0,0,250,251,1,0,0,0,251,253,1,0,0,0,252,254,7,4,0,
		0,253,252,1,0,0,0,254,255,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,
		263,1,0,0,0,257,259,5,46,0,0,258,260,7,4,0,0,259,258,1,0,0,0,260,261,1,
		0,0,0,261,259,1,0,0,0,261,262,1,0,0,0,262,264,1,0,0,0,263,257,1,0,0,0,
		263,264,1,0,0,0,264,70,1,0,0,0,265,271,5,34,0,0,266,267,5,92,0,0,267,270,
		5,34,0,0,268,270,8,5,0,0,269,266,1,0,0,0,269,268,1,0,0,0,270,273,1,0,0,
		0,271,272,1,0,0,0,271,269,1,0,0,0,272,274,1,0,0,0,273,271,1,0,0,0,274,
		275,5,34,0,0,275,72,1,0,0,0,276,277,5,110,0,0,277,278,5,111,0,0,278,279,
		5,110,0,0,279,280,5,101,0,0,280,74,1,0,0,0,281,283,7,6,0,0,282,281,1,0,
		0,0,283,286,1,0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,287,1,0,0,0,286,
		284,1,0,0,0,287,291,7,7,0,0,288,290,7,8,0,0,289,288,1,0,0,0,290,293,1,
		0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,76,1,0,0,0,293,291,1,0,0,0,294,
		295,5,43,0,0,295,78,1,0,0,0,296,297,5,45,0,0,297,80,1,0,0,0,298,299,5,
		42,0,0,299,82,1,0,0,0,300,301,5,47,0,0,301,84,1,0,0,0,302,303,5,43,0,0,
		303,86,1,0,0,0,304,305,5,45,0,0,305,88,1,0,0,0,306,307,5,36,0,0,307,312,
		3,91,45,0,308,309,5,46,0,0,309,311,3,91,45,0,310,308,1,0,0,0,311,314,1,
		0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,90,1,0,0,0,314,312,1,0,0,0,315,
		317,7,6,0,0,316,315,1,0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,318,319,1,
		0,0,0,319,321,1,0,0,0,320,318,1,0,0,0,321,325,7,7,0,0,322,324,7,8,0,0,
		323,322,1,0,0,0,324,327,1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,92,
		1,0,0,0,327,325,1,0,0,0,18,0,172,177,182,189,197,206,250,255,261,263,269,
		271,284,291,312,318,325,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Simpleflow.Parser
