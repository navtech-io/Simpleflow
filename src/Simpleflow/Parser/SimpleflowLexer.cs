//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Navtech\Opensource\Simpleflow\src\Simpleflow\Parser\Grammar\Simpleflow.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Simpleflow.Parser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
internal partial class SimpleflowLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		Rule=10, When=11, Then=12, Message=13, Error=14, Output=15, Let=16, Set=17, 
		Partial=18, Assign=19, WhiteSpaces=20, LineTerminator=21, MultiLineComment=22, 
		And=23, Or=24, Not=25, GreaterThan=26, GreaterThanEqual=27, LessThan=28, 
		LessThanEqual=29, Equal=30, NotEqual=31, Contains=32, OpenParen=33, CloseParen=34, 
		Number=35, String=36, None=37, Identifier=38, PlusOp=39, MinusOp=40, TimesOp=41, 
		DivOp=42, ModuloOp=43, FunctionName=44;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"Rule", "When", "Then", "Message", "Error", "Output", "Let", "Set", "Partial", 
		"Assign", "WhiteSpaces", "LineTerminator", "MultiLineComment", "And", 
		"Or", "Not", "GreaterThan", "GreaterThanEqual", "LessThan", "LessThanEqual", 
		"Equal", "NotEqual", "Contains", "OpenParen", "CloseParen", "Number", 
		"String", "None", "Identifier", "PlusOp", "MinusOp", "TimesOp", "DivOp", 
		"ModuloOp", "PLUS_FRAGMENT", "MINUS_FRAGMENT", "FunctionName", "NAME"
	};


	public SimpleflowLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SimpleflowLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'end'", "'exit'", "'.'", "'true'", "'false'", "','", "':'", "'{'", 
		"'}'", "'rule'", "'when'", "'then'", "'message'", "'error'", "'output'", 
		"'let'", "'set'", "'partial'", "'='", null, null, null, "'and'", "'or'", 
		"'not'", "'>'", "'>='", "'<'", "'<='", "'=='", "'!='", "'contains'", "'('", 
		"')'", null, null, "'none'", null, "'+'", "'-'", "'*'", "'/'", "'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "Rule", "When", 
		"Then", "Message", "Error", "Output", "Let", "Set", "Partial", "Assign", 
		"WhiteSpaces", "LineTerminator", "MultiLineComment", "And", "Or", "Not", 
		"GreaterThan", "GreaterThanEqual", "LessThan", "LessThanEqual", "Equal", 
		"NotEqual", "Contains", "OpenParen", "CloseParen", "Number", "String", 
		"None", "Identifier", "PlusOp", "MinusOp", "TimesOp", "DivOp", "ModuloOp", 
		"FunctionName"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Simpleflow.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SimpleflowLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,44,325,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,1,0,1,0,1,0,1,0,1,1,1,1,1,
		1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,
		1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,
		11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,
		13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,
		15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		18,1,18,1,19,4,19,181,8,19,11,19,12,19,182,1,19,1,19,1,20,1,20,1,20,1,
		20,1,21,1,21,1,21,1,21,5,21,195,8,21,10,21,12,21,198,9,21,1,21,1,21,1,
		21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,
		25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,
		30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,33,1,
		33,1,34,3,34,246,8,34,1,34,4,34,249,8,34,11,34,12,34,250,1,34,1,34,4,34,
		255,8,34,11,34,12,34,256,3,34,259,8,34,1,35,1,35,1,35,1,35,5,35,265,8,
		35,10,35,12,35,268,9,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,37,5,37,278,
		8,37,10,37,12,37,281,9,37,1,37,1,37,5,37,285,8,37,10,37,12,37,288,9,37,
		1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,
		1,45,1,45,1,45,1,45,5,45,308,8,45,10,45,12,45,311,9,45,1,46,5,46,314,8,
		46,10,46,12,46,317,9,46,1,46,1,46,5,46,321,8,46,10,46,12,46,324,9,46,2,
		196,266,0,47,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
		25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
		49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
		73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,0,89,0,91,44,93,0,1,0,8,4,
		0,9,9,11,12,32,32,160,160,3,0,10,10,13,13,8232,8233,2,0,43,43,45,45,1,
		0,48,57,3,0,10,10,13,13,34,34,1,0,95,95,2,0,65,90,97,122,4,0,48,57,65,
		90,95,95,97,122,334,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
		9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
		0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,
		31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
		0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
		0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
		1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
		0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,
		1,0,0,0,0,91,1,0,0,0,1,95,1,0,0,0,3,99,1,0,0,0,5,104,1,0,0,0,7,106,1,0,
		0,0,9,111,1,0,0,0,11,117,1,0,0,0,13,119,1,0,0,0,15,121,1,0,0,0,17,123,
		1,0,0,0,19,125,1,0,0,0,21,130,1,0,0,0,23,135,1,0,0,0,25,140,1,0,0,0,27,
		148,1,0,0,0,29,154,1,0,0,0,31,161,1,0,0,0,33,165,1,0,0,0,35,169,1,0,0,
		0,37,177,1,0,0,0,39,180,1,0,0,0,41,186,1,0,0,0,43,190,1,0,0,0,45,204,1,
		0,0,0,47,208,1,0,0,0,49,211,1,0,0,0,51,215,1,0,0,0,53,217,1,0,0,0,55,220,
		1,0,0,0,57,222,1,0,0,0,59,225,1,0,0,0,61,228,1,0,0,0,63,231,1,0,0,0,65,
		240,1,0,0,0,67,242,1,0,0,0,69,245,1,0,0,0,71,260,1,0,0,0,73,271,1,0,0,
		0,75,279,1,0,0,0,77,289,1,0,0,0,79,291,1,0,0,0,81,293,1,0,0,0,83,295,1,
		0,0,0,85,297,1,0,0,0,87,299,1,0,0,0,89,301,1,0,0,0,91,303,1,0,0,0,93,315,
		1,0,0,0,95,96,5,101,0,0,96,97,5,110,0,0,97,98,5,100,0,0,98,2,1,0,0,0,99,
		100,5,101,0,0,100,101,5,120,0,0,101,102,5,105,0,0,102,103,5,116,0,0,103,
		4,1,0,0,0,104,105,5,46,0,0,105,6,1,0,0,0,106,107,5,116,0,0,107,108,5,114,
		0,0,108,109,5,117,0,0,109,110,5,101,0,0,110,8,1,0,0,0,111,112,5,102,0,
		0,112,113,5,97,0,0,113,114,5,108,0,0,114,115,5,115,0,0,115,116,5,101,0,
		0,116,10,1,0,0,0,117,118,5,44,0,0,118,12,1,0,0,0,119,120,5,58,0,0,120,
		14,1,0,0,0,121,122,5,123,0,0,122,16,1,0,0,0,123,124,5,125,0,0,124,18,1,
		0,0,0,125,126,5,114,0,0,126,127,5,117,0,0,127,128,5,108,0,0,128,129,5,
		101,0,0,129,20,1,0,0,0,130,131,5,119,0,0,131,132,5,104,0,0,132,133,5,101,
		0,0,133,134,5,110,0,0,134,22,1,0,0,0,135,136,5,116,0,0,136,137,5,104,0,
		0,137,138,5,101,0,0,138,139,5,110,0,0,139,24,1,0,0,0,140,141,5,109,0,0,
		141,142,5,101,0,0,142,143,5,115,0,0,143,144,5,115,0,0,144,145,5,97,0,0,
		145,146,5,103,0,0,146,147,5,101,0,0,147,26,1,0,0,0,148,149,5,101,0,0,149,
		150,5,114,0,0,150,151,5,114,0,0,151,152,5,111,0,0,152,153,5,114,0,0,153,
		28,1,0,0,0,154,155,5,111,0,0,155,156,5,117,0,0,156,157,5,116,0,0,157,158,
		5,112,0,0,158,159,5,117,0,0,159,160,5,116,0,0,160,30,1,0,0,0,161,162,5,
		108,0,0,162,163,5,101,0,0,163,164,5,116,0,0,164,32,1,0,0,0,165,166,5,115,
		0,0,166,167,5,101,0,0,167,168,5,116,0,0,168,34,1,0,0,0,169,170,5,112,0,
		0,170,171,5,97,0,0,171,172,5,114,0,0,172,173,5,116,0,0,173,174,5,105,0,
		0,174,175,5,97,0,0,175,176,5,108,0,0,176,36,1,0,0,0,177,178,5,61,0,0,178,
		38,1,0,0,0,179,181,7,0,0,0,180,179,1,0,0,0,181,182,1,0,0,0,182,180,1,0,
		0,0,182,183,1,0,0,0,183,184,1,0,0,0,184,185,6,19,0,0,185,40,1,0,0,0,186,
		187,7,1,0,0,187,188,1,0,0,0,188,189,6,20,0,0,189,42,1,0,0,0,190,191,5,
		47,0,0,191,192,5,42,0,0,192,196,1,0,0,0,193,195,9,0,0,0,194,193,1,0,0,
		0,195,198,1,0,0,0,196,197,1,0,0,0,196,194,1,0,0,0,197,199,1,0,0,0,198,
		196,1,0,0,0,199,200,5,42,0,0,200,201,5,47,0,0,201,202,1,0,0,0,202,203,
		6,21,0,0,203,44,1,0,0,0,204,205,5,97,0,0,205,206,5,110,0,0,206,207,5,100,
		0,0,207,46,1,0,0,0,208,209,5,111,0,0,209,210,5,114,0,0,210,48,1,0,0,0,
		211,212,5,110,0,0,212,213,5,111,0,0,213,214,5,116,0,0,214,50,1,0,0,0,215,
		216,5,62,0,0,216,52,1,0,0,0,217,218,5,62,0,0,218,219,5,61,0,0,219,54,1,
		0,0,0,220,221,5,60,0,0,221,56,1,0,0,0,222,223,5,60,0,0,223,224,5,61,0,
		0,224,58,1,0,0,0,225,226,5,61,0,0,226,227,5,61,0,0,227,60,1,0,0,0,228,
		229,5,33,0,0,229,230,5,61,0,0,230,62,1,0,0,0,231,232,5,99,0,0,232,233,
		5,111,0,0,233,234,5,110,0,0,234,235,5,116,0,0,235,236,5,97,0,0,236,237,
		5,105,0,0,237,238,5,110,0,0,238,239,5,115,0,0,239,64,1,0,0,0,240,241,5,
		40,0,0,241,66,1,0,0,0,242,243,5,41,0,0,243,68,1,0,0,0,244,246,7,2,0,0,
		245,244,1,0,0,0,245,246,1,0,0,0,246,248,1,0,0,0,247,249,7,3,0,0,248,247,
		1,0,0,0,249,250,1,0,0,0,250,248,1,0,0,0,250,251,1,0,0,0,251,258,1,0,0,
		0,252,254,5,46,0,0,253,255,7,3,0,0,254,253,1,0,0,0,255,256,1,0,0,0,256,
		254,1,0,0,0,256,257,1,0,0,0,257,259,1,0,0,0,258,252,1,0,0,0,258,259,1,
		0,0,0,259,70,1,0,0,0,260,266,5,34,0,0,261,262,5,92,0,0,262,265,5,34,0,
		0,263,265,8,4,0,0,264,261,1,0,0,0,264,263,1,0,0,0,265,268,1,0,0,0,266,
		267,1,0,0,0,266,264,1,0,0,0,267,269,1,0,0,0,268,266,1,0,0,0,269,270,5,
		34,0,0,270,72,1,0,0,0,271,272,5,110,0,0,272,273,5,111,0,0,273,274,5,110,
		0,0,274,275,5,101,0,0,275,74,1,0,0,0,276,278,7,5,0,0,277,276,1,0,0,0,278,
		281,1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,282,1,0,0,0,281,279,1,
		0,0,0,282,286,7,6,0,0,283,285,7,7,0,0,284,283,1,0,0,0,285,288,1,0,0,0,
		286,284,1,0,0,0,286,287,1,0,0,0,287,76,1,0,0,0,288,286,1,0,0,0,289,290,
		5,43,0,0,290,78,1,0,0,0,291,292,5,45,0,0,292,80,1,0,0,0,293,294,5,42,0,
		0,294,82,1,0,0,0,295,296,5,47,0,0,296,84,1,0,0,0,297,298,5,37,0,0,298,
		86,1,0,0,0,299,300,5,43,0,0,300,88,1,0,0,0,301,302,5,45,0,0,302,90,1,0,
		0,0,303,304,5,36,0,0,304,309,3,93,46,0,305,306,5,46,0,0,306,308,3,93,46,
		0,307,305,1,0,0,0,308,311,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,
		92,1,0,0,0,311,309,1,0,0,0,312,314,7,5,0,0,313,312,1,0,0,0,314,317,1,0,
		0,0,315,313,1,0,0,0,315,316,1,0,0,0,316,318,1,0,0,0,317,315,1,0,0,0,318,
		322,7,6,0,0,319,321,7,7,0,0,320,319,1,0,0,0,321,324,1,0,0,0,322,320,1,
		0,0,0,322,323,1,0,0,0,323,94,1,0,0,0,324,322,1,0,0,0,14,0,182,196,245,
		250,256,258,264,266,279,286,309,315,322,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Simpleflow.Parser
