//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Navtech\Opensource\Simpleflow\src\Simpleflow\Parser\Grammar\SimpleflowLexer.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Simpleflow.Parser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
internal partial class SimpleflowLexer : SimpleflowLexerBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		MultiLineComment=1, SingleLineComment=2, OpenBracket=3, CloseBracket=4, 
		OpenParen=5, CloseParen=6, OpenBrace=7, TemplateCloseBrace=8, CloseBrace=9, 
		Colon=10, Comma=11, Dot=12, Assign=13, PlusOp=14, MinusOp=15, TimesOp=16, 
		DivOp=17, ModuloOp=18, GreaterThan=19, GreaterThanEqual=20, LessThan=21, 
		LessThanEqual=22, Equal=23, NotEqual=24, Let=25, Set=26, Partial=27, Rule=28, 
		When=29, Then=30, End=31, Exit=32, Message=33, Error=34, Output=35, Semicolon=36, 
		And=37, Or=38, Not=39, True=40, False=41, Number=42, String=43, None=44, 
		Identifier=45, IgnoreIdentifier=46, Indexer=47, FunctionName=48, BackTick=49, 
		WhiteSpaces=50, LineTerminator=51, TemplateStringStartExpression=52, TemplateStringAtom=53;
	public const int
		ERROR=2;
	public const int
		TEMPLATE=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "TEMPLATE"
	};

	public static readonly string[] ruleNames = {
		"MultiLineComment", "SingleLineComment", "OpenBracket", "CloseBracket", 
		"OpenParen", "CloseParen", "OpenBrace", "TemplateCloseBrace", "CloseBrace", 
		"Colon", "Comma", "Dot", "Assign", "PlusOp", "MinusOp", "TimesOp", "DivOp", 
		"ModuloOp", "GreaterThan", "GreaterThanEqual", "LessThan", "LessThanEqual", 
		"Equal", "NotEqual", "Let", "Set", "Partial", "Rule", "When", "Then", 
		"End", "Exit", "Message", "Error", "Output", "Semicolon", "And", "Or", 
		"Not", "True", "False", "Number", "String", "None", "Identifier", "IgnoreIdentifier", 
		"Indexer", "FunctionName", "BackTick", "WhiteSpaces", "LineTerminator", 
		"BackTickInside", "TemplateStringStartExpression", "TemplateStringAtom", 
		"NAME", "PLUS_FRAGMENT", "MINUS_FRAGMENT"
	};


	public SimpleflowLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SimpleflowLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'['", "']'", "'('", "')'", null, null, "'}'", "':'", 
		"','", "'.'", "'='", "'+'", "'-'", "'*'", "'/'", "'%'", "'>'", "'>='", 
		"'<'", "'<='", "'=='", "'!='", "'let'", "'set'", "'partial'", "'rule'", 
		"'when'", "'then'", "'end'", "'exit'", "'message'", "'error'", "'output'", 
		"';'", "'and'", "'or'", "'not'", "'true'", "'false'", null, null, "'none'", 
		null, "'_'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MultiLineComment", "SingleLineComment", "OpenBracket", "CloseBracket", 
		"OpenParen", "CloseParen", "OpenBrace", "TemplateCloseBrace", "CloseBrace", 
		"Colon", "Comma", "Dot", "Assign", "PlusOp", "MinusOp", "TimesOp", "DivOp", 
		"ModuloOp", "GreaterThan", "GreaterThanEqual", "LessThan", "LessThanEqual", 
		"Equal", "NotEqual", "Let", "Set", "Partial", "Rule", "When", "Then", 
		"End", "Exit", "Message", "Error", "Output", "Semicolon", "And", "Or", 
		"Not", "True", "False", "Number", "String", "None", "Identifier", "IgnoreIdentifier", 
		"Indexer", "FunctionName", "BackTick", "WhiteSpaces", "LineTerminator", 
		"TemplateStringStartExpression", "TemplateStringAtom"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SimpleflowLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SimpleflowLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 48 : BackTick_action(_localctx, actionIndex); break;
		case 51 : BackTickInside_action(_localctx, actionIndex); break;
		}
	}
	private void BackTick_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0: this.IncreaseTemplateDepth(); break;
		}
	}
	private void BackTickInside_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 1: this.DecreaseTemplateDepth(); break;
		}
	}
	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7 : return TemplateCloseBrace_sempred(_localctx, predIndex);
		}
		return true;
	}
	private bool TemplateCloseBrace_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return this.IsInTemplateString();
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,0,53,380,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
		6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
		2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,
		2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,
		2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,
		2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
		2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
		2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,
		2,56,7,56,1,0,1,0,1,0,1,0,5,0,121,8,0,10,0,12,0,124,9,0,1,0,1,0,1,0,1,
		0,1,0,1,1,1,1,5,1,133,8,1,10,1,12,1,136,9,1,1,1,1,1,1,2,1,2,1,3,1,3,1,
		4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,
		11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,
		18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,
		23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,
		26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,
		29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,
		32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,
		34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,
		37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,
		40,1,40,1,40,1,41,3,41,277,8,41,1,41,4,41,280,8,41,11,41,12,41,281,1,41,
		1,41,4,41,286,8,41,11,41,12,41,287,3,41,290,8,41,1,42,1,42,1,42,1,42,5,
		42,296,8,42,10,42,12,42,299,9,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,
		44,5,44,309,8,44,10,44,12,44,312,9,44,1,44,1,44,5,44,316,8,44,10,44,12,
		44,319,9,44,1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,5,47,331,
		8,47,10,47,12,47,334,9,47,1,48,1,48,1,48,1,48,1,48,1,49,4,49,342,8,49,
		11,49,12,49,343,1,49,1,49,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,
		1,51,1,52,1,52,1,52,1,52,1,53,1,53,1,54,5,54,365,8,54,10,54,12,54,368,
		9,54,1,54,1,54,5,54,372,8,54,10,54,12,54,375,9,54,1,55,1,55,1,56,1,56,
		2,122,297,0,57,2,1,4,2,6,3,8,4,10,5,12,6,14,7,16,8,18,9,20,10,22,11,24,
		12,26,13,28,14,30,15,32,16,34,17,36,18,38,19,40,20,42,21,44,22,46,23,48,
		24,50,25,52,26,54,27,56,28,58,29,60,30,62,31,64,32,66,33,68,34,70,35,72,
		36,74,37,76,38,78,39,80,40,82,41,84,42,86,43,88,44,90,45,92,46,94,47,96,
		48,98,49,100,50,102,51,104,0,106,52,108,53,110,0,112,0,114,0,2,0,1,9,3,
		0,10,10,13,13,8232,8233,2,0,43,43,45,45,1,0,48,57,3,0,10,10,13,13,34,34,
		1,0,95,95,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,4,0,9,9,11,12,
		32,32,160,160,1,0,96,96,389,0,2,1,0,0,0,0,4,1,0,0,0,0,6,1,0,0,0,0,8,1,
		0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,0,16,1,0,0,0,0,18,1,0,0,0,
		0,20,1,0,0,0,0,22,1,0,0,0,0,24,1,0,0,0,0,26,1,0,0,0,0,28,1,0,0,0,0,30,
		1,0,0,0,0,32,1,0,0,0,0,34,1,0,0,0,0,36,1,0,0,0,0,38,1,0,0,0,0,40,1,0,0,
		0,0,42,1,0,0,0,0,44,1,0,0,0,0,46,1,0,0,0,0,48,1,0,0,0,0,50,1,0,0,0,0,52,
		1,0,0,0,0,54,1,0,0,0,0,56,1,0,0,0,0,58,1,0,0,0,0,60,1,0,0,0,0,62,1,0,0,
		0,0,64,1,0,0,0,0,66,1,0,0,0,0,68,1,0,0,0,0,70,1,0,0,0,0,72,1,0,0,0,0,74,
		1,0,0,0,0,76,1,0,0,0,0,78,1,0,0,0,0,80,1,0,0,0,0,82,1,0,0,0,0,84,1,0,0,
		0,0,86,1,0,0,0,0,88,1,0,0,0,0,90,1,0,0,0,0,92,1,0,0,0,0,94,1,0,0,0,0,96,
		1,0,0,0,0,98,1,0,0,0,0,100,1,0,0,0,0,102,1,0,0,0,1,104,1,0,0,0,1,106,1,
		0,0,0,1,108,1,0,0,0,2,116,1,0,0,0,4,130,1,0,0,0,6,139,1,0,0,0,8,141,1,
		0,0,0,10,143,1,0,0,0,12,145,1,0,0,0,14,147,1,0,0,0,16,149,1,0,0,0,18,154,
		1,0,0,0,20,156,1,0,0,0,22,158,1,0,0,0,24,160,1,0,0,0,26,162,1,0,0,0,28,
		164,1,0,0,0,30,166,1,0,0,0,32,168,1,0,0,0,34,170,1,0,0,0,36,172,1,0,0,
		0,38,174,1,0,0,0,40,176,1,0,0,0,42,179,1,0,0,0,44,181,1,0,0,0,46,184,1,
		0,0,0,48,187,1,0,0,0,50,190,1,0,0,0,52,194,1,0,0,0,54,198,1,0,0,0,56,206,
		1,0,0,0,58,211,1,0,0,0,60,216,1,0,0,0,62,221,1,0,0,0,64,225,1,0,0,0,66,
		230,1,0,0,0,68,238,1,0,0,0,70,244,1,0,0,0,72,251,1,0,0,0,74,253,1,0,0,
		0,76,257,1,0,0,0,78,260,1,0,0,0,80,264,1,0,0,0,82,269,1,0,0,0,84,276,1,
		0,0,0,86,291,1,0,0,0,88,302,1,0,0,0,90,310,1,0,0,0,92,320,1,0,0,0,94,322,
		1,0,0,0,96,326,1,0,0,0,98,335,1,0,0,0,100,341,1,0,0,0,102,347,1,0,0,0,
		104,351,1,0,0,0,106,357,1,0,0,0,108,361,1,0,0,0,110,366,1,0,0,0,112,376,
		1,0,0,0,114,378,1,0,0,0,116,117,5,47,0,0,117,118,5,42,0,0,118,122,1,0,
		0,0,119,121,9,0,0,0,120,119,1,0,0,0,121,124,1,0,0,0,122,123,1,0,0,0,122,
		120,1,0,0,0,123,125,1,0,0,0,124,122,1,0,0,0,125,126,5,42,0,0,126,127,5,
		47,0,0,127,128,1,0,0,0,128,129,6,0,0,0,129,3,1,0,0,0,130,134,5,35,0,0,
		131,133,8,0,0,0,132,131,1,0,0,0,133,136,1,0,0,0,134,132,1,0,0,0,134,135,
		1,0,0,0,135,137,1,0,0,0,136,134,1,0,0,0,137,138,6,1,0,0,138,5,1,0,0,0,
		139,140,5,91,0,0,140,7,1,0,0,0,141,142,5,93,0,0,142,9,1,0,0,0,143,144,
		5,40,0,0,144,11,1,0,0,0,145,146,5,41,0,0,146,13,1,0,0,0,147,148,5,123,
		0,0,148,15,1,0,0,0,149,150,4,7,0,0,150,151,5,125,0,0,151,152,1,0,0,0,152,
		153,6,7,1,0,153,17,1,0,0,0,154,155,5,125,0,0,155,19,1,0,0,0,156,157,5,
		58,0,0,157,21,1,0,0,0,158,159,5,44,0,0,159,23,1,0,0,0,160,161,5,46,0,0,
		161,25,1,0,0,0,162,163,5,61,0,0,163,27,1,0,0,0,164,165,5,43,0,0,165,29,
		1,0,0,0,166,167,5,45,0,0,167,31,1,0,0,0,168,169,5,42,0,0,169,33,1,0,0,
		0,170,171,5,47,0,0,171,35,1,0,0,0,172,173,5,37,0,0,173,37,1,0,0,0,174,
		175,5,62,0,0,175,39,1,0,0,0,176,177,5,62,0,0,177,178,5,61,0,0,178,41,1,
		0,0,0,179,180,5,60,0,0,180,43,1,0,0,0,181,182,5,60,0,0,182,183,5,61,0,
		0,183,45,1,0,0,0,184,185,5,61,0,0,185,186,5,61,0,0,186,47,1,0,0,0,187,
		188,5,33,0,0,188,189,5,61,0,0,189,49,1,0,0,0,190,191,5,108,0,0,191,192,
		5,101,0,0,192,193,5,116,0,0,193,51,1,0,0,0,194,195,5,115,0,0,195,196,5,
		101,0,0,196,197,5,116,0,0,197,53,1,0,0,0,198,199,5,112,0,0,199,200,5,97,
		0,0,200,201,5,114,0,0,201,202,5,116,0,0,202,203,5,105,0,0,203,204,5,97,
		0,0,204,205,5,108,0,0,205,55,1,0,0,0,206,207,5,114,0,0,207,208,5,117,0,
		0,208,209,5,108,0,0,209,210,5,101,0,0,210,57,1,0,0,0,211,212,5,119,0,0,
		212,213,5,104,0,0,213,214,5,101,0,0,214,215,5,110,0,0,215,59,1,0,0,0,216,
		217,5,116,0,0,217,218,5,104,0,0,218,219,5,101,0,0,219,220,5,110,0,0,220,
		61,1,0,0,0,221,222,5,101,0,0,222,223,5,110,0,0,223,224,5,100,0,0,224,63,
		1,0,0,0,225,226,5,101,0,0,226,227,5,120,0,0,227,228,5,105,0,0,228,229,
		5,116,0,0,229,65,1,0,0,0,230,231,5,109,0,0,231,232,5,101,0,0,232,233,5,
		115,0,0,233,234,5,115,0,0,234,235,5,97,0,0,235,236,5,103,0,0,236,237,5,
		101,0,0,237,67,1,0,0,0,238,239,5,101,0,0,239,240,5,114,0,0,240,241,5,114,
		0,0,241,242,5,111,0,0,242,243,5,114,0,0,243,69,1,0,0,0,244,245,5,111,0,
		0,245,246,5,117,0,0,246,247,5,116,0,0,247,248,5,112,0,0,248,249,5,117,
		0,0,249,250,5,116,0,0,250,71,1,0,0,0,251,252,5,59,0,0,252,73,1,0,0,0,253,
		254,5,97,0,0,254,255,5,110,0,0,255,256,5,100,0,0,256,75,1,0,0,0,257,258,
		5,111,0,0,258,259,5,114,0,0,259,77,1,0,0,0,260,261,5,110,0,0,261,262,5,
		111,0,0,262,263,5,116,0,0,263,79,1,0,0,0,264,265,5,116,0,0,265,266,5,114,
		0,0,266,267,5,117,0,0,267,268,5,101,0,0,268,81,1,0,0,0,269,270,5,102,0,
		0,270,271,5,97,0,0,271,272,5,108,0,0,272,273,5,115,0,0,273,274,5,101,0,
		0,274,83,1,0,0,0,275,277,7,1,0,0,276,275,1,0,0,0,276,277,1,0,0,0,277,279,
		1,0,0,0,278,280,7,2,0,0,279,278,1,0,0,0,280,281,1,0,0,0,281,279,1,0,0,
		0,281,282,1,0,0,0,282,289,1,0,0,0,283,285,5,46,0,0,284,286,7,2,0,0,285,
		284,1,0,0,0,286,287,1,0,0,0,287,285,1,0,0,0,287,288,1,0,0,0,288,290,1,
		0,0,0,289,283,1,0,0,0,289,290,1,0,0,0,290,85,1,0,0,0,291,297,5,34,0,0,
		292,293,5,92,0,0,293,296,5,34,0,0,294,296,8,3,0,0,295,292,1,0,0,0,295,
		294,1,0,0,0,296,299,1,0,0,0,297,298,1,0,0,0,297,295,1,0,0,0,298,300,1,
		0,0,0,299,297,1,0,0,0,300,301,5,34,0,0,301,87,1,0,0,0,302,303,5,110,0,
		0,303,304,5,111,0,0,304,305,5,110,0,0,305,306,5,101,0,0,306,89,1,0,0,0,
		307,309,7,4,0,0,308,307,1,0,0,0,309,312,1,0,0,0,310,308,1,0,0,0,310,311,
		1,0,0,0,311,313,1,0,0,0,312,310,1,0,0,0,313,317,7,5,0,0,314,316,7,6,0,
		0,315,314,1,0,0,0,316,319,1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,
		91,1,0,0,0,319,317,1,0,0,0,320,321,5,95,0,0,321,93,1,0,0,0,322,323,3,6,
		2,0,323,324,3,84,41,0,324,325,3,8,3,0,325,95,1,0,0,0,326,327,5,36,0,0,
		327,332,3,110,54,0,328,329,5,46,0,0,329,331,3,110,54,0,330,328,1,0,0,0,
		331,334,1,0,0,0,332,330,1,0,0,0,332,333,1,0,0,0,333,97,1,0,0,0,334,332,
		1,0,0,0,335,336,5,96,0,0,336,337,6,48,2,0,337,338,1,0,0,0,338,339,6,48,
		3,0,339,99,1,0,0,0,340,342,7,7,0,0,341,340,1,0,0,0,342,343,1,0,0,0,343,
		341,1,0,0,0,343,344,1,0,0,0,344,345,1,0,0,0,345,346,6,49,0,0,346,101,1,
		0,0,0,347,348,7,0,0,0,348,349,1,0,0,0,349,350,6,50,0,0,350,103,1,0,0,0,
		351,352,5,96,0,0,352,353,6,51,4,0,353,354,1,0,0,0,354,355,6,51,5,0,355,
		356,6,51,1,0,356,105,1,0,0,0,357,358,5,123,0,0,358,359,1,0,0,0,359,360,
		6,52,6,0,360,107,1,0,0,0,361,362,8,8,0,0,362,109,1,0,0,0,363,365,7,4,0,
		0,364,363,1,0,0,0,365,368,1,0,0,0,366,364,1,0,0,0,366,367,1,0,0,0,367,
		369,1,0,0,0,368,366,1,0,0,0,369,373,7,5,0,0,370,372,7,6,0,0,371,370,1,
		0,0,0,372,375,1,0,0,0,373,371,1,0,0,0,373,374,1,0,0,0,374,111,1,0,0,0,
		375,373,1,0,0,0,376,377,5,43,0,0,377,113,1,0,0,0,378,379,5,45,0,0,379,
		115,1,0,0,0,16,0,1,122,134,276,281,287,289,295,297,310,317,332,343,366,
		373,7,0,1,0,4,0,0,1,48,0,5,1,0,1,51,1,7,49,0,5,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Simpleflow.Parser
