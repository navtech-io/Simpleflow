//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Navtech\Opensource\Simpleflow\src\Simpleflow\Parser\Grammar\Simpleflow.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Simpleflow.Parser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
internal partial class SimpleflowLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		Rule=10, When=11, Then=12, Message=13, Error=14, Output=15, Let=16, Set=17, 
		Partial=18, Assign=19, LineBreak=20, Skip_=21, And=22, Or=23, Not=24, 
		GreaterThan=25, GreaterThanEqual=26, LessThan=27, LessThanEqual=28, Equal=29, 
		NotEqual=30, Contains=31, OpenParen=32, CloseParen=33, Number=34, String=35, 
		None=36, Identifier=37, PlusOp=38, MinusOp=39, TimesOp=40, DivOp=41, ModuloOp=42, 
		FunctionName=43;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"Rule", "When", "Then", "Message", "Error", "Output", "Let", "Set", "Partial", 
		"Assign", "LineBreak", "Skip_", "SPACES", "COMMENT", "And", "Or", "Not", 
		"GreaterThan", "GreaterThanEqual", "LessThan", "LessThanEqual", "Equal", 
		"NotEqual", "Contains", "OpenParen", "CloseParen", "Number", "String", 
		"None", "Identifier", "PlusOp", "MinusOp", "TimesOp", "DivOp", "ModuloOp", 
		"PLUS_FRAGMENT", "MINUS_FRAGMENT", "FunctionName", "NAME"
	};


	public SimpleflowLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SimpleflowLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'end'", "'exit'", "'.'", "'true'", "'false'", "','", "':'", "'{'", 
		"'}'", "'rule'", "'when'", "'then'", "'message'", "'error'", "'output'", 
		"'let'", "'set'", "'partial'", "'='", null, null, "'and'", "'or'", "'not'", 
		"'>'", "'>='", "'<'", "'<='", "'=='", "'!='", "'contains'", "'('", "')'", 
		null, null, "'none'", null, "'+'", "'-'", "'*'", "'/'", "'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "Rule", "When", 
		"Then", "Message", "Error", "Output", "Let", "Set", "Partial", "Assign", 
		"LineBreak", "Skip_", "And", "Or", "Not", "GreaterThan", "GreaterThanEqual", 
		"LessThan", "LessThanEqual", "Equal", "NotEqual", "Contains", "OpenParen", 
		"CloseParen", "Number", "String", "None", "Identifier", "PlusOp", "MinusOp", 
		"TimesOp", "DivOp", "ModuloOp", "FunctionName"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Simpleflow.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SimpleflowLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,43,342,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,1,0,1,0,1,0,1,0,
		1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,
		4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,
		10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
		12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,1,18,1,18,1,19,4,19,183,8,19,11,19,12,19,184,1,19,5,19,188,8,19,
		10,19,12,19,191,9,19,1,20,1,20,3,20,195,8,20,1,20,1,20,1,21,4,21,200,8,
		21,11,21,12,21,201,1,22,1,22,1,22,1,22,5,22,208,8,22,10,22,12,22,211,9,
		22,1,22,1,22,1,22,1,22,5,22,217,8,22,10,22,12,22,220,9,22,1,23,1,23,1,
		23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,
		28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,
		32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,35,3,35,263,8,35,1,35,
		4,35,266,8,35,11,35,12,35,267,1,35,1,35,4,35,272,8,35,11,35,12,35,273,
		3,35,276,8,35,1,36,1,36,1,36,1,36,5,36,282,8,36,10,36,12,36,285,9,36,1,
		36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,5,38,295,8,38,10,38,12,38,298,9,
		38,1,38,1,38,5,38,302,8,38,10,38,12,38,305,9,38,1,39,1,39,1,40,1,40,1,
		41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,46,1,46,5,
		46,325,8,46,10,46,12,46,328,9,46,1,47,5,47,331,8,47,10,47,12,47,334,9,
		47,1,47,1,47,5,47,338,8,47,10,47,12,47,341,9,47,2,209,283,0,48,1,1,3,2,
		5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
		16,33,17,35,18,37,19,39,20,41,21,43,0,45,0,47,22,49,23,51,24,53,25,55,
		26,57,27,59,28,61,29,63,30,65,31,67,32,69,33,71,34,73,35,75,36,77,37,79,
		38,81,39,83,40,85,41,87,42,89,0,91,0,93,43,95,0,1,0,9,2,0,10,10,13,13,
		3,0,9,10,13,13,32,32,2,0,9,9,32,32,2,0,43,43,45,45,1,0,48,57,3,0,10,10,
		13,13,34,34,1,0,95,95,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,353,
		0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
		0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,47,1,0,0,0,0,49,
		1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
		0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
		1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,
		0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,93,1,0,0,0,1,97,1,0,0,0,3,101,
		1,0,0,0,5,106,1,0,0,0,7,108,1,0,0,0,9,113,1,0,0,0,11,119,1,0,0,0,13,121,
		1,0,0,0,15,123,1,0,0,0,17,125,1,0,0,0,19,127,1,0,0,0,21,132,1,0,0,0,23,
		137,1,0,0,0,25,142,1,0,0,0,27,150,1,0,0,0,29,156,1,0,0,0,31,163,1,0,0,
		0,33,167,1,0,0,0,35,171,1,0,0,0,37,179,1,0,0,0,39,182,1,0,0,0,41,194,1,
		0,0,0,43,199,1,0,0,0,45,203,1,0,0,0,47,221,1,0,0,0,49,225,1,0,0,0,51,228,
		1,0,0,0,53,232,1,0,0,0,55,234,1,0,0,0,57,237,1,0,0,0,59,239,1,0,0,0,61,
		242,1,0,0,0,63,245,1,0,0,0,65,248,1,0,0,0,67,257,1,0,0,0,69,259,1,0,0,
		0,71,262,1,0,0,0,73,277,1,0,0,0,75,288,1,0,0,0,77,296,1,0,0,0,79,306,1,
		0,0,0,81,308,1,0,0,0,83,310,1,0,0,0,85,312,1,0,0,0,87,314,1,0,0,0,89,316,
		1,0,0,0,91,318,1,0,0,0,93,320,1,0,0,0,95,332,1,0,0,0,97,98,5,101,0,0,98,
		99,5,110,0,0,99,100,5,100,0,0,100,2,1,0,0,0,101,102,5,101,0,0,102,103,
		5,120,0,0,103,104,5,105,0,0,104,105,5,116,0,0,105,4,1,0,0,0,106,107,5,
		46,0,0,107,6,1,0,0,0,108,109,5,116,0,0,109,110,5,114,0,0,110,111,5,117,
		0,0,111,112,5,101,0,0,112,8,1,0,0,0,113,114,5,102,0,0,114,115,5,97,0,0,
		115,116,5,108,0,0,116,117,5,115,0,0,117,118,5,101,0,0,118,10,1,0,0,0,119,
		120,5,44,0,0,120,12,1,0,0,0,121,122,5,58,0,0,122,14,1,0,0,0,123,124,5,
		123,0,0,124,16,1,0,0,0,125,126,5,125,0,0,126,18,1,0,0,0,127,128,5,114,
		0,0,128,129,5,117,0,0,129,130,5,108,0,0,130,131,5,101,0,0,131,20,1,0,0,
		0,132,133,5,119,0,0,133,134,5,104,0,0,134,135,5,101,0,0,135,136,5,110,
		0,0,136,22,1,0,0,0,137,138,5,116,0,0,138,139,5,104,0,0,139,140,5,101,0,
		0,140,141,5,110,0,0,141,24,1,0,0,0,142,143,5,109,0,0,143,144,5,101,0,0,
		144,145,5,115,0,0,145,146,5,115,0,0,146,147,5,97,0,0,147,148,5,103,0,0,
		148,149,5,101,0,0,149,26,1,0,0,0,150,151,5,101,0,0,151,152,5,114,0,0,152,
		153,5,114,0,0,153,154,5,111,0,0,154,155,5,114,0,0,155,28,1,0,0,0,156,157,
		5,111,0,0,157,158,5,117,0,0,158,159,5,116,0,0,159,160,5,112,0,0,160,161,
		5,117,0,0,161,162,5,116,0,0,162,30,1,0,0,0,163,164,5,108,0,0,164,165,5,
		101,0,0,165,166,5,116,0,0,166,32,1,0,0,0,167,168,5,115,0,0,168,169,5,101,
		0,0,169,170,5,116,0,0,170,34,1,0,0,0,171,172,5,112,0,0,172,173,5,97,0,
		0,173,174,5,114,0,0,174,175,5,116,0,0,175,176,5,105,0,0,176,177,5,97,0,
		0,177,178,5,108,0,0,178,36,1,0,0,0,179,180,5,61,0,0,180,38,1,0,0,0,181,
		183,7,0,0,0,182,181,1,0,0,0,183,184,1,0,0,0,184,182,1,0,0,0,184,185,1,
		0,0,0,185,189,1,0,0,0,186,188,7,1,0,0,187,186,1,0,0,0,188,191,1,0,0,0,
		189,187,1,0,0,0,189,190,1,0,0,0,190,40,1,0,0,0,191,189,1,0,0,0,192,195,
		3,43,21,0,193,195,3,45,22,0,194,192,1,0,0,0,194,193,1,0,0,0,195,196,1,
		0,0,0,196,197,6,20,0,0,197,42,1,0,0,0,198,200,7,2,0,0,199,198,1,0,0,0,
		200,201,1,0,0,0,201,199,1,0,0,0,201,202,1,0,0,0,202,44,1,0,0,0,203,204,
		5,47,0,0,204,205,5,42,0,0,205,209,1,0,0,0,206,208,9,0,0,0,207,206,1,0,
		0,0,208,211,1,0,0,0,209,210,1,0,0,0,209,207,1,0,0,0,210,212,1,0,0,0,211,
		209,1,0,0,0,212,213,5,42,0,0,213,214,5,47,0,0,214,218,1,0,0,0,215,217,
		7,0,0,0,216,215,1,0,0,0,217,220,1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,
		0,219,46,1,0,0,0,220,218,1,0,0,0,221,222,5,97,0,0,222,223,5,110,0,0,223,
		224,5,100,0,0,224,48,1,0,0,0,225,226,5,111,0,0,226,227,5,114,0,0,227,50,
		1,0,0,0,228,229,5,110,0,0,229,230,5,111,0,0,230,231,5,116,0,0,231,52,1,
		0,0,0,232,233,5,62,0,0,233,54,1,0,0,0,234,235,5,62,0,0,235,236,5,61,0,
		0,236,56,1,0,0,0,237,238,5,60,0,0,238,58,1,0,0,0,239,240,5,60,0,0,240,
		241,5,61,0,0,241,60,1,0,0,0,242,243,5,61,0,0,243,244,5,61,0,0,244,62,1,
		0,0,0,245,246,5,33,0,0,246,247,5,61,0,0,247,64,1,0,0,0,248,249,5,99,0,
		0,249,250,5,111,0,0,250,251,5,110,0,0,251,252,5,116,0,0,252,253,5,97,0,
		0,253,254,5,105,0,0,254,255,5,110,0,0,255,256,5,115,0,0,256,66,1,0,0,0,
		257,258,5,40,0,0,258,68,1,0,0,0,259,260,5,41,0,0,260,70,1,0,0,0,261,263,
		7,3,0,0,262,261,1,0,0,0,262,263,1,0,0,0,263,265,1,0,0,0,264,266,7,4,0,
		0,265,264,1,0,0,0,266,267,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,
		275,1,0,0,0,269,271,5,46,0,0,270,272,7,4,0,0,271,270,1,0,0,0,272,273,1,
		0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,276,1,0,0,0,275,269,1,0,0,0,
		275,276,1,0,0,0,276,72,1,0,0,0,277,283,5,34,0,0,278,279,5,92,0,0,279,282,
		5,34,0,0,280,282,8,5,0,0,281,278,1,0,0,0,281,280,1,0,0,0,282,285,1,0,0,
		0,283,284,1,0,0,0,283,281,1,0,0,0,284,286,1,0,0,0,285,283,1,0,0,0,286,
		287,5,34,0,0,287,74,1,0,0,0,288,289,5,110,0,0,289,290,5,111,0,0,290,291,
		5,110,0,0,291,292,5,101,0,0,292,76,1,0,0,0,293,295,7,6,0,0,294,293,1,0,
		0,0,295,298,1,0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,299,1,0,0,0,298,
		296,1,0,0,0,299,303,7,7,0,0,300,302,7,8,0,0,301,300,1,0,0,0,302,305,1,
		0,0,0,303,301,1,0,0,0,303,304,1,0,0,0,304,78,1,0,0,0,305,303,1,0,0,0,306,
		307,5,43,0,0,307,80,1,0,0,0,308,309,5,45,0,0,309,82,1,0,0,0,310,311,5,
		42,0,0,311,84,1,0,0,0,312,313,5,47,0,0,313,86,1,0,0,0,314,315,5,37,0,0,
		315,88,1,0,0,0,316,317,5,43,0,0,317,90,1,0,0,0,318,319,5,45,0,0,319,92,
		1,0,0,0,320,321,5,36,0,0,321,326,3,95,47,0,322,323,5,46,0,0,323,325,3,
		95,47,0,324,322,1,0,0,0,325,328,1,0,0,0,326,324,1,0,0,0,326,327,1,0,0,
		0,327,94,1,0,0,0,328,326,1,0,0,0,329,331,7,6,0,0,330,329,1,0,0,0,331,334,
		1,0,0,0,332,330,1,0,0,0,332,333,1,0,0,0,333,335,1,0,0,0,334,332,1,0,0,
		0,335,339,7,7,0,0,336,338,7,8,0,0,337,336,1,0,0,0,338,341,1,0,0,0,339,
		337,1,0,0,0,339,340,1,0,0,0,340,96,1,0,0,0,341,339,1,0,0,0,18,0,184,189,
		194,201,209,218,262,267,273,275,281,283,296,303,326,332,339,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Simpleflow.Parser
