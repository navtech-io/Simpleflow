<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Simpleflow</name>
    </assembly>
    <members>
        <member name="T:Simpleflow.ArgumentInfo">
            <summary>
            Represents argument information of a function
            </summary>
        </member>
        <member name="P:Simpleflow.ArgumentInfo.ArgumentName">
            <summary>
            Gets or sets name of argument 
            </summary>
        </member>
        <member name="T:Simpleflow.CacheOptions">
            <summary>
            Represents the cache options that applied to <see cref="T:Simpleflow.Services.CacheService"/>
            </summary>
        </member>
        <member name="P:Simpleflow.CacheOptions.SlidingExpiration">
            <summary>
            Gets or sets how long a cache entry can be inactive (e.g. not accessed) before it will be removed.
            This will not extend the entry lifetime beyond the absolute expiration (if set).
            </summary>
        </member>
        <member name="P:Simpleflow.CacheOptions.AbsoluteExpiration">
            <summary>
            Gets or sets an absolute expiration date for the cache entry.
            </summary>
        </member>
        <member name="P:Simpleflow.CacheOptions.HashingAlgToIdentifyScriptUniquely">
            <summary>
            Gets or sets hashing algorithm to identify script compiled object uniquely. This method is used when no script id specified.
            Check available hash algorithms and names here: https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.hashalgorithm.create?view=net-6.0
            </summary>
        </member>
        <member name="T:Simpleflow.CodeGenerator.SimpleflowCodeVisitor`1">
            <summary>
             Handles Program, Let, Mutate and Rule 
            </summary>
            <typeparam name="TArg"></typeparam>
        </member>
        <member name="T:Simpleflow.Exceptions.AccessDeniedException">
            <summary>
            This exception is thrown when a script uses a denied function.
            </summary>
        </member>
        <member name="M:Simpleflow.Exceptions.AccessDeniedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simpleflow.Exceptions.AccessDeniedException"/> class with
            a specified error message.
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="T:Simpleflow.Exceptions.DuplicateFunctionException">
            <summary>
            The exception is thrown when a function with a name is already registered.
            </summary>
        </member>
        <member name="M:Simpleflow.Exceptions.DuplicateFunctionException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simpleflow.Exceptions.DuplicateFunctionException"/> class with
            a specified function name.
            </summary>
            <param name="functionName">The name of the function that caused the exception</param>
            <param name="message">The message describes the exception</param>
        </member>
        <member name="P:Simpleflow.Exceptions.DuplicateFunctionException.FunctionName">
            <summary>
            Gets name of the function that has been re-registered.
            </summary>
        </member>
        <member name="T:Simpleflow.Exceptions.DuplicateParametersException">
            <summary>
            The exception is thrown when same parameters are specified multiple times
            while invoking a function in script
            </summary>
        </member>
        <member name="M:Simpleflow.Exceptions.DuplicateParametersException.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Simpleflow.Exceptions.DuplicateParametersException"/> class with
            a specified function name.
            </summary>
            <param name="repeatedParameters">The repeated parameters that caused the exception.</param>
        </member>
        <member name="T:Simpleflow.Exceptions.DuplicateVariableDeclarationException">
            <summary>
            The exception is thrown when a same variable is defined more than once.
            </summary>
        </member>
        <member name="M:Simpleflow.Exceptions.DuplicateVariableDeclarationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simpleflow.Exceptions.DuplicateVariableDeclarationException"/> class with
            a specified variable name.
            </summary>
            <param name="name">The variable name that caused the exception.</param>
        </member>
        <member name="P:Simpleflow.Exceptions.DuplicateVariableDeclarationException.VariableName">
            <summary>
            Gets name of the variable that has been declared more than once.
            </summary>
        </member>
        <member name="T:Simpleflow.Exceptions.InvalidFunctionException">
            <summary>
            The exception is thrown when function name is not registered with the Simpleflow runtime.
            Please use <see cref="T:Simpleflow.FunctionRegister"/> or <see cref="T:Simpleflow.IFunctionRegister"/> appropriately to register functions.
            </summary>
        </member>
        <member name="M:Simpleflow.Exceptions.InvalidFunctionException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simpleflow.Exceptions.InvalidFunctionException"/> class with
            a specified function name.
            </summary>
            <param name="functionName">The function name that caused the exception.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="P:Simpleflow.Exceptions.InvalidFunctionException.FunctionName">
            <summary>
            Gets the name of the function that caused the error.
            </summary>
        </member>
        <member name="T:Simpleflow.Exceptions.InvalidFunctionNameException">
            <summary>
            The exception is thrown when function name is not specified as per naming standards.
            </summary>
        </member>
        <member name="M:Simpleflow.Exceptions.InvalidFunctionNameException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simpleflow.Exceptions.InvalidFunctionNameException"/> class with
            a specified variable name.
            </summary>
            <param name="functionName">The function name that caused the exception.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="P:Simpleflow.Exceptions.InvalidFunctionNameException.FunctionName">
            <summary>
            Gets the name of the function that caused the error.
            </summary>
        </member>
        <member name="T:Simpleflow.Exceptions.InvalidFunctionParameterNameException">
            <summary>
            The exception is thrown when function parameter is not valid type or not declared.
            </summary>
        </member>
        <member name="M:Simpleflow.Exceptions.InvalidFunctionParameterNameException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simpleflow.Exceptions.InvalidFunctionException"/> class with
            a specified variable name.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Simpleflow.Exceptions.InvalidPropertyException">
            <summary>
            The exception is thrown when unavailable property is specified to access.
            </summary>
        </member>
        <member name="M:Simpleflow.Exceptions.InvalidPropertyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simpleflow.Exceptions.InvalidPropertyException"/> class with
            a specified variable name.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Simpleflow.Exceptions.SimpleflowException">
            <summary>
            Represents base exception for all Simpleflow exceptions
            </summary>
        </member>
        <member name="M:Simpleflow.Exceptions.SimpleflowException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simpleflow.Exceptions.SimpleflowException"/> class with
            a specified variable name.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Simpleflow.Exceptions.SyntaxException">
            <summary>
            The exception is thrown when any syntax errors are present in the Simpleflow script.
            </summary>
        </member>
        <member name="M:Simpleflow.Exceptions.SyntaxException.#ctor(System.String,System.Collections.Generic.IEnumerable{Simpleflow.SyntaxError})">
            <summary>
            Initializes a new instance of the <see cref="T:Simpleflow.Exceptions.SimpleflowException"/> class with
            a specified variable name.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="errors">The list of syntax errors that caused the exception.</param>
        </member>
        <member name="T:Simpleflow.Exceptions.UndeclaredVariableException">
            <summary>
            The exception is thrown when a variable is used that has not been declared in the script.
            </summary>
        </member>
        <member name="M:Simpleflow.Exceptions.UndeclaredVariableException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simpleflow.Exceptions.UndeclaredVariableException"/> class with
            a specified variable name.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="name">The name of the variable that caused the exception.</param>
        </member>
        <member name="P:Simpleflow.Exceptions.UndeclaredVariableException.VariableName">
            <summary>
            Gets the name of the variable that has not been declared in script.
            </summary>
        </member>
        <member name="T:Simpleflow.Exceptions.ValueTypeMismatchException">
            <summary>
            The exception is thrown when different type of value is specified than initially declared type.
            </summary>
        </member>
        <member name="M:Simpleflow.Exceptions.ValueTypeMismatchException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simpleflow.Exceptions.ValueTypeMismatchException"/> class with
            a specified variable name.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Simpleflow.Exceptions.ValueTypeMismatchException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simpleflow.Exceptions.ValueTypeMismatchException"/> class with
            a specified variable name.
            </summary>
            <param name="value">The value that caused the exception.</param>
            <param name="expectedType">The expected data type of value.</param>
        </member>
        <member name="T:Simpleflow.Exceptions.VariableNameViolationException">
            <summary>
            The exception is thrown when a keyword is used for a variable.
            </summary>
        </member>
        <member name="M:Simpleflow.Exceptions.VariableNameViolationException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Simpleflow.Exceptions.VariableNameViolationException"/> class with
            a specified variable name.
            </summary>
            <param name="name">The name that caused the exception.</param>
            <param name="message">The message describes the exception.</param>
        </member>
        <member name="T:Simpleflow.Extensions.SimpleflowExtensions">
            <summary>
            Extension methods to run Simpleflow with various input types.
            </summary>
        </member>
        <member name="T:Simpleflow.FlowContext`1">
            <summary>
            A <see cref="T:Simpleflow.FlowContext`1"/> instance represents input and output.
            </summary>
        </member>
        <member name="P:Simpleflow.FlowContext`1.Trace">
            <summary>
            Gets the trace to verify the middleware info
            </summary>
        </member>
        <member name="T:Simpleflow.FlowContextOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Simpleflow.FlowContextOptions.Id">
            <inheritdoc/>
        </member>
        <member name="P:Simpleflow.FlowContextOptions.ResetCache">
            <inheritdoc/>
        </member>
        <member name="P:Simpleflow.FlowContextOptions.CancellationToken">
            <inheritdoc/>
        </member>
        <member name="T:Simpleflow.FlowOptions">
            <inheritdoc />
        </member>
        <member name="P:Simpleflow.FlowOptions.AllowFunctions">
            <summary>
            Gets or sets AllowFunctions
            </summary>
        </member>
        <member name="P:Simpleflow.FlowOptions.DenyFunctions">
            <summary>
            Gets or sets DenyFunctions
            </summary>
        </member>
        <member name="P:Simpleflow.FlowOptions.CacheOptions">
            <summary>
            Gets or sets CacheOptions
            </summary>
        </member>
        <member name="T:Simpleflow.FlowOutput">
            <summary>
            Represents final output of simple flow
            </summary>
        </member>
        <member name="P:Simpleflow.FlowOutput.Messages">
            <summary> 
            Get or set messages
            </summary>
        </member>
        <member name="P:Simpleflow.FlowOutput.Errors">
            <summary>
            if there are errors engines throws an exception ValidationException 
            </summary>
        </member>
        <member name="P:Simpleflow.FlowOutput.Output">
            <summary>
            Get or set arbitrary objects as output from script
            </summary>
        </member>
        <member name="T:Simpleflow.FunctionRegister">
            <summary>
            
            </summary>
        </member>
        <member name="P:Simpleflow.FunctionRegister.Default">
            <summary>
            
            </summary>
        </member>
        <member name="M:Simpleflow.FunctionRegister.GetFunction(System.String,Simpleflow.ArgumentInfo[])">
            <inheritdoc />
        </member>
        <member name="T:Simpleflow.IContextOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Simpleflow.IContextOptions.Id">
            <summary>
            Gets or sets unique id of the script
            If Id is supplied, CacheService will use it to identify the compiled object
            in cache otherwise it creates a hash id for that script.
            </summary>
        </member>
        <member name="P:Simpleflow.IContextOptions.ResetCache">
            <summary>
            Reset cache allows to remove the item from cache if exists and add it once its compiled.
            </summary>
        </member>
        <member name="P:Simpleflow.IContextOptions.CancellationToken">
            <summary>
            Gets or sets <see cref="T:System.Threading.CancellationToken"/>
            </summary>
        </member>
        <member name="T:Simpleflow.IFlowPipelineService">
            <summary>
            Represents middleware abstraction for pipeline configuration.
            </summary>
        </member>
        <member name="M:Simpleflow.IFlowPipelineService.Run``1(Simpleflow.FlowContext{``0},Simpleflow.NextPipelineService{``0})">
            <summary>
            Run pipeline service
            </summary>
            <param name="context"></param>
            <param name="next"><paramref name="next"/> would be null if no service in queue after the current one</param>
            <returns></returns>
        </member>
        <member name="T:Simpleflow.IFunctionProvider">
            <summary>
            Use to provide appropriate delegate based on name 
            and argument information
            </summary>
        </member>
        <member name="M:Simpleflow.IFunctionProvider.GetFunction(System.String,Simpleflow.ArgumentInfo[])">
            <summary>
            Get function reference to invoke
            </summary>
            <param name="name"></param>
            <param name="argumentInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Simpleflow.IFunctionRegister">
            <summary>
            
            </summary>
        </member>
        <member name="M:Simpleflow.IFunctionRegister.Add(System.String,System.Delegate)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="delegate"></param>
            <returns></returns>
        </member>
        <member name="M:Simpleflow.IFunctionRegister.GetFunction(System.String,Simpleflow.ArgumentInfo[])">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="argumentInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Simpleflow.IOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Simpleflow.IOptions.AllowFunctions">
            <summary>
            Gets or sets AllowFunctions
            </summary>
        </member>
        <member name="P:Simpleflow.IOptions.DenyFunctions">
            <summary>
            Gets or sets DenyFunctions
            </summary>
        </member>
        <member name="P:Simpleflow.IOptions.CacheOptions">
            <summary>
            Gets or sets cache options
            </summary>
        </member>
        <member name="T:Simpleflow.ISimpleflow">
            <summary>
            Defines a contract to execute simple flow
            </summary>
        </member>
        <member name="T:Simpleflow.ISimpleflowPipelineBuilder">
            <summary>
            Represents simple flow builder abstraction.
            Builds pipeline using middleware and with default services.
            </summary>
        </member>
        <member name="P:Simpleflow.ISimpleflowPipelineBuilder.Services">
            <summary>
            Gets list of services that have been added
            </summary>
        </member>
        <member name="M:Simpleflow.ISimpleflowPipelineBuilder.AddCorePipelineServices(Simpleflow.IOptions)">
            <summary>
            Adds default core services. Please check the implementation
            class documentation for added default services.
            </summary>
            <returns>The <see cref="T:Simpleflow.ISimpleflowPipelineBuilder"/></returns>
        </member>
        <member name="M:Simpleflow.ISimpleflowPipelineBuilder.AddCorePipelineServices(Simpleflow.IFunctionRegister,Simpleflow.IOptions)">
            <summary>
            Adds default core services. Please check the implementation
            class documentation for added default services.
            </summary>
            <returns>The <see cref="T:Simpleflow.ISimpleflowPipelineBuilder"/></returns>
        </member>
        <member name="M:Simpleflow.ISimpleflowPipelineBuilder.AddPipelineServices(Simpleflow.IFlowPipelineService[])">
            <summary>
            Adds middleware services to simpleflow 
            </summary>
            <param name="services">Specify the list of services to be added</param>
            <returns>The <see cref="T:Simpleflow.ISimpleflowPipelineBuilder"/> </returns>
        </member>
        <member name="M:Simpleflow.ISimpleflowPipelineBuilder.Build">
            <summary>
            Builds pipeline and provides core engine
            with all the middleware that have been configured
            </summary>
            <returns>The <see cref="T:Simpleflow.ISimpleflow"/></returns>
        </member>
        <member name="T:Simpleflow.NextPipelineService`1">
            <summary>
            Represents a function to execute next middleware in the pipeline. 
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Simpleflow.Parser.SimpleflowParserBaseListener">
            <summary>
            This class provides an empty implementation of <see cref="T:Simpleflow.Parser.ISimpleflowParserListener"/>,
            which can be extended to create a listener which only needs to handle a subset
            of the available methods.
            </summary>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterProgram(Simpleflow.Parser.SimpleflowParser.ProgramContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.program"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitProgram(Simpleflow.Parser.SimpleflowParser.ProgramContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.program"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterLetStmt(Simpleflow.Parser.SimpleflowParser.LetStmtContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.letStmt"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitLetStmt(Simpleflow.Parser.SimpleflowParser.LetStmtContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.letStmt"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterRuleStmt(Simpleflow.Parser.SimpleflowParser.RuleStmtContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.ruleStmt"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitRuleStmt(Simpleflow.Parser.SimpleflowParser.RuleStmtContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.ruleStmt"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterGeneralStatement(Simpleflow.Parser.SimpleflowParser.GeneralStatementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.generalStatement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitGeneralStatement(Simpleflow.Parser.SimpleflowParser.GeneralStatementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.generalStatement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterEndRuleStmt(Simpleflow.Parser.SimpleflowParser.EndRuleStmtContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.endRuleStmt"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitEndRuleStmt(Simpleflow.Parser.SimpleflowParser.EndRuleStmtContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.endRuleStmt"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterSetStmt(Simpleflow.Parser.SimpleflowParser.SetStmtContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.setStmt"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitSetStmt(Simpleflow.Parser.SimpleflowParser.SetStmtContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.setStmt"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterMessageStmt(Simpleflow.Parser.SimpleflowParser.MessageStmtContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.messageStmt"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitMessageStmt(Simpleflow.Parser.SimpleflowParser.MessageStmtContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.messageStmt"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterErrorStmt(Simpleflow.Parser.SimpleflowParser.ErrorStmtContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.errorStmt"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitErrorStmt(Simpleflow.Parser.SimpleflowParser.ErrorStmtContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.errorStmt"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterOutputStmt(Simpleflow.Parser.SimpleflowParser.OutputStmtContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.outputStmt"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitOutputStmt(Simpleflow.Parser.SimpleflowParser.OutputStmtContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.outputStmt"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterFunctionStmt(Simpleflow.Parser.SimpleflowParser.FunctionStmtContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.functionStmt"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitFunctionStmt(Simpleflow.Parser.SimpleflowParser.FunctionStmtContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.functionStmt"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterExitStmt(Simpleflow.Parser.SimpleflowParser.ExitStmtContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.exitStmt"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitExitStmt(Simpleflow.Parser.SimpleflowParser.ExitStmtContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.exitStmt"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterUniaryMinusExpression(Simpleflow.Parser.SimpleflowParser.UniaryMinusExpressionContext)">
            <summary>
            Enter a parse tree produced by the <c>UniaryMinusExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitUniaryMinusExpression(Simpleflow.Parser.SimpleflowParser.UniaryMinusExpressionContext)">
            <summary>
            Exit a parse tree produced by the <c>UniaryMinusExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterParenthesizedExpression(Simpleflow.Parser.SimpleflowParser.ParenthesizedExpressionContext)">
            <summary>
            Enter a parse tree produced by the <c>ParenthesizedExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitParenthesizedExpression(Simpleflow.Parser.SimpleflowParser.ParenthesizedExpressionContext)">
            <summary>
            Exit a parse tree produced by the <c>ParenthesizedExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterAdditiveExpression(Simpleflow.Parser.SimpleflowParser.AdditiveExpressionContext)">
            <summary>
            Enter a parse tree produced by the <c>AdditiveExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitAdditiveExpression(Simpleflow.Parser.SimpleflowParser.AdditiveExpressionContext)">
            <summary>
            Exit a parse tree produced by the <c>AdditiveExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterRelationalExpression(Simpleflow.Parser.SimpleflowParser.RelationalExpressionContext)">
            <summary>
            Enter a parse tree produced by the <c>RelationalExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitRelationalExpression(Simpleflow.Parser.SimpleflowParser.RelationalExpressionContext)">
            <summary>
            Exit a parse tree produced by the <c>RelationalExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterArrayLiteralExpression(Simpleflow.Parser.SimpleflowParser.ArrayLiteralExpressionContext)">
            <summary>
            Enter a parse tree produced by the <c>ArrayLiteralExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitArrayLiteralExpression(Simpleflow.Parser.SimpleflowParser.ArrayLiteralExpressionContext)">
            <summary>
            Exit a parse tree produced by the <c>ArrayLiteralExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterNotExpression(Simpleflow.Parser.SimpleflowParser.NotExpressionContext)">
            <summary>
            Enter a parse tree produced by the <c>NotExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitNotExpression(Simpleflow.Parser.SimpleflowParser.NotExpressionContext)">
            <summary>
            Exit a parse tree produced by the <c>NotExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterLogicalExpression(Simpleflow.Parser.SimpleflowParser.LogicalExpressionContext)">
            <summary>
            Enter a parse tree produced by the <c>LogicalExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitLogicalExpression(Simpleflow.Parser.SimpleflowParser.LogicalExpressionContext)">
            <summary>
            Exit a parse tree produced by the <c>LogicalExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterObjectIdentiferExpression(Simpleflow.Parser.SimpleflowParser.ObjectIdentiferExpressionContext)">
            <summary>
            Enter a parse tree produced by the <c>ObjectIdentiferExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitObjectIdentiferExpression(Simpleflow.Parser.SimpleflowParser.ObjectIdentiferExpressionContext)">
            <summary>
            Exit a parse tree produced by the <c>ObjectIdentiferExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterFunctionExpression(Simpleflow.Parser.SimpleflowParser.FunctionExpressionContext)">
            <summary>
            Enter a parse tree produced by the <c>FunctionExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitFunctionExpression(Simpleflow.Parser.SimpleflowParser.FunctionExpressionContext)">
            <summary>
            Exit a parse tree produced by the <c>FunctionExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterUniaryPlusExpression(Simpleflow.Parser.SimpleflowParser.UniaryPlusExpressionContext)">
            <summary>
            Enter a parse tree produced by the <c>UniaryPlusExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitUniaryPlusExpression(Simpleflow.Parser.SimpleflowParser.UniaryPlusExpressionContext)">
            <summary>
            Exit a parse tree produced by the <c>UniaryPlusExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterSimpleLiteralExpression(Simpleflow.Parser.SimpleflowParser.SimpleLiteralExpressionContext)">
            <summary>
            Enter a parse tree produced by the <c>SimpleLiteralExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitSimpleLiteralExpression(Simpleflow.Parser.SimpleflowParser.SimpleLiteralExpressionContext)">
            <summary>
            Exit a parse tree produced by the <c>SimpleLiteralExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterJsonObjLiteralExpression(Simpleflow.Parser.SimpleflowParser.JsonObjLiteralExpressionContext)">
            <summary>
            Enter a parse tree produced by the <c>JsonObjLiteralExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitJsonObjLiteralExpression(Simpleflow.Parser.SimpleflowParser.JsonObjLiteralExpressionContext)">
            <summary>
            Exit a parse tree produced by the <c>JsonObjLiteralExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterMultiplicativeExpression(Simpleflow.Parser.SimpleflowParser.MultiplicativeExpressionContext)">
            <summary>
            Enter a parse tree produced by the <c>MultiplicativeExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitMultiplicativeExpression(Simpleflow.Parser.SimpleflowParser.MultiplicativeExpressionContext)">
            <summary>
            Exit a parse tree produced by the <c>MultiplicativeExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterSimpleLiteral(Simpleflow.Parser.SimpleflowParser.SimpleLiteralContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.simpleLiteral"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitSimpleLiteral(Simpleflow.Parser.SimpleflowParser.SimpleLiteralContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.simpleLiteral"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterTemplateStringLiteral(Simpleflow.Parser.SimpleflowParser.TemplateStringLiteralContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.templateStringLiteral"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitTemplateStringLiteral(Simpleflow.Parser.SimpleflowParser.TemplateStringLiteralContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.templateStringLiteral"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterTemplateStringAtom(Simpleflow.Parser.SimpleflowParser.TemplateStringAtomContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.templateStringAtom"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitTemplateStringAtom(Simpleflow.Parser.SimpleflowParser.TemplateStringAtomContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.templateStringAtom"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterFunction(Simpleflow.Parser.SimpleflowParser.FunctionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.function"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitFunction(Simpleflow.Parser.SimpleflowParser.FunctionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.function"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterFunctionArguments(Simpleflow.Parser.SimpleflowParser.FunctionArgumentsContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.functionArguments"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitFunctionArguments(Simpleflow.Parser.SimpleflowParser.FunctionArgumentsContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.functionArguments"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterFunctionArgument(Simpleflow.Parser.SimpleflowParser.FunctionArgumentContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.functionArgument"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitFunctionArgument(Simpleflow.Parser.SimpleflowParser.FunctionArgumentContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.functionArgument"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterObjectIdentifier(Simpleflow.Parser.SimpleflowParser.ObjectIdentifierContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.objectIdentifier"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitObjectIdentifier(Simpleflow.Parser.SimpleflowParser.ObjectIdentifierContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.objectIdentifier"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterIdentifierIndex(Simpleflow.Parser.SimpleflowParser.IdentifierIndexContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.identifierIndex"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitIdentifierIndex(Simpleflow.Parser.SimpleflowParser.IdentifierIndexContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.identifierIndex"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterIndex(Simpleflow.Parser.SimpleflowParser.IndexContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.index"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitIndex(Simpleflow.Parser.SimpleflowParser.IndexContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.index"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterStringLiteral(Simpleflow.Parser.SimpleflowParser.StringLiteralContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.stringLiteral"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitStringLiteral(Simpleflow.Parser.SimpleflowParser.StringLiteralContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.stringLiteral"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterNumberLiteral(Simpleflow.Parser.SimpleflowParser.NumberLiteralContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.numberLiteral"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitNumberLiteral(Simpleflow.Parser.SimpleflowParser.NumberLiteralContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.numberLiteral"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterBoolLeteral(Simpleflow.Parser.SimpleflowParser.BoolLeteralContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.boolLeteral"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitBoolLeteral(Simpleflow.Parser.SimpleflowParser.BoolLeteralContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.boolLeteral"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterNoneLiteral(Simpleflow.Parser.SimpleflowParser.NoneLiteralContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.noneLiteral"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitNoneLiteral(Simpleflow.Parser.SimpleflowParser.NoneLiteralContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.noneLiteral"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterArrayLiteral(Simpleflow.Parser.SimpleflowParser.ArrayLiteralContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.arrayLiteral"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitArrayLiteral(Simpleflow.Parser.SimpleflowParser.ArrayLiteralContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.arrayLiteral"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterJsonObjLiteral(Simpleflow.Parser.SimpleflowParser.JsonObjLiteralContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.jsonObjLiteral"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitJsonObjLiteral(Simpleflow.Parser.SimpleflowParser.JsonObjLiteralContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.jsonObjLiteral"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterPair(Simpleflow.Parser.SimpleflowParser.PairContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.pair"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitPair(Simpleflow.Parser.SimpleflowParser.PairContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.pair"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterEos(Simpleflow.Parser.SimpleflowParser.EosContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.eos"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitEos(Simpleflow.Parser.SimpleflowParser.EosContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.eos"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.EnterEveryRule(Antlr4.Runtime.ParserRuleContext)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.ExitEveryRule(Antlr4.Runtime.ParserRuleContext)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.VisitTerminal(Antlr4.Runtime.Tree.ITerminalNode)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseListener.VisitErrorNode(Antlr4.Runtime.Tree.IErrorNode)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="T:Simpleflow.Parser.SimpleflowParserBaseVisitor`1">
            <summary>
            This class provides an empty implementation of <see cref="T:Simpleflow.Parser.ISimpleflowParserVisitor`1"/>,
            which can be extended to create a visitor which only needs to handle a subset
            of the available methods.
            </summary>
            <typeparam name="Result">The return type of the visit operation.</typeparam>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitProgram(Simpleflow.Parser.SimpleflowParser.ProgramContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.program"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitLetStmt(Simpleflow.Parser.SimpleflowParser.LetStmtContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.letStmt"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitRuleStmt(Simpleflow.Parser.SimpleflowParser.RuleStmtContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.ruleStmt"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitGeneralStatement(Simpleflow.Parser.SimpleflowParser.GeneralStatementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.generalStatement"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitEndRuleStmt(Simpleflow.Parser.SimpleflowParser.EndRuleStmtContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.endRuleStmt"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitSetStmt(Simpleflow.Parser.SimpleflowParser.SetStmtContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.setStmt"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitMessageStmt(Simpleflow.Parser.SimpleflowParser.MessageStmtContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.messageStmt"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitErrorStmt(Simpleflow.Parser.SimpleflowParser.ErrorStmtContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.errorStmt"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitOutputStmt(Simpleflow.Parser.SimpleflowParser.OutputStmtContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.outputStmt"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitFunctionStmt(Simpleflow.Parser.SimpleflowParser.FunctionStmtContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.functionStmt"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitExitStmt(Simpleflow.Parser.SimpleflowParser.ExitStmtContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.exitStmt"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitUniaryMinusExpression(Simpleflow.Parser.SimpleflowParser.UniaryMinusExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>UniaryMinusExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitParenthesizedExpression(Simpleflow.Parser.SimpleflowParser.ParenthesizedExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>ParenthesizedExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitAdditiveExpression(Simpleflow.Parser.SimpleflowParser.AdditiveExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>AdditiveExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitRelationalExpression(Simpleflow.Parser.SimpleflowParser.RelationalExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>RelationalExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitArrayLiteralExpression(Simpleflow.Parser.SimpleflowParser.ArrayLiteralExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>ArrayLiteralExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitNotExpression(Simpleflow.Parser.SimpleflowParser.NotExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>NotExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitLogicalExpression(Simpleflow.Parser.SimpleflowParser.LogicalExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>LogicalExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitObjectIdentiferExpression(Simpleflow.Parser.SimpleflowParser.ObjectIdentiferExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>ObjectIdentiferExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitFunctionExpression(Simpleflow.Parser.SimpleflowParser.FunctionExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>FunctionExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitUniaryPlusExpression(Simpleflow.Parser.SimpleflowParser.UniaryPlusExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>UniaryPlusExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitSimpleLiteralExpression(Simpleflow.Parser.SimpleflowParser.SimpleLiteralExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>SimpleLiteralExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitJsonObjLiteralExpression(Simpleflow.Parser.SimpleflowParser.JsonObjLiteralExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>JsonObjLiteralExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitMultiplicativeExpression(Simpleflow.Parser.SimpleflowParser.MultiplicativeExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>MultiplicativeExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitSimpleLiteral(Simpleflow.Parser.SimpleflowParser.SimpleLiteralContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.simpleLiteral"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitTemplateStringLiteral(Simpleflow.Parser.SimpleflowParser.TemplateStringLiteralContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.templateStringLiteral"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitTemplateStringAtom(Simpleflow.Parser.SimpleflowParser.TemplateStringAtomContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.templateStringAtom"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitFunction(Simpleflow.Parser.SimpleflowParser.FunctionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.function"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitFunctionArguments(Simpleflow.Parser.SimpleflowParser.FunctionArgumentsContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.functionArguments"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitFunctionArgument(Simpleflow.Parser.SimpleflowParser.FunctionArgumentContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.functionArgument"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitObjectIdentifier(Simpleflow.Parser.SimpleflowParser.ObjectIdentifierContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.objectIdentifier"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitIdentifierIndex(Simpleflow.Parser.SimpleflowParser.IdentifierIndexContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.identifierIndex"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitIndex(Simpleflow.Parser.SimpleflowParser.IndexContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.index"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitStringLiteral(Simpleflow.Parser.SimpleflowParser.StringLiteralContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.stringLiteral"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitNumberLiteral(Simpleflow.Parser.SimpleflowParser.NumberLiteralContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.numberLiteral"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitBoolLeteral(Simpleflow.Parser.SimpleflowParser.BoolLeteralContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.boolLeteral"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitNoneLiteral(Simpleflow.Parser.SimpleflowParser.NoneLiteralContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.noneLiteral"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitArrayLiteral(Simpleflow.Parser.SimpleflowParser.ArrayLiteralContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.arrayLiteral"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitJsonObjLiteral(Simpleflow.Parser.SimpleflowParser.JsonObjLiteralContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.jsonObjLiteral"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitPair(Simpleflow.Parser.SimpleflowParser.PairContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.pair"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.SimpleflowParserBaseVisitor`1.VisitEos(Simpleflow.Parser.SimpleflowParser.EosContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.eos"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="T:Simpleflow.Parser.ISimpleflowParserListener">
            <summary>
            This interface defines a complete listener for a parse tree produced by
            <see cref="T:Simpleflow.Parser.SimpleflowParser"/>.
            </summary>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterProgram(Simpleflow.Parser.SimpleflowParser.ProgramContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.program"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitProgram(Simpleflow.Parser.SimpleflowParser.ProgramContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.program"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterLetStmt(Simpleflow.Parser.SimpleflowParser.LetStmtContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.letStmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitLetStmt(Simpleflow.Parser.SimpleflowParser.LetStmtContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.letStmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterRuleStmt(Simpleflow.Parser.SimpleflowParser.RuleStmtContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.ruleStmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitRuleStmt(Simpleflow.Parser.SimpleflowParser.RuleStmtContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.ruleStmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterGeneralStatement(Simpleflow.Parser.SimpleflowParser.GeneralStatementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.generalStatement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitGeneralStatement(Simpleflow.Parser.SimpleflowParser.GeneralStatementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.generalStatement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterEndRuleStmt(Simpleflow.Parser.SimpleflowParser.EndRuleStmtContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.endRuleStmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitEndRuleStmt(Simpleflow.Parser.SimpleflowParser.EndRuleStmtContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.endRuleStmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterSetStmt(Simpleflow.Parser.SimpleflowParser.SetStmtContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.setStmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitSetStmt(Simpleflow.Parser.SimpleflowParser.SetStmtContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.setStmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterMessageStmt(Simpleflow.Parser.SimpleflowParser.MessageStmtContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.messageStmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitMessageStmt(Simpleflow.Parser.SimpleflowParser.MessageStmtContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.messageStmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterErrorStmt(Simpleflow.Parser.SimpleflowParser.ErrorStmtContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.errorStmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitErrorStmt(Simpleflow.Parser.SimpleflowParser.ErrorStmtContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.errorStmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterOutputStmt(Simpleflow.Parser.SimpleflowParser.OutputStmtContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.outputStmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitOutputStmt(Simpleflow.Parser.SimpleflowParser.OutputStmtContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.outputStmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterFunctionStmt(Simpleflow.Parser.SimpleflowParser.FunctionStmtContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.functionStmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitFunctionStmt(Simpleflow.Parser.SimpleflowParser.FunctionStmtContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.functionStmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterExitStmt(Simpleflow.Parser.SimpleflowParser.ExitStmtContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.exitStmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitExitStmt(Simpleflow.Parser.SimpleflowParser.ExitStmtContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.exitStmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterUniaryMinusExpression(Simpleflow.Parser.SimpleflowParser.UniaryMinusExpressionContext)">
            <summary>
            Enter a parse tree produced by the <c>UniaryMinusExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitUniaryMinusExpression(Simpleflow.Parser.SimpleflowParser.UniaryMinusExpressionContext)">
            <summary>
            Exit a parse tree produced by the <c>UniaryMinusExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterParenthesizedExpression(Simpleflow.Parser.SimpleflowParser.ParenthesizedExpressionContext)">
            <summary>
            Enter a parse tree produced by the <c>ParenthesizedExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitParenthesizedExpression(Simpleflow.Parser.SimpleflowParser.ParenthesizedExpressionContext)">
            <summary>
            Exit a parse tree produced by the <c>ParenthesizedExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterAdditiveExpression(Simpleflow.Parser.SimpleflowParser.AdditiveExpressionContext)">
            <summary>
            Enter a parse tree produced by the <c>AdditiveExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitAdditiveExpression(Simpleflow.Parser.SimpleflowParser.AdditiveExpressionContext)">
            <summary>
            Exit a parse tree produced by the <c>AdditiveExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterRelationalExpression(Simpleflow.Parser.SimpleflowParser.RelationalExpressionContext)">
            <summary>
            Enter a parse tree produced by the <c>RelationalExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitRelationalExpression(Simpleflow.Parser.SimpleflowParser.RelationalExpressionContext)">
            <summary>
            Exit a parse tree produced by the <c>RelationalExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterArrayLiteralExpression(Simpleflow.Parser.SimpleflowParser.ArrayLiteralExpressionContext)">
            <summary>
            Enter a parse tree produced by the <c>ArrayLiteralExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitArrayLiteralExpression(Simpleflow.Parser.SimpleflowParser.ArrayLiteralExpressionContext)">
            <summary>
            Exit a parse tree produced by the <c>ArrayLiteralExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterNotExpression(Simpleflow.Parser.SimpleflowParser.NotExpressionContext)">
            <summary>
            Enter a parse tree produced by the <c>NotExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitNotExpression(Simpleflow.Parser.SimpleflowParser.NotExpressionContext)">
            <summary>
            Exit a parse tree produced by the <c>NotExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterLogicalExpression(Simpleflow.Parser.SimpleflowParser.LogicalExpressionContext)">
            <summary>
            Enter a parse tree produced by the <c>LogicalExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitLogicalExpression(Simpleflow.Parser.SimpleflowParser.LogicalExpressionContext)">
            <summary>
            Exit a parse tree produced by the <c>LogicalExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterObjectIdentiferExpression(Simpleflow.Parser.SimpleflowParser.ObjectIdentiferExpressionContext)">
            <summary>
            Enter a parse tree produced by the <c>ObjectIdentiferExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitObjectIdentiferExpression(Simpleflow.Parser.SimpleflowParser.ObjectIdentiferExpressionContext)">
            <summary>
            Exit a parse tree produced by the <c>ObjectIdentiferExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterFunctionExpression(Simpleflow.Parser.SimpleflowParser.FunctionExpressionContext)">
            <summary>
            Enter a parse tree produced by the <c>FunctionExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitFunctionExpression(Simpleflow.Parser.SimpleflowParser.FunctionExpressionContext)">
            <summary>
            Exit a parse tree produced by the <c>FunctionExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterUniaryPlusExpression(Simpleflow.Parser.SimpleflowParser.UniaryPlusExpressionContext)">
            <summary>
            Enter a parse tree produced by the <c>UniaryPlusExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitUniaryPlusExpression(Simpleflow.Parser.SimpleflowParser.UniaryPlusExpressionContext)">
            <summary>
            Exit a parse tree produced by the <c>UniaryPlusExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterSimpleLiteralExpression(Simpleflow.Parser.SimpleflowParser.SimpleLiteralExpressionContext)">
            <summary>
            Enter a parse tree produced by the <c>SimpleLiteralExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitSimpleLiteralExpression(Simpleflow.Parser.SimpleflowParser.SimpleLiteralExpressionContext)">
            <summary>
            Exit a parse tree produced by the <c>SimpleLiteralExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterJsonObjLiteralExpression(Simpleflow.Parser.SimpleflowParser.JsonObjLiteralExpressionContext)">
            <summary>
            Enter a parse tree produced by the <c>JsonObjLiteralExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitJsonObjLiteralExpression(Simpleflow.Parser.SimpleflowParser.JsonObjLiteralExpressionContext)">
            <summary>
            Exit a parse tree produced by the <c>JsonObjLiteralExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterMultiplicativeExpression(Simpleflow.Parser.SimpleflowParser.MultiplicativeExpressionContext)">
            <summary>
            Enter a parse tree produced by the <c>MultiplicativeExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitMultiplicativeExpression(Simpleflow.Parser.SimpleflowParser.MultiplicativeExpressionContext)">
            <summary>
            Exit a parse tree produced by the <c>MultiplicativeExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterSimpleLiteral(Simpleflow.Parser.SimpleflowParser.SimpleLiteralContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.simpleLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitSimpleLiteral(Simpleflow.Parser.SimpleflowParser.SimpleLiteralContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.simpleLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterTemplateStringLiteral(Simpleflow.Parser.SimpleflowParser.TemplateStringLiteralContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.templateStringLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitTemplateStringLiteral(Simpleflow.Parser.SimpleflowParser.TemplateStringLiteralContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.templateStringLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterTemplateStringAtom(Simpleflow.Parser.SimpleflowParser.TemplateStringAtomContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.templateStringAtom"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitTemplateStringAtom(Simpleflow.Parser.SimpleflowParser.TemplateStringAtomContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.templateStringAtom"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterFunction(Simpleflow.Parser.SimpleflowParser.FunctionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.function"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitFunction(Simpleflow.Parser.SimpleflowParser.FunctionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.function"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterFunctionArguments(Simpleflow.Parser.SimpleflowParser.FunctionArgumentsContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.functionArguments"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitFunctionArguments(Simpleflow.Parser.SimpleflowParser.FunctionArgumentsContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.functionArguments"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterFunctionArgument(Simpleflow.Parser.SimpleflowParser.FunctionArgumentContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.functionArgument"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitFunctionArgument(Simpleflow.Parser.SimpleflowParser.FunctionArgumentContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.functionArgument"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterObjectIdentifier(Simpleflow.Parser.SimpleflowParser.ObjectIdentifierContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.objectIdentifier"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitObjectIdentifier(Simpleflow.Parser.SimpleflowParser.ObjectIdentifierContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.objectIdentifier"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterIdentifierIndex(Simpleflow.Parser.SimpleflowParser.IdentifierIndexContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.identifierIndex"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitIdentifierIndex(Simpleflow.Parser.SimpleflowParser.IdentifierIndexContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.identifierIndex"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterIndex(Simpleflow.Parser.SimpleflowParser.IndexContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.index"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitIndex(Simpleflow.Parser.SimpleflowParser.IndexContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.index"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterStringLiteral(Simpleflow.Parser.SimpleflowParser.StringLiteralContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.stringLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitStringLiteral(Simpleflow.Parser.SimpleflowParser.StringLiteralContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.stringLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterNumberLiteral(Simpleflow.Parser.SimpleflowParser.NumberLiteralContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.numberLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitNumberLiteral(Simpleflow.Parser.SimpleflowParser.NumberLiteralContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.numberLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterBoolLeteral(Simpleflow.Parser.SimpleflowParser.BoolLeteralContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.boolLeteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitBoolLeteral(Simpleflow.Parser.SimpleflowParser.BoolLeteralContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.boolLeteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterNoneLiteral(Simpleflow.Parser.SimpleflowParser.NoneLiteralContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.noneLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitNoneLiteral(Simpleflow.Parser.SimpleflowParser.NoneLiteralContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.noneLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterArrayLiteral(Simpleflow.Parser.SimpleflowParser.ArrayLiteralContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.arrayLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitArrayLiteral(Simpleflow.Parser.SimpleflowParser.ArrayLiteralContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.arrayLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterJsonObjLiteral(Simpleflow.Parser.SimpleflowParser.JsonObjLiteralContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.jsonObjLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitJsonObjLiteral(Simpleflow.Parser.SimpleflowParser.JsonObjLiteralContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.jsonObjLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterPair(Simpleflow.Parser.SimpleflowParser.PairContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.pair"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitPair(Simpleflow.Parser.SimpleflowParser.PairContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.pair"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.EnterEos(Simpleflow.Parser.SimpleflowParser.EosContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.eos"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserListener.ExitEos(Simpleflow.Parser.SimpleflowParser.EosContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.eos"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="T:Simpleflow.Parser.ISimpleflowParserVisitor`1">
            <summary>
            This interface defines a complete generic visitor for a parse tree produced
            by <see cref="T:Simpleflow.Parser.SimpleflowParser"/>.
            </summary>
            <typeparam name="Result">The return type of the visit operation.</typeparam>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitProgram(Simpleflow.Parser.SimpleflowParser.ProgramContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.program"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitLetStmt(Simpleflow.Parser.SimpleflowParser.LetStmtContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.letStmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitRuleStmt(Simpleflow.Parser.SimpleflowParser.RuleStmtContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.ruleStmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitGeneralStatement(Simpleflow.Parser.SimpleflowParser.GeneralStatementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.generalStatement"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitEndRuleStmt(Simpleflow.Parser.SimpleflowParser.EndRuleStmtContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.endRuleStmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitSetStmt(Simpleflow.Parser.SimpleflowParser.SetStmtContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.setStmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitMessageStmt(Simpleflow.Parser.SimpleflowParser.MessageStmtContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.messageStmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitErrorStmt(Simpleflow.Parser.SimpleflowParser.ErrorStmtContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.errorStmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitOutputStmt(Simpleflow.Parser.SimpleflowParser.OutputStmtContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.outputStmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitFunctionStmt(Simpleflow.Parser.SimpleflowParser.FunctionStmtContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.functionStmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitExitStmt(Simpleflow.Parser.SimpleflowParser.ExitStmtContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.exitStmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitUniaryMinusExpression(Simpleflow.Parser.SimpleflowParser.UniaryMinusExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>UniaryMinusExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitParenthesizedExpression(Simpleflow.Parser.SimpleflowParser.ParenthesizedExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>ParenthesizedExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitAdditiveExpression(Simpleflow.Parser.SimpleflowParser.AdditiveExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>AdditiveExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitRelationalExpression(Simpleflow.Parser.SimpleflowParser.RelationalExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>RelationalExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitArrayLiteralExpression(Simpleflow.Parser.SimpleflowParser.ArrayLiteralExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>ArrayLiteralExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitNotExpression(Simpleflow.Parser.SimpleflowParser.NotExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>NotExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitLogicalExpression(Simpleflow.Parser.SimpleflowParser.LogicalExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>LogicalExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitObjectIdentiferExpression(Simpleflow.Parser.SimpleflowParser.ObjectIdentiferExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>ObjectIdentiferExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitFunctionExpression(Simpleflow.Parser.SimpleflowParser.FunctionExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>FunctionExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitUniaryPlusExpression(Simpleflow.Parser.SimpleflowParser.UniaryPlusExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>UniaryPlusExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitSimpleLiteralExpression(Simpleflow.Parser.SimpleflowParser.SimpleLiteralExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>SimpleLiteralExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitJsonObjLiteralExpression(Simpleflow.Parser.SimpleflowParser.JsonObjLiteralExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>JsonObjLiteralExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitMultiplicativeExpression(Simpleflow.Parser.SimpleflowParser.MultiplicativeExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>MultiplicativeExpression</c>
            labeled alternative in <see cref="M:Simpleflow.Parser.SimpleflowParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitSimpleLiteral(Simpleflow.Parser.SimpleflowParser.SimpleLiteralContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.simpleLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitTemplateStringLiteral(Simpleflow.Parser.SimpleflowParser.TemplateStringLiteralContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.templateStringLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitTemplateStringAtom(Simpleflow.Parser.SimpleflowParser.TemplateStringAtomContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.templateStringAtom"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitFunction(Simpleflow.Parser.SimpleflowParser.FunctionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.function"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitFunctionArguments(Simpleflow.Parser.SimpleflowParser.FunctionArgumentsContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.functionArguments"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitFunctionArgument(Simpleflow.Parser.SimpleflowParser.FunctionArgumentContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.functionArgument"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitObjectIdentifier(Simpleflow.Parser.SimpleflowParser.ObjectIdentifierContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.objectIdentifier"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitIdentifierIndex(Simpleflow.Parser.SimpleflowParser.IdentifierIndexContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.identifierIndex"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitIndex(Simpleflow.Parser.SimpleflowParser.IndexContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.index"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitStringLiteral(Simpleflow.Parser.SimpleflowParser.StringLiteralContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.stringLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitNumberLiteral(Simpleflow.Parser.SimpleflowParser.NumberLiteralContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.numberLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitBoolLeteral(Simpleflow.Parser.SimpleflowParser.BoolLeteralContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.boolLeteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitNoneLiteral(Simpleflow.Parser.SimpleflowParser.NoneLiteralContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.noneLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitArrayLiteral(Simpleflow.Parser.SimpleflowParser.ArrayLiteralContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.arrayLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitJsonObjLiteral(Simpleflow.Parser.SimpleflowParser.JsonObjLiteralContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.jsonObjLiteral"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitPair(Simpleflow.Parser.SimpleflowParser.PairContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.pair"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:Simpleflow.Parser.ISimpleflowParserVisitor`1.VisitEos(Simpleflow.Parser.SimpleflowParser.EosContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:Simpleflow.Parser.SimpleflowParser.eos"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="T:Simpleflow.Resources.Message">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Simpleflow.Resources.Message.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Simpleflow.Resources.Message.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Simpleflow.Resources.Message.CannotIgnoreIdentifierForJsonObj">
            <summary>
              Looks up a localized string similar to JSON object cannot be defined by ignoring variable. Either remove that statement or provide a proper name to it instead of using _.
            </summary>
        </member>
        <member name="P:Simpleflow.Resources.Message.InOperatorOnList">
            <summary>
              Looks up a localized string similar to &apos;in&apos; operator cannot be applied on non-list types.
            </summary>
        </member>
        <member name="P:Simpleflow.Resources.Message.InvalidInput">
            <summary>
              Looks up a localized string similar to Invalid input.
            </summary>
        </member>
        <member name="P:Simpleflow.Resources.Message.InvalidPartialKeywordUsage">
            <summary>
              Looks up a localized string similar to &apos;partial&apos; keyword can only be used with JSON object to update properties.
            </summary>
        </member>
        <member name="P:Simpleflow.Resources.Message.RegisterNonStaticMethodError">
            <summary>
              Looks up a localized string similar to Provide static method only. It does not support non-static method.
            </summary>
        </member>
        <member name="P:Simpleflow.Resources.Message.RequestedEnumValueNotFound">
            <summary>
              Looks up a localized string similar to Requested value &apos;{0}&apos; was not found in type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Simpleflow.Resources.Message.ReservedWordException">
            <summary>
              Looks up a localized string similar to variable name &apos;{0}&apos; is a reserved word, cannot be used for variable name.
            </summary>
        </member>
        <member name="P:Simpleflow.Resources.Message.ServiceCannotBeNull">
            <summary>
              Looks up a localized string similar to Any one of the service cannot be null in array of services..
            </summary>
        </member>
        <member name="P:Simpleflow.Resources.Message.TypeMismatchWithExistingVar">
            <summary>
              Looks up a localized string similar to Type mismatch. Please choose a different name instead of using existing variable with a different type.
            </summary>
        </member>
        <member name="P:Simpleflow.Resources.Message.VariableAlreadyDefined">
            <summary>
              Looks up a localized string similar to A variable named &apos;{0}&apos; is already defined.
            </summary>
        </member>
        <member name="T:Simpleflow.RuntimeContext">
            <summary>
            This class is for internal purpose only
            </summary>
        </member>
        <member name="P:Simpleflow.RuntimeContext.HasErrors">
            <summary>
            Gets true if errors are emitted else false.
            </summary>
        </member>
        <member name="P:Simpleflow.RuntimeContext.HasMessages">
            <summary>
            Gets true if messages are emitted else false.
            </summary>
        </member>
        <member name="P:Simpleflow.RuntimeContext.CancellationToken">
            <summary>
            Gets cancellation token 
            </summary>
        </member>
        <member name="T:Simpleflow.Services.CacheService">
            <summary>
            A service to cache the generate code instructions
            </summary>
        </member>
        <member name="M:Simpleflow.Services.CacheService.#ctor(Simpleflow.CacheOptions)">
            <summary>
            
            </summary>
            <param name="cacheOptions">
            </param>
        </member>
        <member name="M:Simpleflow.Services.CacheService.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Simpleflow.Services.CacheService.Run``1(Simpleflow.FlowContext{``0},Simpleflow.NextPipelineService{``0})">
            <inheritdoc />
        </member>
        <member name="M:Simpleflow.Services.CacheService.GetScriptUniqueId(Simpleflow.CacheOptions,System.String)">
            <summary>
            Gets script unique id by creating hash (SHA256) for the input script
            </summary>
            <param name="contextCacheOptions"></param>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="T:Simpleflow.Services.CompilerService">
            <summary>
            <see cref="T:Simpleflow.Services.CompilerService"/> to parse the instructions
            and generate machine code
            </summary>
        </member>
        <member name="M:Simpleflow.Services.CompilerService.#ctor(Simpleflow.IFunctionRegister,Simpleflow.IOptions)">
            <summary>
            
            </summary>
            <param name="options"></param>
            <param name="functionRegister"></param>
        </member>
        <member name="M:Simpleflow.Services.CompilerService.Run``1(Simpleflow.FlowContext{``0},Simpleflow.NextPipelineService{``0})">
            <inheritdoc />
        </member>
        <member name="T:Simpleflow.Services.ExecutionService">
            <summary>
            A service to run the machine code instructions
            </summary>
        </member>
        <member name="M:Simpleflow.Services.ExecutionService.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Simpleflow.Services.ExecutionService.#ctor(Simpleflow.IOptions)">
            <summary>
            
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Simpleflow.Services.ExecutionService.Run``1(Simpleflow.FlowContext{``0},Simpleflow.NextPipelineService{``0})">
            <inheritdoc />
        </member>
        <member name="T:Simpleflow.Simpleflow">
            <summary>
            Simpleflow executes instructions. It's thread safe.
            </summary>
        </member>
        <member name="M:Simpleflow.Simpleflow.Run``1(System.String,``0)">
            <inheritdoc />
        </member>
        <member name="M:Simpleflow.Simpleflow.Run``1(System.String,``0,Simpleflow.IContextOptions)">
            <inheritdoc />
        </member>
        <member name="M:Simpleflow.Simpleflow.Run``1(System.String,``0,Simpleflow.IFunctionRegister)">
            <inheritdoc />
        </member>
        <member name="M:Simpleflow.Simpleflow.Run``1(System.String,``0,Simpleflow.IContextOptions,Simpleflow.IFunctionRegister)">
            <inheritdoc />
        </member>
        <member name="T:Simpleflow.SimpleflowEngine">
            <summary>
            
            </summary>
        </member>
        <member name="M:Simpleflow.SimpleflowEngine.Run``1(System.String,``0)">
            <summary>
            
            </summary>
            <typeparam name="TInput"></typeparam>
            <param name="script"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Simpleflow.SimpleflowPipelineBuilder">
            <summary>
            Builds pipeline using middleware and with default services.
            </summary>
        </member>
        <member name="M:Simpleflow.SimpleflowPipelineBuilder.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Simpleflow.SimpleflowPipelineBuilder"/>
            </summary>
        </member>
        <member name="P:Simpleflow.SimpleflowPipelineBuilder.Services">
            <inheritdoc />
        </member>
        <member name="M:Simpleflow.SimpleflowPipelineBuilder.AddCorePipelineServices(Simpleflow.IOptions)">
            <summary>
            Adds default core services
            <br /> <see cref="T:Simpleflow.Services.CacheService"/>
            <br /> <see cref="T:Simpleflow.Services.CompilerService"/>
            <br /> <see cref="T:Simpleflow.Services.ExecutionService"/> 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Simpleflow.SimpleflowPipelineBuilder.AddCorePipelineServices(Simpleflow.IFunctionRegister,Simpleflow.IOptions)">
            <summary>
            Adds default core services
            <br /> <see cref="T:Simpleflow.Services.CacheService"/>
            <br /> <see cref="T:Simpleflow.Services.CompilerService"/>
            <br /> <see cref="T:Simpleflow.Services.ExecutionService"/> 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Simpleflow.SimpleflowPipelineBuilder.AddPipelineServices(Simpleflow.IFlowPipelineService[])">
            <inheritdoc />
        </member>
        <member name="M:Simpleflow.SimpleflowPipelineBuilder.Build">
            <inheritdoc />
        </member>
        <member name="T:Simpleflow.SimpleflowTrace">
            <summary>
            Represents trace log
            </summary>
        </member>
        <member name="M:Simpleflow.SimpleflowTrace.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Simpleflow.SimpleflowTrace"/>
            </summary>
        </member>
        <member name="M:Simpleflow.SimpleflowTrace.CreateNewTracePoint(System.String)">
            <summary>
            Adds service to trace, internal purpose only for implementing ISimpleflow 
            </summary>
            <param name="serviceName"></param>
        </member>
        <member name="M:Simpleflow.SimpleflowTrace.Write(System.String)">
            <summary>
            Writes message to log trace 
            </summary>
            <param name="message">Message to write</param>
        </member>
        <member name="M:Simpleflow.SimpleflowTrace.GetLogs">
            <summary>
            Gets logs of trace
            </summary>
            <returns></returns>
        </member>
        <member name="M:Simpleflow.SimpleflowTrace.ToString">
            <summary>
            Gets services trace log
            </summary>
            <returns></returns>
        </member>
        <member name="T:Simpleflow.SyntaxError">
            <summary>
            
            </summary>
        </member>
        <member name="T:FastExpressionCompiler.ExpressionCompiler">
            <summary>Compiles expression to delegate ~20 times faster than Expression.Compile.
            Partial to extend with your things when used as source file.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.Compile``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>Obsolete: replaced by CompileFast extension method</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.Compile``1(System.Linq.Expressions.LambdaExpression)">
            <summary>Obsolete: replaced by CompileFast extension method</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast``1(System.Linq.Expressions.LambdaExpression,System.Boolean)">
            <summary>Compiles lambda expression to TDelegate type. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast(System.Linq.Expressions.LambdaExpression,System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.Boolean)">
            <summary>Compiles lambda expression to TDelegate type. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}},System.Boolean)">
            <summary>Compiles lambda expression to TDelegate type. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast(System.Linq.Expressions.Expression{System.Action},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast``1(System.Linq.Expressions.Expression{System.Action{``0}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast``2(System.Linq.Expressions.Expression{System.Action{``0,``1}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast``3(System.Linq.Expressions.Expression{System.Action{``0,``1,``2}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast``4(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast``5(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast``6(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.TryCompile``1(System.Linq.Expressions.LambdaExpression)">
            <summary>Tries to compile lambda expression to <typeparamref name="TDelegate"/>.</summary>
            <typeparam name="TDelegate">The compatible delegate type, otherwise case will throw.</typeparam>
            <param name="lambdaExpr">Lambda expression to compile.</param>
            <returns>Compiled delegate.</returns>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.GetParamExprTypes(System.Collections.Generic.IList{System.Linq.Expressions.ParameterExpression})">
            <summary>Performant method to get parameter types from parameter expressions.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.TryCompile``1(System.Linq.Expressions.Expression,System.Collections.Generic.IList{System.Linq.Expressions.ParameterExpression},System.Type[],System.Type)">
            <summary>Compiles expression to delegate by emitting the IL. 
            If sub-expressions are not supported by emitter, then the method returns null.
            The usage should be calling the method, if result is null then calling the Expression.Compile.</summary>
            <param name="bodyExpr">Lambda body.</param>
            <param name="paramExprs">Lambda parameter expressions.</param>
            <param name="paramTypes">The types of parameters.</param>
            <param name="returnType">The return type.</param>
            <returns>Result delegate or null, if unable to compile.</returns>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.TryCompile``1(FastExpressionCompiler.LambdaExpressionInfo)">
            <summary>Tries to compile lambda expression info.</summary>
            <typeparam name="TDelegate">The compatible delegate type, otherwise case will throw.</typeparam>
            <param name="lambdaExpr">Lambda expression to compile.</param>
            <returns>Compiled delegate.</returns>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.TryCompile``1(FastExpressionCompiler.ExpressionInfo{``0})">
            <summary>Tries to compile lambda expression info.</summary>
            <typeparam name="TDelegate">The compatible delegate type, otherwise case will throw.</typeparam>
            <param name="lambdaExpr">Lambda expression to compile.</param>
            <returns>Compiled delegate.</returns>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.TryCompile``1(FastExpressionCompiler.ExpressionInfo,System.Collections.Generic.IList{System.Linq.Expressions.ParameterExpression},System.Type[],System.Type)">
            <summary>Compiles expression to delegate by emitting the IL. 
            If sub-expressions are not supported by emitter, then the method returns null.
            The usage should be calling the method, if result is null then calling the Expression.Compile.</summary>
            <param name="bodyExpr">Lambda body.</param>
            <param name="paramExprs">Lambda parameter expressions.</param>
            <param name="paramTypes">The types of parameters.</param>
            <param name="returnType">The return type.</param>
            <returns>Result delegate or null, if unable to compile.</returns>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.GetFuncOrActionType(System.Type[],System.Type)">
            <summary>Construct delegate type (Func or Action) from given input and return parameter types.</summary>
        </member>
        <member name="T:FastExpressionCompiler.ExpressionCompiler.EmittingVisitor">
            <summary>Supports emitting of selected expressions, e.g. lambdaExpr are not supported yet.
            When emitter find not supported expression it will return false from <see cref="M:FastExpressionCompiler.ExpressionCompiler.EmittingVisitor.TryEmit(System.Object,System.Linq.Expressions.ExpressionType,System.Type,System.Collections.Generic.IList{System.Linq.Expressions.ParameterExpression},System.Reflection.Emit.ILGenerator,FastExpressionCompiler.ExpressionCompiler.ClosureInfo)"/>, so I could fallback
            to normal and slow Expression.Compile.</summary>
        </member>
        <member name="T:FastExpressionCompiler.ExpressionInfo">
            <summary>Facade for constructing expression info.</summary>
        </member>
        <member name="P:FastExpressionCompiler.ExpressionInfo.NodeType">
            <summary>Expression node type.</summary>
        </member>
        <member name="P:FastExpressionCompiler.ExpressionInfo.Type">
            <summary>All expressions should have a Type.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionInfo.Constant(System.Object,System.Type)">
            <summary>Analog of Expression.Constant</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionInfo.New(System.Reflection.ConstructorInfo)">
            <summary>Analog of Expression.New</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionInfo.New(System.Reflection.ConstructorInfo,System.Object[])">
            <summary>Analog of Expression.New</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionInfo.New(System.Reflection.ConstructorInfo,FastExpressionCompiler.ExpressionInfo[])">
            <summary>Analog of Expression.New</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionInfo.Call(System.Reflection.MethodInfo,System.Object[])">
            <summary>Static method call</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionInfo.Call(System.Reflection.MethodInfo,FastExpressionCompiler.ExpressionInfo[])">
            <summary>Static method call</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionInfo.Call(FastExpressionCompiler.ExpressionInfo,System.Reflection.MethodInfo,System.Object[])">
            <summary>Instance method call</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionInfo.Call(FastExpressionCompiler.ExpressionInfo,System.Reflection.MethodInfo,FastExpressionCompiler.ExpressionInfo[])">
            <summary>Instance method call</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionInfo.Property(System.Reflection.PropertyInfo)">
            <summary>Static property</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionInfo.Property(FastExpressionCompiler.ExpressionInfo,System.Reflection.PropertyInfo)">
            <summary>Instance property</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionInfo.Property(System.Object,System.Reflection.PropertyInfo)">
            <summary>Instance property</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionInfo.Field(System.Reflection.FieldInfo)">
            <summary>Static field</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionInfo.Property(FastExpressionCompiler.ExpressionInfo,System.Reflection.FieldInfo)">
            <summary>Instance field</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionInfo.Lambda(FastExpressionCompiler.ExpressionInfo)">
            <summary>Analog of Expression.Lambda</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionInfo.Lambda(FastExpressionCompiler.ExpressionInfo,System.Linq.Expressions.ParameterExpression[])">
            <summary>Analog of Expression.Lambda</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionInfo.Lambda(System.Object,System.Linq.Expressions.ParameterExpression[])">
            <summary>Analog of Expression.Lambda</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionInfo.Convert(FastExpressionCompiler.ExpressionInfo,System.Type)">
            <summary>Analog of Expression.Convert</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionInfo.Lambda``1(FastExpressionCompiler.ExpressionInfo)">
            <summary>Analog of Expression.Lambda</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionInfo.Lambda``1(FastExpressionCompiler.ExpressionInfo,System.Linq.Expressions.ParameterExpression[])">
            <summary>Analog of Expression.Lambda</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionInfo.ArrayIndex(FastExpressionCompiler.ExpressionInfo,FastExpressionCompiler.ExpressionInfo)">
            <summary>Analog of Expression.ArrayIndex</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionInfo.ArrayIndex(System.Object,System.Object)">
            <summary>Analog of Expression.ArrayIndex</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionInfo.Bind(System.Reflection.MemberInfo,FastExpressionCompiler.ExpressionInfo)">
            <summary>Expression.Bind used in Expression.MemberInit</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionInfo.MemberInit(FastExpressionCompiler.NewExpressionInfo,FastExpressionCompiler.MemberAssignmentInfo[])">
            <summary>Analog of Expression.MemberInit</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionInfo.MemberInit(FastExpressionCompiler.ExpressionInfo,FastExpressionCompiler.MemberAssignmentInfo[])">
            <summary>Enables member assignment on existing instance expression.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionInfo.NewArrayInit(System.Type,System.Object[])">
            <summary>Constructs an array given the array type and item initializer expressions.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionInfo.NewArrayInit(System.Type,FastExpressionCompiler.ExpressionInfo[])">
            <summary>Constructs an array given the array type and item initializer expressions.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionInfo.Assign(FastExpressionCompiler.ExpressionInfo,FastExpressionCompiler.ExpressionInfo)">
            <summary>Constructs assignment expression.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionInfo.Assign(System.Object,System.Object)">
            <summary>Constructs assignment expression from possibly mixed types of left and right.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionInfo.Invoke(FastExpressionCompiler.LambdaExpressionInfo,System.Object[])">
            <summary>Invoke</summary>
        </member>
        <member name="T:FastExpressionCompiler.UnaryExpressionInfo">
            <summary>Analog of Convert expression.</summary>
        </member>
        <member name="P:FastExpressionCompiler.UnaryExpressionInfo.NodeType">
            <inheritdoc />
        </member>
        <member name="P:FastExpressionCompiler.UnaryExpressionInfo.Type">
            <summary>Target type.</summary>
        </member>
        <member name="F:FastExpressionCompiler.UnaryExpressionInfo.Operand">
            <summary>Operand expression</summary>
        </member>
        <member name="M:FastExpressionCompiler.UnaryExpressionInfo.#ctor(System.Linq.Expressions.ExpressionType,FastExpressionCompiler.ExpressionInfo,System.Type)">
            <summary>Constructor</summary>
        </member>
        <member name="T:FastExpressionCompiler.BinaryExpressionInfo">
            <summary>BinaryExpression analog.</summary>
        </member>
        <member name="P:FastExpressionCompiler.BinaryExpressionInfo.NodeType">
            <inheritdoc />
        </member>
        <member name="P:FastExpressionCompiler.BinaryExpressionInfo.Type">
            <inheritdoc />
        </member>
        <member name="F:FastExpressionCompiler.BinaryExpressionInfo.Left">
            <summary>Left expression</summary>
        </member>
        <member name="F:FastExpressionCompiler.BinaryExpressionInfo.Right">
            <summary>Right expression</summary>
        </member>
        <member name="M:FastExpressionCompiler.BinaryExpressionInfo.#ctor(System.Linq.Expressions.ExpressionType,System.Object,System.Object,System.Type)">
            <summary>Constructs from left and right expressions.</summary>
        </member>
        <member name="T:FastExpressionCompiler.MemberInitExpressionInfo">
            <summary>Analog of MemberInitExpression</summary>
        </member>
        <member name="P:FastExpressionCompiler.MemberInitExpressionInfo.NodeType">
            <inheritdoc />
        </member>
        <member name="P:FastExpressionCompiler.MemberInitExpressionInfo.Type">
            <inheritdoc />
        </member>
        <member name="P:FastExpressionCompiler.MemberInitExpressionInfo.NewExpressionInfo">
            <summary>New expression.</summary>
        </member>
        <member name="F:FastExpressionCompiler.MemberInitExpressionInfo.ExpressionInfo">
            <summary>New expression.</summary>
        </member>
        <member name="F:FastExpressionCompiler.MemberInitExpressionInfo.Bindings">
            <summary>Member assignments.</summary>
        </member>
        <member name="M:FastExpressionCompiler.MemberInitExpressionInfo.#ctor(FastExpressionCompiler.NewExpressionInfo,FastExpressionCompiler.MemberAssignmentInfo[])">
            <summary>Constructs from the new expression and member initialization list.</summary>
        </member>
        <member name="M:FastExpressionCompiler.MemberInitExpressionInfo.#ctor(FastExpressionCompiler.ExpressionInfo,FastExpressionCompiler.MemberAssignmentInfo[])">
            <summary>Constructs from existing expression and member assignment list.</summary>
        </member>
        <member name="T:FastExpressionCompiler.ParameterExpressionInfo">
            <summary>Wraps ParameterExpression and just it.</summary>
        </member>
        <member name="P:FastExpressionCompiler.ParameterExpressionInfo.ParamExpr">
            <summary>Wrapped parameter expression.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ParameterExpressionInfo.op_Implicit(FastExpressionCompiler.ParameterExpressionInfo)~System.Linq.Expressions.ParameterExpression">
            <summary>Allow to change parameter expression as info interchangeable.</summary>
        </member>
        <member name="P:FastExpressionCompiler.ParameterExpressionInfo.NodeType">
            <inheritdoc />
        </member>
        <member name="P:FastExpressionCompiler.ParameterExpressionInfo.Type">
            <inheritdoc />
        </member>
        <member name="P:FastExpressionCompiler.ParameterExpressionInfo.Name">
            <summary>Optional name.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ParameterExpressionInfo.#ctor(System.Linq.Expressions.ParameterExpression)">
            <summary>Constructor</summary>
        </member>
        <member name="T:FastExpressionCompiler.ConstantExpressionInfo">
            <summary>Analog of ConstantExpression.</summary>
        </member>
        <member name="P:FastExpressionCompiler.ConstantExpressionInfo.NodeType">
            <inheritdoc />
        </member>
        <member name="P:FastExpressionCompiler.ConstantExpressionInfo.Type">
            <inheritdoc />
        </member>
        <member name="F:FastExpressionCompiler.ConstantExpressionInfo.Value">
            <summary>Value of constant.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ConstantExpressionInfo.#ctor(System.Object,System.Type)">
            <summary>Constructor</summary>
        </member>
        <member name="T:FastExpressionCompiler.ArgumentsExpressionInfo">
            <summary>Base class for expressions with arguments.</summary>
        </member>
        <member name="F:FastExpressionCompiler.ArgumentsExpressionInfo.Arguments">
            <summary>List of arguments</summary>
        </member>
        <member name="M:FastExpressionCompiler.ArgumentsExpressionInfo.#ctor(System.Object[])">
            <summary>Constructor</summary>
        </member>
        <member name="T:FastExpressionCompiler.NewExpressionInfo">
            <summary>Analog of NewExpression</summary>
        </member>
        <member name="P:FastExpressionCompiler.NewExpressionInfo.NodeType">
            <inheritdoc />
        </member>
        <member name="P:FastExpressionCompiler.NewExpressionInfo.Type">
            <inheritdoc />
        </member>
        <member name="F:FastExpressionCompiler.NewExpressionInfo.Constructor">
            <summary>The constructor info.</summary>
        </member>
        <member name="M:FastExpressionCompiler.NewExpressionInfo.#ctor(System.Reflection.ConstructorInfo,System.Object[])">
            <summary>Construct from constructor info and argument expressions</summary>
        </member>
        <member name="T:FastExpressionCompiler.NewArrayExpressionInfo">
            <summary>NewArrayExpression</summary>
        </member>
        <member name="P:FastExpressionCompiler.NewArrayExpressionInfo.NodeType">
            <inheritdoc />
        </member>
        <member name="P:FastExpressionCompiler.NewArrayExpressionInfo.Type">
            <inheritdoc />
        </member>
        <member name="M:FastExpressionCompiler.NewArrayExpressionInfo.#ctor(System.Type,System.Object[])">
            <summary>Array type and initializer</summary>
        </member>
        <member name="T:FastExpressionCompiler.MethodCallExpressionInfo">
            <summary>Analog of MethodCallExpression</summary>
        </member>
        <member name="P:FastExpressionCompiler.MethodCallExpressionInfo.NodeType">
            <inheritdoc />
        </member>
        <member name="P:FastExpressionCompiler.MethodCallExpressionInfo.Type">
            <inheritdoc />
        </member>
        <member name="F:FastExpressionCompiler.MethodCallExpressionInfo.Method">
            <summary>The method info.</summary>
        </member>
        <member name="F:FastExpressionCompiler.MethodCallExpressionInfo.Object">
            <summary>Instance expression, null if static.</summary>
        </member>
        <member name="M:FastExpressionCompiler.MethodCallExpressionInfo.#ctor(FastExpressionCompiler.ExpressionInfo,System.Reflection.MethodInfo,System.Object[])">
            <summary>Construct from method info and argument expressions</summary>
        </member>
        <member name="T:FastExpressionCompiler.MemberExpressionInfo">
            <summary>Analog of MemberExpression</summary>
        </member>
        <member name="P:FastExpressionCompiler.MemberExpressionInfo.NodeType">
            <inheritdoc />
        </member>
        <member name="F:FastExpressionCompiler.MemberExpressionInfo.Member">
            <summary>Member info.</summary>
        </member>
        <member name="F:FastExpressionCompiler.MemberExpressionInfo.Expression">
            <summary>Instance expression, null if static.</summary>
        </member>
        <member name="M:FastExpressionCompiler.MemberExpressionInfo.#ctor(System.Object,System.Reflection.MemberInfo)">
            <summary>Constructs with</summary>
        </member>
        <member name="T:FastExpressionCompiler.PropertyExpressionInfo">
            <summary>Analog of PropertyExpression</summary>
        </member>
        <member name="P:FastExpressionCompiler.PropertyExpressionInfo.Type">
            <inheritdoc />
        </member>
        <member name="M:FastExpressionCompiler.PropertyExpressionInfo.#ctor(System.Object,System.Reflection.PropertyInfo)">
            <summary>Construct from property info</summary>
        </member>
        <member name="T:FastExpressionCompiler.FieldExpressionInfo">
            <summary>Analog of PropertyExpression</summary>
        </member>
        <member name="P:FastExpressionCompiler.FieldExpressionInfo.Type">
            <inheritdoc />
        </member>
        <member name="M:FastExpressionCompiler.FieldExpressionInfo.#ctor(FastExpressionCompiler.ExpressionInfo,System.Reflection.FieldInfo)">
            <summary>Construct from field info</summary>
        </member>
        <member name="T:FastExpressionCompiler.MemberAssignmentInfo">
            <summary>MemberAssignment analog.</summary>
        </member>
        <member name="F:FastExpressionCompiler.MemberAssignmentInfo.Member">
            <summary>Member to assign to.</summary>
        </member>
        <member name="F:FastExpressionCompiler.MemberAssignmentInfo.Expression">
            <summary>Expression to assign</summary>
        </member>
        <member name="M:FastExpressionCompiler.MemberAssignmentInfo.#ctor(System.Reflection.MemberInfo,FastExpressionCompiler.ExpressionInfo)">
            <summary>Constructs out of member and expression to assign.</summary>
        </member>
        <member name="T:FastExpressionCompiler.LambdaExpressionInfo">
            <summary>LambdaExpression</summary>
        </member>
        <member name="P:FastExpressionCompiler.LambdaExpressionInfo.NodeType">
            <inheritdoc />
        </member>
        <member name="P:FastExpressionCompiler.LambdaExpressionInfo.Type">
            <inheritdoc />
        </member>
        <member name="F:FastExpressionCompiler.LambdaExpressionInfo.Body">
            <summary>Lambda body.</summary>
        </member>
        <member name="F:FastExpressionCompiler.LambdaExpressionInfo.Parameters">
            <summary>List of parameters.</summary>
        </member>
        <member name="M:FastExpressionCompiler.LambdaExpressionInfo.#ctor(System.Object,System.Linq.Expressions.ParameterExpression[])">
            <summary>Constructor</summary>
        </member>
        <member name="T:FastExpressionCompiler.ExpressionInfo`1">
            <summary>Typed lambda expression.</summary>
        </member>
        <member name="P:FastExpressionCompiler.ExpressionInfo`1.DelegateType">
            <summary>Type of lambda</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionInfo`1.#ctor(FastExpressionCompiler.ExpressionInfo,System.Linq.Expressions.ParameterExpression[])">
            <summary>Constructor</summary>
        </member>
        <member name="T:FastExpressionCompiler.InvocationExpressionInfo">
            <summary>Analog of InvocationExpression.</summary>
        </member>
        <member name="P:FastExpressionCompiler.InvocationExpressionInfo.NodeType">
            <inheritdoc />
        </member>
        <member name="P:FastExpressionCompiler.InvocationExpressionInfo.Type">
            <inheritdoc />
        </member>
        <member name="F:FastExpressionCompiler.InvocationExpressionInfo.LambdaExprInfo">
            <summary>Delegate to invoke.</summary>
        </member>
        <member name="M:FastExpressionCompiler.InvocationExpressionInfo.#ctor(FastExpressionCompiler.LambdaExpressionInfo,System.Object[],System.Type)">
            <summary>Constructs</summary>
        </member>
    </members>
</doc>
